<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[理财基础]]></title>
      <url>/2018/01/04/%E7%90%86%E8%B4%A2%20(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<h2 id="一、理财是什么"><a href="#一、理财是什么" class="headerlink" title="一、理财是什么"></a>一、理财是什么</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><ul>
<li>对财务（财产和债务）进行管理，以实现财务的保值、增值为目的。理财分为公司理财、机构理财、个人理财 和家庭理财等。人类的生存、生活及其它活动离不开物质基础，与理财密切相关。</li>
</ul>
<h3 id="1-2-理财工具"><a href="#1-2-理财工具" class="headerlink" title="1.2 理财工具"></a>1.2 理财工具</h3><h4 id="1-2-1-增值"><a href="#1-2-1-增值" class="headerlink" title="1.2.1 增值"></a>1.2.1 增值</h4><ul>
<li>高等风险投资，比如信托、期货、外汇、艺术品</li>
<li>中等风险投资，比如债券、基金、股票、房产、贵金属</li>
</ul>
<h4 id="1-2-2-保值"><a href="#1-2-2-保值" class="headerlink" title="1.2.2 保值"></a>1.2.2 保值</h4><ul>
<li>低风险投资：银行理财、货币基金、国债</li>
</ul>
<h4 id="1-2-2-保障"><a href="#1-2-2-保障" class="headerlink" title="1.2.2 保障"></a>1.2.2 保障</h4><ul>
<li>保险规划</li>
<li>现金规划</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[产品经理基础]]></title>
      <url>/2018/01/02/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="一、产品和产品经理"><a href="#一、产品和产品经理" class="headerlink" title="一、产品和产品经理"></a>一、产品和产品经理</h2><h4 id="1-1-产品"><a href="#1-1-产品" class="headerlink" title="1.1 产品"></a>1.1 产品</h4><ul>
<li>帮助人们解决问题与麻烦的、可被使用和消费的、有形或者无形的服务、组织和观念</li>
</ul>
<h4 id="1-2-产品经理"><a href="#1-2-产品经理" class="headerlink" title="1.2 产品经理"></a>1.2 产品经理</h4><ul>
<li>负责设计出或者改进某产品的人</li>
<li>目前主要指代计算机设备的应用程序的产品经理。</li>
</ul>
<h2 id="二、如何设计应用程序"><a href="#二、如何设计应用程序" class="headerlink" title="二、如何设计应用程序"></a>二、如何设计应用程序</h2><h4 id="2-1-问题："><a href="#2-1-问题：" class="headerlink" title="2.1 问题："></a>2.1 问题：</h4><ul>
<li>帮助我们解决一个或多个问题。</li>
</ul>
<h4 id="2-2-流程与页面："><a href="#2-2-流程与页面：" class="headerlink" title="2.2 流程与页面："></a>2.2 流程与页面：</h4><ul>
<li>各种各样的页面存在一定的流程关系。</li>
</ul>
<h4 id="2-3-内容与功能："><a href="#2-3-内容与功能：" class="headerlink" title="2.3 内容与功能："></a>2.3 内容与功能：</h4><ul>
<li>不同页面内容和功能不同。</li>
</ul>
<h4 id="2-4-布局："><a href="#2-4-布局：" class="headerlink" title="2.4 布局："></a>2.4 布局：</h4><ul>
<li>内容和功能有不同的位置。</li>
</ul>
<h4 id="2-5-样式："><a href="#2-5-样式：" class="headerlink" title="2.5 样式："></a>2.5 样式：</h4><ul>
<li>优雅美观的设计风格。</li>
</ul>
<h2 id="三、应用程序的工作分工"><a href="#三、应用程序的工作分工" class="headerlink" title="三、应用程序的工作分工"></a>三、应用程序的工作分工</h2><h4 id="3-1-分工"><a href="#3-1-分工" class="headerlink" title="3.1 分工"></a>3.1 分工</h4><ul>
<li>产品经理：2.1 \ 2.2 </li>
<li>交互设计：2.3 \ 2.4</li>
<li>UI设计师：2.5 </li>
<li>开发：研发工程师</li>
<li>测试：测试工程师</li>
<li>上线</li>
<li>推广：市场推广，让更多人接触和使用</li>
<li>运营：产品运行，让用户更长的使用和产生收益</li>
<li>运维：运维工程师，数据和服务器的高速稳定。</li>
</ul>
<h4 id="3-2-调整"><a href="#3-2-调整" class="headerlink" title="3.2 调整"></a>3.2 调整</h4><p>小型公司部分岗位进行融合，比如无交互设计和运维。</p>
<h2 id="四、产品经理的具体工作"><a href="#四、产品经理的具体工作" class="headerlink" title="四、产品经理的具体工作"></a>四、产品经理的具体工作</h2><h4 id="4-1-解决什么问题与麻烦"><a href="#4-1-解决什么问题与麻烦" class="headerlink" title="4.1 解决什么问题与麻烦"></a>4.1 解决什么问题与麻烦</h4><ul>
<li>洞察机会：可以帮助人们解决什么问题，也就是点子</li>
<li>市场分析：解决这个问题，有没有市场前景，能不能得到好处</li>
<li>用户研究：什么样的人会碰到这样的问题？什么情况下？</li>
<li>需求分析：用户达到什么目的？用户有什么要求?</li>
<li>竞品分析:有没有产品已经解决这个问题，怎么做的，优缺点。</li>
<li>产品策划：为什么要做？应该怎么做？需要什么方法和资源？<h4 id="4-2-功能与内容"><a href="#4-2-功能与内容" class="headerlink" title="4.2 功能与内容"></a>4.2 功能与内容</h4></li>
<li>需求管理：问题优先、稍后、暂不解决</li>
<li>功能设计: 什么功能来解决问题</li>
<li>内容设计：什么内容来解决问题</li>
<li>功能模块设计:模块与系统，如何组合</li>
<li>信息结构设计：信息流的逻辑梳理</li>
<li>需求文档撰写：需求文档把上述内容都说清楚</li>
</ul>
<h4 id="4-3-流程页面"><a href="#4-3-流程页面" class="headerlink" title="4.3 流程页面"></a>4.3 流程页面</h4><ul>
<li>流程设计：按照什么流程来查看和使用</li>
<li>页面设置：哪些内容放在一个页面上，都有哪些页面</li>
<li>信息架构设计：如何让用户明白产品有哪些功能，并能快速定位到自己的需求</li>
<li>原型设计：具体的页面视图</li>
<li>交互文档撰写：把原型的展示细节说清楚</li>
</ul>
<h4 id="4-4-其他工作"><a href="#4-4-其他工作" class="headerlink" title="4.4 其他工作"></a>4.4 其他工作</h4><ul>
<li>配合UI设计师：一同选择设计风格并验收</li>
<li>配合开发工程师：不理解和不好实现的问题</li>
<li>管理项目进度：项目排期和按时发布</li>
<li>配合产品测试：发现可能存在的问题和不足</li>
<li>配合市场推广：帮助获取更多用户来使用产品</li>
<li>配合运营：协助设计运营方案。</li>
</ul>
<h2 id="五、产品经理能力"><a href="#五、产品经理能力" class="headerlink" title="五、产品经理能力"></a>五、产品经理能力</h2><h4 id="5-1-素质能力"><a href="#5-1-素质能力" class="headerlink" title="5.1 素质能力"></a>5.1 素质能力</h4><ul>
<li>逻辑分析能力：对产品和用户思考</li>
<li>设计规划能力： 功能和内容的迭代</li>
<li>文字表达能力： 问题和方案描述清楚</li>
<li>良好沟通能力：与各方沟通</li>
<li>管理能力： 需求和项目进度管理</li>
</ul>
<h4 id="5-2-工具能力"><a href="#5-2-工具能力" class="headerlink" title="5.2 工具能力"></a>5.2 工具能力</h4><ul>
<li>思维导图：Xmind</li>
<li>流程图：processon</li>
<li>原型工具：墨刀、Axure</li>
<li>文档撰写：word</li>
<li>数据整理分析：excel</li>
<li>展示和回报：PPT</li>
</ul>
<h2 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h2><ul>
<li>产品经理确实是更符合我的性格，如果最开始入行就选择，到如今肯定已经做到较高的水平。从前对行业认识不足以及自我认知也不够深切，选择了从程序员方向切入，不过最近对程序开发的认识更进一步，我始终保持发散思维，相信待到合适的现实时机下，有机会直接做事，反而是程序员的优势。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[New一个golang爬虫]]></title>
      <url>/2017/09/01/New%E4%B8%80%E4%B8%AAgolang%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>刚好七八双月结束，工作整理完毕，下个双月OKR还没开始。做久了IOS开发也来扩展下领域，抽空几天学了下Golang，实现一个爬虫。</p>
</blockquote>
<h2 id="一、知识要点"><a href="#一、知识要点" class="headerlink" title="一、知识要点"></a>一、知识要点</h2><h3 id="1、爬虫"><a href="#1、爬虫" class="headerlink" title="1、爬虫"></a>1、爬虫</h3><h4 id="1-1-工作方式"><a href="#1-1-工作方式" class="headerlink" title="1.1 工作方式"></a>1.1 工作方式</h4><p>传统爬虫从一个或若干初始网页的URL开始，获得初始网页上的URL，在抓取网页的过程中，不断从当前页面上抽取新的URL放入队列,直到满足系统的一定停止条件。聚焦爬虫的工作流程较为复杂，需要根据一定的网页分析算法过滤与主题无关的链接，保留有用的链接并将其放入等待抓取的URL队列。然后，它将根据一定的搜索策略从队列中选择下一步要抓取的网页URL，并重复上述过程，直到达到系统的某一条件时停止。另外，所有被爬虫抓取的网页将会被系统存贮，进行一定的分析、过滤，并建立索引，以便之后的查询和检索；对于聚焦爬虫来说，这一过程所得到的分析结果还可能对以后的抓取过程给出反馈和指导。</p>
<h4 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1.2 分类"></a>1.2 分类</h4><ul>
<li>全网爬虫，爬行对象从一些种子 URL 扩充到整个 Web，主要为门户站点搜索引擎和大型 Web 服务提供商采集数据。</li>
<li>聚焦网络爬虫，是指选择性地爬行那些与预先定义好的主题相关页面的网络爬虫。</li>
<li>增量式网络爬虫，是指对已下载网页采取增量式更新和只爬行新产生的或者已经发生变化网页的爬虫，它能够在一定程度上保证所爬行的页面是尽可能新的页面。</li>
<li>Deep Web 爬虫，表层网页是指传统搜索引擎可以索引的页面，以超链接可以到达的静态网页为主构成的Web页面。Deep Web 是那些大部分内容不能通过静态链接获取的、隐藏在搜索表单后的，只有用户提交一些关键词才能获得的 Web 页面。</li>
</ul>
<h4 id="1-3爬虫算法"><a href="#1-3爬虫算法" class="headerlink" title="1.3爬虫算法"></a>1.3爬虫算法</h4><ul>
<li><p>深度优先策略</p>
<p>  其基本方法是按照深度由低到高的顺序，依次访问下一级网页链接，直到不能再深入为止。 爬虫在完成一个爬行分支后返回到上一链接节点进一步搜索其它链接。 当所有链接遍历完后，爬行任务结束。 这种策略比较适合垂直搜索或站内搜索， 但爬行页面内容层次较深的站点时会造成资源的巨大浪费。</p>
</li>
<li><p>广度优先策略</p>
<p>  此策略按照网页内容目录层次深浅来爬行页面，处于较浅目录层次的页面首先被爬行。 当同一层次中的页面爬行完毕后，爬虫再深入下一层继续爬行。 这种策略能够有效控制页面的爬行深度，避免遇到一个无穷深层分支时无法结束爬行的问题，实现方便，无需存储大量中间节点，不足之处在于需较长时间才能爬行到目录层次较深的页面</p>
</li>
</ul>
<h3 id="2、golang"><a href="#2、golang" class="headerlink" title="2、golang"></a>2、golang</h3><h4 id="2-1-语法学习"><a href="#2-1-语法学习" class="headerlink" title="2.1 语法学习"></a>2.1 语法学习</h4><ul>
<li><p>为了让学习更加快速，想要优先上手，而不是沉浸在大量语法里面，找了一遍基础的语法文档，直接全读整体语法，先有个基础但是全面的认识。<br><a href="http://www.runoob.com/go/go-tutorial.html" target="_blank" rel="external">语法教程链接</a></p>
</li>
<li><p>然后直接手一本web教程书籍，此本书籍是开源的，在github上有1.78万star，5年前就开始书写，一直被追捧和使用。<a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="external">书籍链接</a></p>
</li>
</ul>
<h3 id="2-2-环境安装"><a href="#2-2-环境安装" class="headerlink" title="2.2 环境安装"></a>2.2 环境安装</h3><h4 id="1-1-在MacOSX上安装"><a href="#1-1-在MacOSX上安装" class="headerlink" title="1.1 在MacOSX上安装"></a>1.1 在MacOSX上安装</h4><ul>
<li><a href="https://golang.org/dl/" target="_blank" rel="external">下载地址</a></li>
<li>源码包：go1.4.linux-amd64.tar.gz。</li>
<li>将下载的源码包解压至 /usr/local目录。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -C /usr/local -xzf go1.4.linux-amd64.tar.gz</div></pre></td></tr></table></figure>
<ul>
<li>将 /usr/local/go/bin 目录添加至PATH环境变量：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=$PATH:/usr/local/go/bin</div></pre></td></tr></table></figure>
<ul>
<li>注意：MAC 系统下你可以使用 .pkg 结尾的安装包直接双击来完成安装，安装目录在 /usr/local/go/ 下。</li>
</ul>
<h4 id="1-2-其他方式"><a href="#1-2-其他方式" class="headerlink" title="1.2 其他方式"></a>1.2 其他方式</h4><p><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.1.md" target="_blank" rel="external">参考链接</a></p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><p>先确立一个小目标，就是我们要爬取的网页的数据源是什么。一直觉得国内的大学排名争议比较有趣，TOP2的两所，但是TOP5的有8所，TOP10的有20所，哈哈，所以来爬个大学排行榜玩玩吧。</p>
<h3 id="1、网页抓取"><a href="#1、网页抓取" class="headerlink" title="1、网页抓取"></a>1、网页抓取</h3><h3 id="1-1-定义一个学校"><a href="#1-1-定义一个学校" class="headerlink" title="1.1 定义一个学校"></a>1.1 定义一个学校</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">type SchoolObj struct &#123;</div><div class="line">	rankTypeName string</div><div class="line">	RankIndex int</div><div class="line">	SchoolName string</div><div class="line">	EnrollOrder string</div><div class="line">	StarLevel string</div><div class="line">	LocationName string</div><div class="line">	SchoolType  string</div><div class="line">	UrlAddress string</div><div class="line">	SchoolTags []string</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-2-单页面html解析"><a href="#1-2-单页面html解析" class="headerlink" title="1.2 单页面html解析"></a>1.2 单页面html解析</h3><ul>
<li><p>引入go语言的http函数包和上面定义的学校结构题</p>
</li>
<li><p>发起一个网页请求返回，go语言会返回网页的<html>以下全部的html格式字符串</html></p>
</li>
<li><p>如何从这些字符串中遍历查找和解析出我们需要的学校排名字段？</p>
</li>
</ul>
<p>因为有过前端开发的经验，我自然而然想到，使用CSS选择器会比直接使用遍历算法来得高效，有CSS的选择规则，我可以批量规律的获取和处理HTML的DOM结构数据。端开发中的jQuery提供了方便的操作 DOM 的 API。使用 Go 语言做服务器端开发，有时候需要解析 HTML 文件，比如抓取网站内容、写一个爬虫等。这时候如果有一个类似 jQuery 的库可以使用，操作 DOM 会很方便，而且，上手也会很快。果然，还真有这样的工具，此处推荐一个GitHub的开源框架 — Goquery 。</p>
<p>A、使用介绍：</p>
<p>goquery定义了一个Document结构，直接对应网页Javascript的Document节点，通过一个NewDocument方法，传入参数地址为网页的url地址，直接生产一个虚拟的go语言上的dom。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">type Document struct &#123;</div><div class="line">	*Selection</div><div class="line">	Url      *url.URL</div><div class="line">	rootNode *html.Node</div><div class="line">&#125;</div><div class="line"></div><div class="line">func NewDocument(url string) (*Document, error) &#123;</div><div class="line">	// Load the URL</div><div class="line">	res, e := http.Get(url)</div><div class="line">	if e != nil &#123;</div><div class="line">		return nil, e</div><div class="line">	&#125;</div><div class="line">	return NewDocumentFromResponse(res)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Document有定义find方法，方法的使用和JQuery里面一直，传入目标字符串的css选择器即可。通过对Document执行find查找方法，获得全部学校目标的字符串数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">doc.Find(&quot;.bangTable table tr&quot;)</div></pre></td></tr></table></figure>
<p>这里的选择器怎么来的呢，我们在chrome里面打开url地址，找到我们想要收集的数据排名，右键打开审查元素，可以看到HTML的选择器名称。这里需要有一点CSS基础，因为有的选择器不是直接唯一的，需要自己去判断，怎样的选择器组合才能准确的拿到想要的目标字符串。</p>
<p><img src="/assets/images/schoolDom.jpg" alt=""></p>
<p>Document有定义each方法，用于遍历数组，也就是各个大学所对应的dom节点。在each方法中继续使用查找方法，并最后获得想要的字符串。</p>
<p>每一个dom对应一个SchoolStruct，新建并赋值，放入数组中返回。</p>
<p>B、代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">import (</div><div class="line">	&quot;github.com/PuerkitoBio/goquery&quot;</div><div class="line">	&quot;SchoolReptile/struct&quot;</div><div class="line">	&quot;net/http&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func GaokaoquanRank(urlAddress string) []SchoolStruct.SchoolObj &#123;</div><div class="line"></div><div class="line">	var array [] SchoolStruct.SchoolObj</div><div class="line"></div><div class="line">	doc, err := goquery.NewDocument(urlAddress)</div><div class="line">	if err != nil &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// Find the review items</div><div class="line">	doc.Find(&quot;.bangTable table tr&quot;).Each(func(i int, s *goquery.Selection) &#123;</div><div class="line">		// For each item found, get the band and title</div><div class="line">		var obj SchoolStruct.SchoolObj</div><div class="line">		obj.RankIndex = s.Find(&quot;.t1 span&quot;).Text()</div><div class="line">		obj.SchoolName = s.Find(&quot;.t2 a&quot;).Text()</div><div class="line">		obj.UrlAddress ,_ = s.Find(&quot;.t2 a&quot;).Attr(&quot;href&quot;)</div><div class="line">		obj.LocationName = s.Find(&quot;.t3&quot;).Text()</div><div class="line">		obj.SchoolType = s.Find(&quot;.t4&quot;).Text()</div><div class="line">		obj.StarLevel = s.Find(&quot;.t5&quot;).Text()</div><div class="line">		obj.EnrollOrder = &quot;本科第一批&quot;</div><div class="line">		array = append(array, obj)</div><div class="line"></div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	return array</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、接口请求"><a href="#2、接口请求" class="headerlink" title="2、接口请求"></a>2、接口请求</h3><p>我们再爬去数据的时候，一般都能直接抓取网页数据，但是有的数据在第一页炳辉展示出来，需要有点击操作，比如加载更多。此处的大学排行有200位，第一页请求只有20位，这时候就会发现，接口请求的方便。<br>有的网页在接口上做了cookie校验，摸清别人的请求规则，才能正确模拟出请求获得返回数据。</p>
<p>我们此处拿乐学高考作文例子，获取各个类型的大学排行榜。通过charles代理，我们获得请求的各类参数。</p>
<ul>
<li>拼接请求url</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url := LexueHost+&quot;/college/ranking?page=&quot;+pageStr+&quot;&amp;rank_type=&quot;+rankObj.RankType+&quot;&amp;page_size=15&quot;</div></pre></td></tr></table></figure>
<ul>
<li><p>发送HTTP请求，获取返回</p>
<p>网络请求返回的是一个字符串结构的数据，我们需要把它映射成map结构好获取key对应的value值。</p>
<p>这里推荐一个go语言在json解析上的一个开源库Simplejson，将返回的数据进行JSON结构化，然后通过get方法可以直接获得对应的参数值。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">defer resp.Body.Close()</div><div class="line"></div><div class="line">data, err := ioutil.ReadAll(resp.Body)</div><div class="line"></div><div class="line">jsonBody,err := simplejson.NewJson(data)</div><div class="line"></div><div class="line">schoolJsonArray,err := jsonBody.Get(&quot;schools&quot;).Array()</div></pre></td></tr></table></figure>
<ul>
<li>多页请求使用递归的方式，不断改变get请求的pageStr参数，pageindex ++ ，当判断请求返回的json为空的时候，则说明接口请求已经到到了最后一页，跳出递归</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var nextArray [] SchoolStruct.SchoolObj</div><div class="line">nextArray = LexueRankEachList(rankObj,pageIndex)</div></pre></td></tr></table></figure>
<p>B、代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">import (</div><div class="line">	&quot;SchoolReptile/struct&quot;</div><div class="line">	&quot;net/http&quot;</div><div class="line">	&quot;io/ioutil&quot;</div><div class="line">	&quot;fmt&quot;</div><div class="line">	&quot;bytes&quot;</div><div class="line">	&quot;encoding/json&quot;</div><div class="line">	&quot;strings&quot;</div><div class="line">	&quot;github.com/bitly/go-simplejson&quot;</div><div class="line">	&quot;strconv&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func LexueRankEachList(rankObj SchoolStruct.RankTypeObj,pageIndex int ) []SchoolStruct.SchoolObj &#123;</div><div class="line"></div><div class="line">	pageStr := strconv.Itoa(pageIndex)</div><div class="line"></div><div class="line">	url := LexueHost+&quot;/college/ranking?page=&quot;+pageStr+&quot;&amp;rank_type=&quot;+rankObj.RankType+&quot;&amp;page_size=15&quot;</div><div class="line"></div><div class="line">	resp, err := http.Get(url)</div><div class="line">	if err != nil &#123;</div><div class="line">		// handle error</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	defer resp.Body.Close()</div><div class="line"></div><div class="line">	data, err := ioutil.ReadAll(resp.Body)</div><div class="line"></div><div class="line">	jsonBody,err := simplejson.NewJson(data)</div><div class="line"></div><div class="line">	schoolJsonArray,err := jsonBody.Get(&quot;schools&quot;).Array()</div><div class="line"></div><div class="line">	var array [] SchoolStruct.SchoolObj</div><div class="line"></div><div class="line">	if len(schoolJsonArray) &lt;= 0 &#123;</div><div class="line">		println(&quot;请求到头了&quot;)</div><div class="line">		return array</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	for i,_ := range schoolJsonArray &#123;</div><div class="line">		schoolJson := jsonBody.Get(&quot;schools&quot;).GetIndex(i)</div><div class="line">		var obj SchoolStruct.SchoolObj</div><div class="line">		obj.RankIndex = strconv.Itoa(schoolJson.Get(&quot;school_rank&quot;).MustInt())</div><div class="line">		obj.SchoolName = schoolJson.Get(&quot;school_name&quot;).MustString()</div><div class="line">		obj.SchoolTags = schoolJson.Get(&quot;school_tags&quot;).MustStringArray()</div><div class="line">		array = append(array, obj)</div><div class="line">		println(obj.RankIndex,obj.SchoolName,obj.SchoolTags)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	pageIndex++</div><div class="line">	var nextArray [] SchoolStruct.SchoolObj</div><div class="line">	nextArray = LexueRankEachList(rankObj,pageIndex)</div><div class="line">	if len(nextArray) &gt; 0 &#123;</div><div class="line">		for _,obj := range nextArray &#123;</div><div class="line">			array = append(array,obj)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	return array</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、保存到Excel"><a href="#3、保存到Excel" class="headerlink" title="3、保存到Excel"></a>3、保存到Excel</h3><p>前两部获得了网络数据，并解析生成了对应的SchoolStruct数组，这个时候我们只需要创建excel边。遍历数组，把数组里面的数据字段都存入表格即可,git开源库xlsx能够让我们轻松的创建、查找、赋值Excel表。</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">func SaveSchoolRank(schoolArray [] SchoolStruct.SchoolObj,excelName string,sheetName string)  &#123;</div><div class="line"></div><div class="line">	var file *xlsx.File</div><div class="line">	var sheet *xlsx.Sheet</div><div class="line">	var row *xlsx.Row</div><div class="line">	var cell *xlsx.Cell</div><div class="line">	var err error</div><div class="line"></div><div class="line">	file,err = xlsx.OpenFile(excelName + &quot;.xlsx&quot;)</div><div class="line"></div><div class="line">	if err != nil &#123;</div><div class="line">		file = xlsx.NewFile()</div><div class="line">		sheet,err = file.AddSheet(sheetName)</div><div class="line">	&#125; else &#123;</div><div class="line">	   sheet = file.Sheet[sheetName]</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if err == nil &#123;</div><div class="line"></div><div class="line">		for i := 0; i &lt; len(schoolArray); i++ &#123;</div><div class="line">			obj := schoolArray[i]</div><div class="line"></div><div class="line">			row = sheet.AddRow()</div><div class="line">			cell = row.AddCell()</div><div class="line">			cell.Value = obj.RankIndex</div><div class="line"></div><div class="line">			cell = row.AddCell()</div><div class="line">			cell.Value = obj.SchoolName</div><div class="line"></div><div class="line">			cell = row.AddCell()</div><div class="line">			cell.Value = obj.StarLevel</div><div class="line"></div><div class="line">			cell = row.AddCell()</div><div class="line">			cell.Value = obj.LocationName</div><div class="line"></div><div class="line">			cell = row.AddCell()</div><div class="line">			cell.Value = obj.EnrollOrder</div><div class="line"></div><div class="line">			cell = row.AddCell()</div><div class="line">			cell.Value = obj.SchoolType</div><div class="line"></div><div class="line">			cell = row.AddCell()</div><div class="line">			cell.Value = obj.UrlAddress</div><div class="line"></div><div class="line"></div><div class="line">			var tagStr string</div><div class="line">			for _,value := range obj.SchoolTags &#123;</div><div class="line">				tagStr += &quot;+&quot; + value</div><div class="line">			&#125;</div><div class="line">			cell = row.AddCell()</div><div class="line">			cell.Value = tagStr</div><div class="line"></div><div class="line"></div><div class="line">			if err != nil &#123;</div><div class="line">				fmt.Printf(err.Error())</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	err = file.Save(excelName + &quot;.xlsx&quot;)</div><div class="line">	if err != nil &#123;</div><div class="line">		fmt.Printf(err.Error())</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《如何成功的交付产品》笔记]]></title>
      <url>/2017/08/03/%E5%A6%82%E4%BD%95%E6%88%90%E5%8A%9F%E7%9A%84%E4%BA%A4%E4%BB%98%E4%BA%A7%E5%93%81/</url>
      <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p> 所有的流程和规范最终都是为了解决实际问题 的，不要贸然引入流程，除非已经碰到问题，否则尽量简化流程，提高效率。要交付 一个产品，其中最重要的只有 3 点:1)确定用户需求和预期指标;2)以最小成本实 现最主要的需求;3)发布并获得数据反馈，确定下一个迭代目标。</p>
<p> 用用户能理解的语言 去描述你要交付的产品带给他们的价值和好处十分重要，如果写不出来，或者写出来 用户看了一点兴趣都没有，请尽快停止这个产品，因为即使整个产品开发和交付过程 极其完美，这也注定会是一个失败的产品。</p>
<p> 在软件行业中，我们把设计、打造、发布一款符合市场需求的软件称为交付 (shipping)。</p>
<p>尽管时日尚短，交付却已展现出非凡的价值。它简直是一剂灵丹妙药。它能解决 钱的问题，因为投资人给你追加投资的前提是你取得了好结果;它能解决客户的问题， 因为交付能力的强弱决定了你是否能推出客户需要的功能和补丁;它能解决团队的问 题，因为没有什么比取得进展更能让团队士气大振!所以，如果你想追逐名望、财 富、幸福感，那么，交付出卓越的软件，你将赢得一切。</p>
<p>我只身前往达特茅斯学院的塞耶工程学院和 塔克商学院学习了一段时间，并取得了工程管理硕士学位。我花了 5 年多的时间研究可扩容性、商 业决策以及软件团队内部的人际动力学。</p>
<p>快速迭代、部 署、互联网服务托管已经变成了主流。</p>
<p>因为软件交付不只是如何管理项目，也不只是如何提升开发效率，你必须具备更 全面的技能。你既要加深对技术的理解，又要贡献更好的产品创意，更重要的是，整 个过程中，你需要展现出你强有力的商业洞察力。你也许要做所有工作，包括要求工 程师编写测试用例，或者用 Photoshop 绘制产品原型。这个工作要求你追求极致，只 要你不惧挑战，它终将成为你的舞台!</p>
<p>让观点更犀利点儿！</p>
<h2 id="交付卓越产品，步步为赢"><a href="#交付卓越产品，步步为赢" class="headerlink" title="交付卓越产品，步步为赢"></a>交付卓越产品，步步为赢</h2><h3 id="一、确定正确的产品方向"><a href="#一、确定正确的产品方向" class="headerlink" title="一、确定正确的产品方向"></a>一、确定正确的产品方向</h3><p>好的产品一定要满足众多客户所共有的某个真实的需求。你的使命就是 找到一种独特而有意义的方法去满足这一需求。</p>
<h4 id="1-1-如何找到正确需求"><a href="#1-1-如何找到正确需求" class="headerlink" title="1.1 如何找到正确需求"></a>1.1 如何找到正确需求</h4><ul>
<li>以客户为导向，而不是以竞争为导向</li>
<li>在于它解决的问题比我们最初意识到的那个问题要难得多</li>
</ul>
<h4 id="1-2-如何构建卓越的使命"><a href="#1-2-如何构建卓越的使命" class="headerlink" title="1.2 如何构建卓越的使命"></a>1.2 如何构建卓越的使命</h4><p>团队一定要有自己的使命。如果你没有清晰地阐述使命则会导致失败，因为你的 团队、组织和投资人会根据自己对使命的不同理解而各自为战。你需要的是一个能够反映代表性产品或服务的使命，而不是一个 面面俱到的使命。举个例子。我在 Google Talk 时肩负的使命是“使人与人之间在任何地点均能通 过任何终端沟通”。</p>
<ul>
<li><p>能够唤起人们的兴趣</p>
<p>  长期吸引利益相关者的注意，你才有时间去挖掘产品细节。</p>
</li>
<li><p>提供言之有物且能指明方向的原则</p>
</li>
<li><p>适合印在T桖上</p>
<p>  不要以为有一个高智商天才组成 的团队就不必这样做，他们的天才能力可不一定表现在对这类事情的记忆上。</p>
</li>
</ul>
<h4 id="1-3-如何制定正确的策略"><a href="#1-3-如何制定正确的策略" class="headerlink" title="1.3 如何制定正确的策略"></a>1.3 如何制定正确的策略</h4><p>策略是指在竞争对手的压力下，利用公司独特的优 势来争取目标用户的粗略计划。它只是一段用于说明对目标客户来说你的产品将如何长期保持比 竞争对手更强的吸引力的话。简而言之，你需要阐明三件事:客户、公司和竞争。</p>
<blockquote>
<p>策略举例:<br>随着越来越多内容的产生，用户每天消费的内容也越来越多，但对于 20 ~ 40 岁的工薪一族来说，他们在海量的内容面前却不知道如何选择。我们需要 给这些用户以启发，帮助他们找到想看的视频，并让他们在看的过程中对内容有更 深的理解。<br>我们之所以首先选择工薪一族是因为，与有大把的时间耗在 Facebook 和 YouTube上的青年不同，工薪一族时间有限，但他们人际网络丰富、个人主见强烈， 还有可自由支配的收入，愿意在内容上消费。<br>我们有独特的方法来解决用户挑选视频的问题。通过整合 IMDb 独有的电影数 据集、亚马逊对数码内容分门别类的能力以及可靠的个性化推荐技术，我们可以构 建出有效的视频推荐算法。虽然其他竞争对手(如 Netflix)也有一套推荐引擎，但 我们覆盖的平台多，拥有的数据也更丰富，能够提供比竞争对手更有趣的观看体验 和更精准的推荐。<br>我们将把这种观看体验通过各种载体来传递给观看者，这些载体展现了与内容 相关的背景数据(如 YouTube 视频的演员阵容)，包括 YouTube 等网站的浏览器插件、 手机应用程序等。我们还会提供丰富的与内容相关的信息以启发观看者，并提示观 看者进行反馈——这就创建了一个良性循环并惠及所有用户。</p>
</blockquote>
<p>这个策略满足了所有要求:阐述了 IMDb 应该提供什么产品以及为什么这家公司适 合提供这类产品，分析了竞争对手的情况以及 IMDb 应如何与之差异化竞争，还论证了 IMDb 为什么要针对这样一个特别的消费者群体。该策略不但简明扼要、详略得当，还 直接指明了我们的具体目标。</p>
<h3 id="二、尽可能清晰详细地定义产品"><a href="#二、尽可能清晰详细地定义产品" class="headerlink" title="二、尽可能清晰详细地定义产品"></a>二、尽可能清晰详细地定义产品</h3><p>交付的下一阶段是让你的产品方案具体且可理解。通过制订使命和策略，你知道 了你的客户是谁，他们的需求是什么。你也知道如何做才能比对手更出色、更具备差 异性。有了这些知识再加上一些头脑风暴，便可以得出一个大致的产品方案。</p>
<p>当设法细化产品方案时，你会发现产品要解决的一些客户问题都是你主观臆断 的，，而证明的最好方法就是把产品提 供给客户使用，然后听听他们的意见。在《精益创业》一书 中充分论证了为什么该构建一个最小化可行产品。</p>
<p>当迭代越小越快时，你甚至不需要花大力气去猜测客户的需求，而是 更多按照客户告诉你的去做，这样成功的可能性更大。</p>
<p>产品定义过程主要分为 10 步，完成这些步骤后，工程团 队就会对项目形成统一的认识，管理层或投资者也会了解并认可产品的设计，包括：</p>
<h3 id="2-1-撰写-新闻稿"><a href="#2-1-撰写-新闻稿" class="headerlink" title="2.1 撰写 新闻稿"></a>2.1 撰写 新闻稿</h3><p>所谓新闻稿是指一篇向市场宣布将要推出新产品的通告。不管是新 闻稿还是博客文章，都应该简单明了地传达关于产品的关键信息。</p>
<ul>
<li>产品命名</li>
<li>发布时间</li>
<li>目标客户</li>
<li>解决了什么问题</li>
<li>如何解决(务必简明扼要)</li>
<li>CEO 的公开赞辞</li>
<li>邀请设计团队和工程团队主管参与产品评审</li>
<li>找客户测试产品概念</li>
<li>命名、定价以及预测收益</li>
<li>向管理层汇报</li>
</ul>
<h3 id="2-2-创建并不断更新-FAQ-文档"><a href="#2-2-创建并不断更新-FAQ-文档" class="headerlink" title="2.2 创建并不断更新 FAQ 文档"></a>2.2 创建并不断更新 FAQ 文档</h3><p>我喜欢那些愚蠢的问题，因为它们让我感觉好像没花多少精力就消灭了一个问 题，这真是一种少有的乐趣啊。</p>
<p>遇到回答不上的问题时，我也会把它放入 FAQ 并期望有人能够回答它。最坏<br>情况下你也可以把这个 FAQ 当做个人的 Bug 列表或者团队讨论主题库.</p>
<ul>
<li>它能节省你大量回复邮件的时间，还能抵御一些内部责难。</li>
<li>当你的客户支持团队和科技写作团队开始整理所有面向公众的内容时， FAQ 将是一个很有价值的资源。</li>
</ul>
<h3 id="2-3-绘制线框流程图"><a href="#2-3-绘制线框流程图" class="headerlink" title="2.3 绘制线框流程图"></a>2.3 绘制线框流程图</h3><p>流程图可以帮助你准确地解释用户工作流和系统交互相关问题，简要线框图则可以帮助你 具象化产品各环节的用户体验。</p>
<h3 id="2-4-撰写产品单页或者演示文稿"><a href="#2-4-撰写产品单页或者演示文稿" class="headerlink" title="2.4 撰写产品单页或者演示文稿"></a>2.4 撰写产品单页或者演示文稿</h3><p>产品单页是一篇写给高管或多数风险投 资人看的产品介绍文章，你需要把控好介绍的详略程度。</p>
<p>你需要去争取工程团队、管理层、VC(风险投资人)或其他利益相关方的初步支持。你需要弄清楚他们对产品的认可程度，否则等到第 7 步功能规格 文档都快完成了，而他们还对产品的价值存有疑义，你将面临不断的返工<br>。<br>你会发现产品单页和演示文稿实际上是新闻稿的延伸，它们增加了市场机会(用户量)、收益机会(解决方案的价值)和长期竞争优势(对手长时间内无法模仿)这 三方面内容。</p>
<p>面对 VC 时，两样都需要准备，因为你既需要发邮件介绍你的产品，又需要面对面做产品演示。不过无论你在哪里工作，这两份文档的内容都是一样的，它们都是新 闻稿的延伸。</p>
<p>下面介绍这两份文档所需包含的五个要素:</p>
<ul>
<li>产品名称</li>
<li>目标客户 + 数量有多少</li>
<li>解决了什么问题 + 这个问题对于目标客户来说有多大价值</li>
<li>解决方案 + 这个解决方案类似线上哪个产品，为什么你的方案能让竞争对手在</li>
<li>长时间内都无法模仿</li>
<li>何时交付 + 主要的里程碑有哪些?</li>
<li>团队背景(仅针对 VC)</li>
</ul>
<h3 id="2-5-FAQ中添加API文档"><a href="#2-5-FAQ中添加API文档" class="headerlink" title="2.5 FAQ中添加API文档"></a>2.5 FAQ中添加API文档</h3><p>API 文档可以说明你的团队如何与其他团队协作、外部开发者如何使用这套系统 以及你需要存储什么数据。预先定义清楚 API 还有个好处，它可以帮助你搭建由这些 API 构成的面向服务的体系架构。</p>
<h3 id="2-6-撰写功能呢规格文档"><a href="#2-6-撰写功能呢规格文档" class="headerlink" title="2.6 撰写功能呢规格文档"></a>2.6 撰写功能呢规格文档</h3><p>产品的规模以及成熟度决定了你需要几天还是几周才能写完功能规格文档。如果 产品尚不成熟，你应当尽可能缩小产品规模以快速验证客户需求的真实性。</p>
<ul>
<li><p>简介：<br>说明了为什么要做这个产品以及做些什么，每个新进入项目的成员 都可以从中了解到必要的背景信息。同时它还说明了文档中一些术语的含义，你可能 因为使用习惯了这些术语而忘记别人其实并不理解</p>
</li>
<li><p>目标与非目标：<br>需要将其细化成不同目标，每个目 标都应保持清晰简洁并将它们按优先级排列，这样工程团队就可以合理地进行设计 与开发。目标是告诉别人你要做什么，那么非目标则是告诉别人你不要做什么</p>
</li>
<li><p>用例和用户场景：<br>用例是指用简要的语句来描述那些用户必须 执行的操作，用户场景则是指用叙述故事的方式来描述用户是如何体验产品的</p>
</li>
<li><p>原型图或线框图</p>
</li>
<li>API</li>
<li>负载规划：<br>负载规划是指对未来一段时间内用户的使用量进行粗略估计并制订应对计划，这 对工程团队来说非常重要。</li>
<li>依赖：<br>你需要将全部依赖方及其负责人列出来，如果有应急方案也一并列出来。</li>
<li>FAQ和开放问题</li>
<li>关键事件：<br>最好能列出主要事件的达成时 间，如特性完成时间、可信测试者版发布时间，如果具体的工程量尚未评估出来，那 预计的时间应该保守一些。</li>
</ul>
<h3 id="2-7-边界情况"><a href="#2-7-边界情况" class="headerlink" title="2.7 边界情况"></a>2.7 边界情况</h3><p>你需要时间 来仔细地、创造性地思考用户会如何弄坏你的软件或者在某种意义上没有按照你的预 期来使用软件。当你“漫步”时，请将想到的所有可能的边界情况以及应对策略写在 FAQ 或者产品需求文档中。</p>
<h3 id="2-8-客户测试"><a href="#2-8-客户测试" class="headerlink" title="2.8 客户测试"></a>2.8 客户测试</h3><p>团队会轻易陷入一场为莫须有的客户问题构建完美解 决方案的狂欢中，主张的是去找一 批现存的或潜在的客户，向他们介绍你的产品设想和原型，并听听他们的反馈 。</p>
<h3 id="2-9-基本商业要素——命名、定价和收益"><a href="#2-9-基本商业要素——命名、定价和收益" class="headerlink" title="2.9 基本商业要素——命名、定价和收益"></a>2.9 基本商业要素——命名、定价和收益</h3><p>命名：可以交给别人想想</p>
<p>定价：看起来很科学，但最终大部分定价都是拍脑袋出来的。按成本定价、按价值定价以及对比定价。分析竞争对手、调研客户愿意支付、简化初始定价以降低用户理解成本、等产品正式推出后再想涨价就难了</p>
<p>收益：制定收益模型。</p>
<p>1、估算买家总体市场规模<br>2、预估市场规模的增速<br>3、估算你的目标市场占总体市场的比率<br>4、估算通过市场推广你能触碰到的用户规模<br>5、预估触碰产品的人中会有多少转化成产品用户<br>6、找到其他新用户增长渠道并加入到模型中<br>7、产品定价乘以每个时期增长的用户数便是收益</p>
<h3 id="2-10-取得上层认可"><a href="#2-10-取得上层认可" class="headerlink" title="2.10 取得上层认可"></a>2.10 取得上层认可</h3><p>议你先花点时间预售 产品。在谷歌，最优秀的主管都知道怎么做这件事情，因为预售可以让管理层在公开 回应你的产品方案之前先了解一些背景。</p>
<p>种预售方式是“路过式”预售。趁着负责决策的高管站在走廊或者倒咖啡 的时候走到他身边和他聊一两分钟你想做的产品，这时候你追求的不是一个决策，而 仅仅是让他知道有这么一个事。</p>
<h3 id="2-11-产品准备就绪开始构建"><a href="#2-11-产品准备就绪开始构建" class="headerlink" title="2.11 产品准备就绪开始构建"></a>2.11 产品准备就绪开始构建</h3><p>阶段三，设计用户体验<br>你需要从用户的角度出发，和设计团队不断沟通、反复 迭代，最终构建出良好、直观、简洁的用户体验。</p>
<p>阶段四，做一些基础的项目管理工作<br> 括跟踪交付物的进展、指出问题以及控制项目范围。</p>
<p>阶段五，开始测试<br>作为团队主管，你需要主导 Bug 的处理并慎重决定哪些可以容忍出现在版本 1 而哪些又必须在发布之前修复掉。</p>
<p>阶段六，你差不多可以准备发布了<br>要求你建立一套衡量产品成败的指标</p>
<p>最后，正式发布产品<br>你需要制订市场营销和公关方案，并在发布前仔细核查清单中的每一项内 容。基本上每次发布都会有一些糟糕的事情发生，不过只要处理得好，大部分用户都 不会察觉到。</p>
<h3 id="三、赢在用户体验"><a href="#三、赢在用户体验" class="headerlink" title="三、赢在用户体验"></a>三、赢在用户体验</h3><p>用户体验不仅是产品的外观样式，它还是产品的使用方式,为了让设计团队发挥出最佳水平，你需要先理解设计，再让设计团队理解你,需要了解的东西便是如何和每种 设计角色有效地沟通，其中包括了解如何评论视觉稿以及如何向设计师提供反馈。最后一个了解设计的要点是学会使用线框图或原型图来辅助沟通，你可以通 过 Photoshop 或其他画图程序来绘制这些图形。</p>
<h3 id="3-1-各类角色"><a href="#3-1-各类角色" class="headerlink" title="3.1 各类角色"></a>3.1 各类角色</h3><ul>
<li>用户体验(UX，User Experience)</li>
</ul>
<p>关注的是用户如何完成任务以及该如何优化向 用户展现信息的方式。通常用户体验设计师会通过制作流程图或原型图来说明用户体 验，其中原型图是用来描述用户界面某一部分外观的图形，对信息架构(IA，Information Architecture)尤为关注。</p>
<ul>
<li>用户界面</li>
</ul>
<p>它更关注单个页面或屏幕的 设计，是用户体验的组成部分。</p>
<ul>
<li>视觉设计</li>
</ul>
<p>如何通过一种既赏心悦目、夺人眼球又清 晰明了的方式来展示内容的一门学问</p>
<ul>
<li>用户体验研究</li>
</ul>
<p>是用户体验的一个特殊组成 部分，它专注于研究用户是如何看待你的产品的。</p>
<ul>
<li>角色模型</li>
</ul>
<p>你的设计和业务团队将创 建一组虚拟角色来代表目标客户，这些角色模型拥有姓名、薪水和目标，你还可以赋 予他们任何你知道的目标客户的特征，然后利用这些角色模型来评估设计的效果。</p>
<h3 id="3-2-如何评估设计"><a href="#3-2-如何评估设计" class="headerlink" title="3.2 如何评估设计"></a>3.2 如何评估设计</h3><p>■该用户界面要求用户完成的最重要的任务是什么?<br>■这是最简单的解决方案吗?<br>■信息是否组织得当?<br>■设计是否易用且一目了然?<br>■标准是否一致?<br>■能否减少用户点击次数?</p>
<h3 id="3-3-如何与设计师沟通"><a href="#3-3-如何与设计师沟通" class="headerlink" title="3.3 如何与设计师沟通"></a>3.3 如何与设计师沟通</h3><ul>
<li>以用户的口吻说话</li>
<li>以提问的方式建立共识</li>
<li>讲述业务目标的相对优先级</li>
<li>用数据说话</li>
<li>提供竞争对手的运作良好的案例</li>
</ul>
<h3 id="3-4-借助图画进行沟通"><a href="#3-4-借助图画进行沟通" class="headerlink" title="3.4 借助图画进行沟通"></a>3.4 借助图画进行沟通</h3><p>■只制作用户界面中相关部分的原型。<br>■总是使用完整的、经过适当编辑的文本。<br>■控制花在视觉设计上的时间。<br>■使用灰度色，不要使用其他颜色。<br>■预期你的线框图会发生很大改动。<br>■当心视觉花招。</p>
<h3 id="四、赢在项目管理"><a href="#四、赢在项目管理" class="headerlink" title="四、赢在项目管理"></a>四、赢在项目管理</h3><h3 id="4-1-创建一张简单的计划表并持续维护。"><a href="#4-1-创建一张简单的计划表并持续维护。" class="headerlink" title="4.1 创建一张简单的计划表并持续维护。"></a>4.1 创建一张简单的计划表并持续维护。</h3><p>■它是我制作的。永远不要低估这种自豪感……<br>■它便于你的团队更新剩余时间以及查看项目进展。<br>■它便于发现长杆工程师。<br>■它便于配置或自定义。<br>■它便于跟踪假期，因为假期在这里也是一个任务。<br>■它便于挪动任务至后续版本。如果发现版本发布时间不满足要求，你可以将该<br>版本中一些任务的“目标版本值”改成后续的版本号。你也能使用这个模型来<br>跟踪里程碑。<br>■它还适用于管理项目最后 30 天的冲刺。<br>■它便于平衡团队内的任务分配。如果不想让克里斯在 V1 版本的关键路径上，<br>可以将他的任务重新分配给维奇。<br>■它便于预测项目各时间节点，包括编码完成时间、测试完成时间以及发布完成<br>时间。现在你的测试团队知道什么时候可以开始新一轮的测试，你的市场部门<br>也知道这款产品什么时候可以面世。<br>■它预先将你的假设传达给了你的团队。<br>■“天”是一个很好的用于跟踪任务的度量单位。你也许常用“0.2 天”来描述那些<br>非常小的任务，但我发现跟踪这些任务的最佳办法是放到 Bug 列表中。</p>
<h3 id="4-2-如何评估工作量"><a href="#4-2-如何评估工作量" class="headerlink" title="4.2 如何评估工作量"></a>4.2 如何评估工作量</h3><ol>
<li>如果你不是工程经理，那么让你的工程经理去要评估量。</li>
<li>表面上接受评估结果</li>
<li>认识到你的权力</li>
<li>只跟踪剩余时间</li>
<li>要求不考虑余量的评估</li>
<li>每周一次在团队会议上评估各任务的剩余时间</li>
</ol>
<h3 id="4-3-跟踪Bug并创建Bug燃尽图"><a href="#4-3-跟踪Bug并创建Bug燃尽图" class="headerlink" title="4.3 跟踪Bug并创建Bug燃尽图"></a>4.3 跟踪Bug并创建Bug燃尽图</h3><h3 id="4-4-管理依赖"><a href="#4-4-管理依赖" class="headerlink" title="4.4 管理依赖"></a>4.4 管理依赖</h3><ol>
<li>如果去除它也可以运转，那就去除它。</li>
<li>如果内部能构建，那就内部构建。</li>
<li>如果必须添加一个依赖，那就趁早添加。</li>
<li>如果必须添加一些依赖，那就依靠它上一个已构建的版本。</li>
<li>如果交付得早，被依赖伤害的可能性就小。</li>
</ol>
<h3 id="五、赢在测试"><a href="#五、赢在测试" class="headerlink" title="五、赢在测试"></a>五、赢在测试</h3><ol>
<li>坚持测试驱动开发。</li>
<li><p>围绕优秀的测试主管组建测试团队。</p>
<p>选择一:降低标准雇佣测试人员并聘请管理者去管理他们</p>
<p>选择二:按高标准雇佣外包团队</p>
<p>选择三:按高标准雇佣测试人员，不使用外包团队</p>
</li>
<li><p>亲自评审测试计划和测试用例。</p>
</li>
<li>自动化测试。</li>
<li>虔诚地推行内部试用(Dogfood)。</li>
<li>开展找虫总动员。</li>
<li>勤勉且有条理地处理 Bug。</li>
<li>任命可信测试者以构建最后一道防线。</li>
</ol>
<p>可信测试者是指在保密协议的约束下，在产品发布前使用产品内部试用版的用户。</p>
<ol>
<li>思想火花:以新用户的方式来使用整个产品</li>
</ol>
<h3 id="六、赢在量化"><a href="#六、赢在量化" class="headerlink" title="六、赢在量化"></a>六、赢在量化</h3><p>量化数据是团 队主管的命根子，作为团队主管你全部的工作都是说服别人或被别人说服，各种量化 数据为这样的讨论提供了理性基础。</p>
<h3 id="6-1-如何采集正确的量化数据且只采集正确的量化数据"><a href="#6-1-如何采集正确的量化数据且只采集正确的量化数据" class="headerlink" title="6.1 如何采集正确的量化数据且只采集正确的量化数据"></a>6.1 如何采集正确的量化数据且只采集正确的量化数据</h3><ol>
<li>测量成本低廉</li>
<li>测量可靠且可重复检验</li>
<li>最好能实时测量</li>
<li>团队能够根据它做出明智的改变</li>
<li>专注于客户</li>
</ol>
<h3 id="6-2-你需要采集的三类量化数据"><a href="#6-2-你需要采集的三类量化数据" class="headerlink" title="6.2 你需要采集的三类量化数据"></a>6.2 你需要采集的三类量化数据</h3><h4 id="1-目标进度"><a href="#1-目标进度" class="headerlink" title="1.  目标进度"></a>1.  目标进度</h4><p>目标指标会告诉你目标的完成进度。在谷歌一个重要的目标指标是“7 天活跃用 户数”。没有人会看不懂使用精确增量表达法来描述的目标，而且这样的描述基本符合 SMART 的定义.</p>
<h4 id="2-经营绩效"><a href="#2-经营绩效" class="headerlink" title="2.  经营绩效"></a>2.  经营绩效</h4><p>经营绩效指标会告诉你产品的问题在哪里以及如何提升用户体验。这些指标通常 是用比率表示，比如从点击购买按钮到付款成功的转化率。和目标指标一样，选择合 适的经营绩效指标至关重要。比如说你想做一个优秀的社交产品，监控好友数量是没 有用的，不同类型的用户有不同的好友数。你应该去监控用户参与度，这样你才能回 答“用户会花费时间在网站上吗”、“用户会发信息吗”这类问题。反映这些行为的相 关指标可能包括 7 天活跃用户平均 7 天发帖量、7 天活跃用户平均停留时间等。</p>
<h4 id="3-系统性能"><a href="#3-系统性能" class="headerlink" title="3. 系统性能"></a>3. 系统性能</h4><p>系统性能指标能说明你产品的实时健康度。这类指标包括 99.9% 平均延迟、每 秒请求数、并发用户数、每秒下单数以及其他基于时间的指标。</p>
<h3 id="6-3-专注于目标本身，忽略细枝末节"><a href="#6-3-专注于目标本身，忽略细枝末节" class="headerlink" title="6.3 专注于目标本身，忽略细枝末节"></a>6.3 专注于目标本身，忽略细枝末节</h3><p>但是核心指标是不可能被糊弄过去的。</p>
<h3 id="七、赢在发布"><a href="#七、赢在发布" class="headerlink" title="七、赢在发布"></a>七、赢在发布</h3><h4 id="7-1-对改动说不。"><a href="#7-1-对改动说不。" class="headerlink" title="7.1. 对改动说不。"></a>7.1. 对改动说不。</h4><h4 id="7-2-开启作战室。"><a href="#7-2-开启作战室。" class="headerlink" title="7.2. 开启作战室。"></a>7.2. 开启作战室。</h4><h4 id="7-3-营造紧迫的气氛。"><a href="#7-3-营造紧迫的气氛。" class="headerlink" title="7.3. 营造紧迫的气氛。"></a>7.3. 营造紧迫的气氛。</h4><h4 id="7-4-核查发布清单。"><a href="#7-4-核查发布清单。" class="headerlink" title="7.4. 核查发布清单。"></a>7.4. 核查发布清单。</h4><h4 id="7-5-撰写博文。"><a href="#7-5-撰写博文。" class="headerlink" title="7.5. 撰写博文。"></a>7.5. 撰写博文。</h4><p>如果你是完全按照产品开发过程行事的，那么你应该已经写过一篇博文了，或者 至少写过相同主题的产品预告。那篇博文的目的在于阐述你的使命、你的目标客户以及你能解决的问题。从传统新闻的角度来看它就是你的“导语”。</p>
<h4 id="7-6-发布软件。"><a href="#7-6-发布软件。" class="headerlink" title="7.6. 发布软件。"></a>7.6. 发布软件。</h4><h4 id="7-7-亲自验证软件。"><a href="#7-7-亲自验证软件。" class="headerlink" title="7.7. 亲自验证软件。"></a>7.7. 亲自验证软件。</h4><h4 id="7-8-应对发布带来的各种影响。【重点查看】"><a href="#7-8-应对发布带来的各种影响。【重点查看】" class="headerlink" title="7.8. 应对发布带来的各种影响。【重点查看】"></a>7.8. 应对发布带来的各种影响。【重点查看】</h4><ul>
<li>应对回滚。</li>
<li>处理产品危机。 </li>
<li>演示产品。</li>
<li>应对媒体。</li>
<li>庆祝发布。</li>
</ul>
<h3 id="八、赢在团队"><a href="#八、赢在团队" class="headerlink" title="八、赢在团队"></a>八、赢在团队</h3><h3 id="8-1-如何组建一支团队"><a href="#8-1-如何组建一支团队" class="headerlink" title="8.1 如何组建一支团队"></a>8.1 如何组建一支团队</h3><p>为了组建一支高效的团队，你必须找到能默契配合的工程主管、产品主管和设计 主管。当发现这些人时，你要巴结好他们，哪怕给他们写赞美诗、买糖果甚至洗车都 行。纵观整个行业，你会发现不管 是在业务中还是在项目中，优秀的人总是聚在一起工作。</p>
<ul>
<li><p>项目集经理</p>
<p>PM负责交付软件，项目集经理的职责重点在于整合不同团队和不同工作职能。一种看待项目集经理的方式是把它看做是一个比产品经理更少关注业务、比项 目经理更少关注项目的技术角色。</p>
<ul>
<li>产品经理</li>
</ul>
<p>通常产品经理的职责更偏重软件的业务方面。甚至有些产品经理不负责软件，他 们是典型的 MBA 出身，专注于品牌管理、定价、市场进入策略等。</p>
<ul>
<li>项目经理</li>
</ul>
<p>项目经理的主要职责在于排定项目计划和协调团队工作，在谷歌这个职位也被 称作技术项目经理。他们负责向工程师要评估值，辨识从属关系以及弄清楚如何在 更短的时间内做更多事</p>
<ul>
<li>工程经理</li>
</ul>
</li>
</ul>
<p>工程经理常常是由老牌的程序员担任的。最佳的工程经理是那些由于热爱团队、 善解人意、精通交付并乐于构建卓越产品而晋升到该职位的人。产品经理、项目集经理或者项目经理，甚至是技术项目经理都可以是工程经理的 属下，但也可以是合作伙伴。</p>
<h3 id="8-2-雇佣原则"><a href="#8-2-雇佣原则" class="headerlink" title="8.2 雇佣原则"></a>8.2 雇佣原则</h3><p>■雇佣比你聪明的人。<br>■雇佣懂得自己不是来当老板的人。<br>■雇佣表达清晰、言之有物的人。<br>■雇佣用数据说话的人。<br>■雇佣充满活力的人。</p>
<h3 id="8-3-如何收购一家公司"><a href="#8-3-如何收购一家公司" class="headerlink" title="8.3 如何收购一家公司"></a>8.3 如何收购一家公司</h3><h4 id="8-3-1-知识产权"><a href="#8-3-1-知识产权" class="headerlink" title="8.3.1 知识产权"></a>8.3.1 知识产权</h4><p>你能使用这家公司构建的技术、内容和专利。</p>
<h4 id="8-3-2-人才"><a href="#8-3-2-人才" class="headerlink" title="8.3.2 人才"></a>8.3.2 人才</h4><p>你能使用这家公司雇佣的人才。关键人物、好的雇员、多余人才</p>
<h4 id="8-3-3-客户"><a href="#8-3-3-客户" class="headerlink" title="8.3.3 客户"></a>8.3.3 客户</h4><p>你能凭借这家公司的客户来加快业务增长。</p>
<h4 id="8-3-4-防御"><a href="#8-3-4-防御" class="headerlink" title="8.3.4 防御"></a>8.3.4 防御</h4><p>你买这家公司是为了让别人没法买它。</p>
<h4 id="8-3-5-收购的陷阱和最佳实践"><a href="#8-3-5-收购的陷阱和最佳实践" class="headerlink" title="8.3.5 收购的陷阱和最佳实践"></a>8.3.5 收购的陷阱和最佳实践</h4><ol>
<li>计划将你团队的部分人员调入他们团队</li>
<li>计划整合产品</li>
<li>了解之前所有的交易和负债</li>
</ol>
<h3 id="8-4-如何远程团队合作"><a href="#8-4-如何远程团队合作" class="headerlink" title="8.4 如何远程团队合作"></a>8.4 如何远程团队合作</h3><p>■组建一支工程师团队<br>■充分沟通<br>■不要外包设计或 PM 角色<br>■适应文化差异<br>■构建清晰的需求<br> ■忍受时差，通过任何方式会面<br> ■委任得力的主管。<br> ■大量出差，或者完全不出差<br> ■与远程团队共饮</p>
<h3 id="8-5-如何加入一个新团队"><a href="#8-5-如何加入一个新团队" class="headerlink" title="8.5 如何加入一个新团队"></a>8.5 如何加入一个新团队</h3><p>弄清楚在这个特殊团队中你的理想角色应该是什么很关键。</p>
<p>你必须敏感地意识到团队需要什么。</p>
<p>第一件事，不要和团队说你们的产品一团糟这种话。后来我才认识到在大多数情况下你 都应该尽量先将事情本身搞清楚，而不是张口就说产品一团糟这种话。</p>
<p>必须做的第二件事情是做一个选择:你是打算延期交付以解决这种 混乱状况，还是承认它的存在然后正常交付。做出延期决定的最佳时间点是你刚加入 团队的时候。</p>
<h3 id="九、胜在技术"><a href="#九、胜在技术" class="headerlink" title="九、胜在技术"></a>九、胜在技术</h3><p>如果想快速交付一款卓越的产品，你必须会询问富有洞见的问题，会正确地引 导方向，并明智地决定哪些事必须现在做，哪些事可以之后再做。你还要会评估和雇 佣工程经理。因此，你对技术的了解程度最不济也要与对你车里的汽油的了解程度相 当。。如果你想顺利地通过面试或者从容地 掌控产品开发过程，你需要了解四个S:服务器(server)、服务(service)、速度<br>(speed)和扩容(scaling)。一旦理解了这四个基本元素，你就能够向团队询问恰当 的问题了。</p>
<h3 id="9-1-服务器"><a href="#9-1-服务器" class="headerlink" title="9.1 服务器"></a>9.1 服务器</h3><p>尽量不要买服务器自己搭建。优秀的工程师会尝试学习如何避免去做运维的琐事。<br>展现层、业务逻辑层、数据库</p>
<h3 id="9-2-服务"><a href="#9-2-服务" class="headerlink" title="9.2 服务"></a>9.2 服务</h3><p>SOA面向服务的架构(SOA，Service-Oriented Architecture），SOA 将包含业务逻辑的中间层分解成一系列独立的服务。这些服务 可能运行在相同的服务器上，但它们的构建、版本管理和运行都是独立的。他们相互调用和返回，从而形成了服务链，产生耗时。</p>
<h3 id="9-3-速度"><a href="#9-3-速度" class="headerlink" title="9.3 速度"></a>9.3 速度</h3><p>缓存策略</p>
<h3 id="9-4-扩容"><a href="#9-4-扩容" class="headerlink" title="9.4 扩容"></a>9.4 扩容</h3><p>你能通过增加服务器来增加容量，且增加的每个服务器都能带来接 近完整服务器的容量。不过在许多系统中你依然会遇到瓶颈，如在 VIP 这块，一个 VIP 只支持那么多连接。这时面向服务的架构的一个好处是你可以独立为每个服务扩 容，当决策服务需要更多马力，回应服务需要更多空间时，你可以通过合理分配相应 类型的硬件给他们扩容。</p>
<h3 id="9-5-如何询问正确的技术问题"><a href="#9-5-如何询问正确的技术问题" class="headerlink" title="9.5 如何询问正确的技术问题"></a>9.5 如何询问正确的技术问题</h3><p>你现在的知识已经足够 向工程团队询问一些重要的问题并听懂他们大部分的回答了。你必须询问一些这类问题，它们会揭示出一些潜藏的问题 并帮助你的团队想清楚他们的设计。</p>
<h3 id="十、胜在沟通"><a href="#十、胜在沟通" class="headerlink" title="十、胜在沟通"></a>十、胜在沟通</h3><h3 id="10-1-如何写好邮件"><a href="#10-1-如何写好邮件" class="headerlink" title="10.1 如何写好邮件"></a>10.1 如何写好邮件</h3><p>你要向比你更忙的、有更多邮件需要处理的人们传达与决策或进展相 关的大小事项。因此写好邮件对你能否成功至关重要。写邮件最主要的目标应该是清 晰、简要地传递单个信息。</p>
<ul>
<li>像记者写新闻一样写邮件</li>
</ul>
<p>使用了精确增量表达法、用了 20 秒时间来为邮件加上称呼、敬 语和署名，这样可以帮助信息传递给正确的受众</p>
<ul>
<li>使用精确增量表达法</li>
</ul>
<p>见差值、见开始值、见结束值</p>
<ul>
<li>分点阐释原因</li>
<li>立即停笔，你已经写完了这封邮件</li>
<li>设法用建议取代质疑</li>
<li>考虑受众的感受</li>
</ul>
<h3 id="10-2-如何应对五种类型的会议"><a href="#10-2-如何应对五种类型的会议" class="headerlink" title="10.2 如何应对五种类型的会议"></a>10.2 如何应对五种类型的会议</h3><ul>
<li>团队会议</li>
</ul>
<p>了解近况以及利用团队合力来深入讨论和解决特定问题</p>
<ul>
<li>站会</li>
</ul>
<p>一种超级简短的会议，它只用来交流近况</p>
<ul>
<li><p>1对1</p>
</li>
<li><p>产品 / 工程 / 用户体验评审</p>
</li>
<li><p>头脑风暴会</p>
</li>
</ul>
<h3 id="10-3-如何组织好会议"><a href="#10-3-如何组织好会议" class="headerlink" title="10.3 如何组织好会议"></a>10.3 如何组织好会议</h3><p>■会后立即发出主题纪要<br>■允许改变开会的目的<br>■拒绝在团队会议中发泄负面情绪，但允许在 1 对 1 会议中发泄<br>■使用鱼骨图等辅助工具解决问题</p>
<h3 id="10-4-如何做好演示"><a href="#10-4-如何做好演示" class="headerlink" title="10.4 如何做好演示"></a>10.4 如何做好演示</h3><p>■将演示时间控制在 15 分钟内<br>■永远传达且只传达一个信息<br>■讲故事<br>■制作“综述单页”<br>■重点演示用户体验<br>■极度专注倾听</p>
<h3 id="十一、胜在决策"><a href="#十一、胜在决策" class="headerlink" title="十一、胜在决策"></a>十一、胜在决策</h3><h3 id="11-1-推后-我们明天再完成。"><a href="#11-1-推后-我们明天再完成。" class="headerlink" title="11.1 推后:我们明天再完成。"></a>11.1 推后:我们明天再完成。</h3><h3 id="11-2-谈判-“行，再给你10分钟。”"><a href="#11-2-谈判-“行，再给你10分钟。”" class="headerlink" title="11.2 谈判:“行，再给你10分钟。”"></a>11.2 谈判:“行，再给你10分钟。”</h3><p>■聚焦于促进。<br>■“先寻求理解，再寻求被理解。”<br>■如果你已经有了倾向性的判断，不妨先说出来，然后让其他人继续发表观点</p>
<ul>
<li>阶段1:这不是你的错</li>
<li>阶段2:公平谈判并使用数据支持</li>
<li>阶段3:那个数据没谈成……我们编个新数据吧!</li>
<li>阶段4:寻找可免费提供的东西</li>
<li>阶段5:转身离开并安静思考 </li>
<li>阶段6:协议、文书工作、以及互相指责</li>
</ul>
<h3 id="11-3-处理冲突"><a href="#11-3-处理冲突" class="headerlink" title="11.3 处理冲突"></a>11.3 处理冲突</h3><ul>
<li>不说“你”或“我”</li>
<li>聚焦在角色模型上，而不是人上</li>
<li>使用客观指标</li>
</ul>
<h3 id="十二、胜在从容"><a href="#十二、胜在从容" class="headerlink" title="十二、胜在从容"></a>十二、胜在从容</h3><p>■如何平衡交付、质量和影响、团队这三者的关系，你才能交付一款卓越的软件。<br>■如何应对随机情况，你才能继续按原定节奏交付一款卓越的软件。随机情况是 指当你的管理层掷给你一个弧线球或者你的团队脱离正轨时出现的情况。随机 情况是每个在谷歌或亚马逊工作的人都理解的词之一，因为它是与帮助团队专 注于交付相对立的。<br>■如何妥善地管好你的精力，你才能 1 个顶 3 个。 ■如何找人以及在什么时候找人，你才能让合适的人做合适的事。 ■如何咽下狗屎三明治，因为有时候你的确得咽下去。</p>
<h3 id="十三、再度起航"><a href="#十三、再度起航" class="headerlink" title="十三、再度起航"></a>十三、再度起航</h3><p>先回过头来审视一下周边的环境。软件从来没有做完一说。 你需要问问自己是应该开始做软件的第二版，还是开始做些新的东西。某些情况下你 会发现对产品的投入所带来的回报正在递减。我所说的投入是指你的时间。时间构成 的风险资本是最具利用价值的资产之一。</p>
<p>如果你各方面都表现不凡——按照本书的指导来做事你就能变成这样，就永远可 以选择下一个项目。考虑每种选择对你的业务或个人意味着什么。或许是时候换一个 团队或换一个产品了，或许你因为理解错了客户的需求而需要重构刚刚交付的产品， 或许你只是简单地喜欢和那个工程经理小伙伴一起工作。评估维度有很多，你需要花 些时间来考虑。</p>
<p>项目过渡之所以具有挑战性，是因为它就像铁人三项赛一样，你必须中断之前的</p>
<p>192  第二部分 掌握卓越技能，更胜一筹<br>做事方式(如专注于细节、预发布)然后开始新的做事方式(如参与头脑风暴和策略 游戏)。它的另一个挑战性还在于你需要设法做好两份工作。第一份工作是维护已经 在生产环境中的软件，它几乎肯定会遇到一些早期发展过程中的困难。第二份工作是 启动新项目。大部分新项目在启动时都需要巨大的精力去推动，并在推动不利时需要 以坚韧的精神去承受不可避免的迎头痛击。</p>
<h2 id="十大交付原则"><a href="#十大交付原则" class="headerlink" title="十大交付原则"></a>十大交付原则</h2><ol>
<li>你不是来当老板的——团队主管是仆人，他们存在的目的就是为了伺候工程团队。 2. 从用户角度出发。</li>
<li>用独特的方法解决很多人都有的大问题。</li>
<li>坏的消息就是好的消息。——杰克·韦尔奇</li>
<li>先寻求理解，再寻求被理解。——史蒂芬·柯维</li>
<li>构建最简洁的可用的产品。</li>
<li>交付手中有的，而非脑中想的。</li>
<li>无法测量的东西也就无法提升。——开尔文勋爵</li>
<li>你不可能做完所有工作，所以你应首先做那些只有你能做的工作。 10. 永远走在交付的康庄大道上。</li>
</ol>
<h2 id="团队不可或缺的工件"><a href="#团队不可或缺的工件" class="headerlink" title="团队不可或缺的工件"></a>团队不可或缺的工件</h2><p>在管理产品开发的过程中，你会创建很多文档、指南、核查清单以及其他工件。 下面这张列表是贯穿产品生命周期中你可能期望创建的工件的略述。你很可能需要创 建以下所有工件，所以它们没有按照特别的顺序排列。你能从 www.shippinggreatness. com 上下载到其中一些工件的模板。</p>
<p>■轮值表——将寻呼器号码和手机号码的清单复制到一张钱包大小的纸上。 </p>
<p>■使用 Wiki 搭建的“联络簿”，用于遇到故障、突发事件或问题时寻找相关负责 人。这个列表应该包括法务、公关、市场、产品团队、工程团队和网络运维(或者任何负责生产基础设施的部门)的负责人和联系信息。<br>■描述使命的语句。</p>
<p>■关于未来两年的清晰策略。</p>
<p>■一页简要说明产品的人物 / 事件 / 原因 / 时间 / 方法的文档。 ■产品需求文档，或者叫功能规格说明。</p>
<p>■新闻稿。</p>
<p>■线框原型图或者餐巾纸草图。</p>
<p>■内部 FAQ 文档，其中部分问答打上外部 FAQ 标签以作为客户支持内容的原始<br>素材。 ■沟通文档，包括关键信息、有潜在危险的问题和对这些问题的回应。 ■发布时穿的 T 恤衫。</p>
<p>■包含测试时间的开发计划表。</p>
<p>■未来两年的路线图。</p>
<p>■内部用户列表和迁移时间表(适用于基础设施项目)。</p>
<p>■可信测试者列表(适用于面向外部的产品)。</p>
<p> ■特性需求列表，并将内部和外部客户中呼声最高的三个特性需求高亮。 </p>
<p> ■开放问题列表，并清晰标记这些问题的状态。 </p>
<p> ■进行中的会议纪要。最好建一个文档保存项目所有的历史会议纪要。 </p>
<p> ■发布计划或发布规程。 </p>
<p> ■记录什么特性在什么时间发布的生成变更列表。在排查客户问题时特别有用。 </p>
<p> ■对增长预测和硬件配置需求提前进行计划的生产设计文档。</p>
<p>  ■专利注册文件、商标注册文件和版权申明文件。</p>
<p>■隐私说明。 </p>
<p>■出色的数据指标——包含内部的状态面板和一些供外部消费的清洗过的数据指标。 </p>
<p>■为幻灯片、演示、评审、发布准备的产品截图。</p>
<p> ■团队本季度目标以及上季度目标完成情况。</p>
<p>■Bug 状态面板和阻碍每个发布的 Bug 列表。</p>
<p>■错误原因报告或事后调查报告。</p>
<p> ■会议纪要和团队周会、用户界面评审、产品评审、工程评审、Bug 处理、法务<br>评审、业务拓展周会以及客户支持碰头会的时间计划表。</p>
]]></content>
      
        
        <tags>
            
            <tag> 产品 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习在IOS中的应用 Core ML]]></title>
      <url>/2017/06/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8IOS%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%20Core%20ML/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年的WWDC大会苹果赋予了开发者们新能力，能够将机器学习应用在移动端上，着实是一次让人感到兴奋的事情，一颗赛艇！！积极开展的Session学习活动，在第一节和第二节引用了一些概念和背景来帮助理解，熟练工请忽略，跳至第三节直接开始操作,第五节开始有图片学习的demo可查看。 </p>
</blockquote>
<h3 id="本篇相关文档和Session有："><a href="#本篇相关文档和Session有：" class="headerlink" title="本篇相关文档和Session有："></a>本篇相关文档和Session有：</h3><ul>
<li><p>document: <a href="https://developer.apple.com/documentation/coreml" target="_blank" rel="external">Core Ml FrameWork</a></p>
</li>
<li><p>Session: <a href="https://developer.apple.com/videos/play/wwdc2017/703/" target="_blank" rel="external">WWDC 2017 Session 703 Introducing Core ML</a></p>
</li>
<li><p>Session: <a href="https://developer.apple.com/videos/play/wwdc2017/710/" target="_blank" rel="external">WWDC 2017 Session 710 Core ML in depth</a></p>
</li>
</ul>
<h2 id="一、AI-ML-DL"><a href="#一、AI-ML-DL" class="headerlink" title="一、AI.ML.DL"></a>一、AI.ML.DL</h2><h3 id="1、-人工智能"><a href="#1、-人工智能" class="headerlink" title="1、 人工智能"></a>1、 人工智能</h3><h4 id="1-1-定义："><a href="#1-1-定义：" class="headerlink" title="1.1 定义："></a>1.1 定义：</h4><p>让人工制造出来的系统或者机器，其运作行为看起来就像是人所表现出的智能行为一样，即机器“像人一样思考”、“像人一样行动”、“理性地思考”和“理性地行动”。人工智能的研究是高度技术性和专业的，比如机器学习就是属于学习方向的课题，让机器具有人一样的学习行为。</p>
<h4 id="1-2-研究课题："><a href="#1-2-研究课题：" class="headerlink" title="1.2 研究课题："></a>1.2 研究课题：</h4><p>演绎推理和解决问题、知识表示法、规划、学习、自然语言处理、运动和控制、知觉、社交、创造力、多元智能、伦理管理、经济冲击</p>
<h3 id="2、机器学习"><a href="#2、机器学习" class="headerlink" title="2、机器学习"></a>2、机器学习</h3><h4 id="2-1-定义："><a href="#2-1-定义：" class="headerlink" title="2.1 定义："></a>2.1 定义：</h4><p>通过在大量数据中寻找模式,从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法.因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论，涵盖一切有关数据训练的学习算法。</p>
<h4 id="2-2-方式分类："><a href="#2-2-方式分类：" class="headerlink" title="2.2 方式分类："></a>2.2 方式分类：</h4><ul>
<li>监督学习：</li>
</ul>
<p>从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。训练集中的目标是由人标注的。类似概念还有半监督学习和无监督学习。</p>
<ul>
<li>增强学习：</li>
</ul>
<p>通过观察来学习做成如何的动作。每个动作都会对环境有所影响，学习对象根据观察到的周围环境的反馈来做出判断。</p>
<h4 id="2-3-使用算法："><a href="#2-3-使用算法：" class="headerlink" title="2.3 使用算法："></a>2.3 使用算法：</h4><ul>
<li>构造间隔理论分布，聚类分析和模式识别：</li>
</ul>
<p>人工神经网络、决策树、感知器、支持向量机、集成学习AdaBoost、降维与度量学习、聚类贝叶斯分类器</p>
<ul>
<li><p>构造条件概率，回归分析和统计分类：    </p>
<p>高斯过程回归、线性判别分析、最近邻居法、径向基函数核</p>
</li>
<li><p>通过再生模型构造概率密度函数，最大期望算法概率图模型：</p>
<p>  贝叶斯网、Markov随机场、Generative Topographic Mapping</p>
</li>
<li><p>近似推断技术：<br>  马尔可夫链、蒙特卡罗方法、变分法</p>
</li>
</ul>
<h3 id="3、深度学习"><a href="#3、深度学习" class="headerlink" title="3、深度学习"></a>3、深度学习</h3><h4 id="3-1-定义："><a href="#3-1-定义：" class="headerlink" title="3.1 定义："></a>3.1 定义：</h4><p>深度学习是机器学习中一种基于对数据进行表征学习的方法，起源于人工神经网络，在前期机器学习并没有深度学习这样的学习模型。所以我们现在也认为它是属于深度学习属于机器学习范畴内。它试图使用包含复杂结构或由多重非线性变换构成的多个处理层对数据进行高层抽象的算法。</p>
<h4 id="3-2-关系图："><a href="#3-2-关系图：" class="headerlink" title="3.2 关系图："></a>3.2 关系图：</h4><p><img src="/assets/images/AIMLDL.jpg" alt=""></p>
<h2 id="二、机器学习的应用发展："><a href="#二、机器学习的应用发展：" class="headerlink" title="二、机器学习的应用发展："></a>二、机器学习的应用发展：</h2><h3 id="2-1-发展："><a href="#2-1-发展：" class="headerlink" title="2.1 发展："></a>2.1 发展：</h3><p>1956年，达特茅斯会议提出了“人工智能”的概念。其后，人工智能就一直萦绕于人们的脑海之中，并在科研实验室中慢慢孵化。之后的几十年，人工智能一直在两极反转，或被称作人类文明耀眼未来的预言；或者被当成技术疯子的狂想扔到垃圾堆里，直到2012年之前，这两种声音还在同时存在。主要问题来自于运算需求难以得到满足，即使是最基本的神经网络，也需要大量的运算。过去几年，尤其是2015年以来，人工智能开始大爆发，很大一部分是由于GPU的广泛应用，使得并行计算变得更快、更便宜、更有效。当然，无限拓展的存储能力和骤然爆发的数据洪流（大数据）的组合拳，也使得图像数据、文本数据、交易数据、映射数据全面海量爆发。</p>
<h3 id="2-2-应用："><a href="#2-2-应用：" class="headerlink" title="2.2 应用："></a>2.2 应用：</h3><ul>
<li>领域列举<br>机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人等等</li>
<li>场景举例<br>句子翻译、动态手势识别、个人化推荐、美化的图像处理、云歌曲推荐、无人机航拍的视频实时分类路况信息等等</li>
</ul>
<h3 id="2-3-大公司"><a href="#2-3-大公司" class="headerlink" title="2.3 大公司"></a>2.3 大公司</h3><ul>
<li>FaceBook<br>Facebook AI研究项目（FAIR）专注于基础科学以及长期研究,另外一个叫应用机器学习部门（AML）,将技术用于现有Facebook产品。</li>
<li>Microsoft<br>微软1991年就已经开始涉足机器学习，有数百名科学家和工程师。</li>
<li>Google<br>Google Assistant是谷歌深度学习研究的集大成者。</li>
<li>Amazon<br>其CEO贝索斯称，已经悄悄研究了AI四年，目前在其语音识别生态系统上投入的人力有1000人。</li>
<li>Baidu<br>2014年，百度重金挖来谷歌深度学习项目负责人Andrew Ng，发力AI研究。</li>
<li>Apple<br>WWDC2017，苹果宣布面向开发者的机器学习框架Core ML ，加速在 iPhone、iPad、Apple Watch 上的人工智能任务。</li>
</ul>
<h2 id="三、在IOS中使用机器学习"><a href="#三、在IOS中使用机器学习" class="headerlink" title="三、在IOS中使用机器学习"></a>三、在IOS中使用机器学习</h2><blockquote>
<p>使用Core ML，你可以将训练好的机器学习模型整合到你的应用中。</p>
</blockquote>
<h3 id="3-1-Core-ML简介"><a href="#3-1-Core-ML简介" class="headerlink" title="3.1 Core ML简介"></a>3.1 Core ML简介</h3><p>Core ML是一个训练好的模型Model，一个机器学习算法应用到一个训练数据集之后所得到的结果。利用该模型可以基于新的输入数据而进行预测，也就是利用了机器学习的结果。比如，如果一个模型在一个地区的历史房价数据上进行了训练，那么它就可能能够根据房子的卧室和浴室数量来预测房价。<br>Core ML 为设备性能进行了优化，从而减少了内存占用和功耗。严格在设备上运行能够确保用户数据的隐私，并且能保证你的应用在没有网络连接时也能够工作和响应。<br>Core ML 框架本身构建于低层面的原语（primitives）之上，比如 Accelerate、BNNS 和 Metal Performance Shaders；<br>构建完成的Core Ml又作为其他更高级框架的基础，比如支持用于图像分析的 Vision 框架，用于自然语言处理的 Foundation类，以及用于评估已经学习到的决策树的 GameplayKit。结构图如下:</p>
<p><img src="/assets/images/CoreMl.png" alt=""></p>
<h3 id="3-2-支持的系统"><a href="#3-2-支持的系统" class="headerlink" title="3.2 支持的系统"></a>3.2 支持的系统</h3><ul>
<li>iOS 11.0+Beta</li>
<li>macOS 10.13+Beta</li>
<li>tvOS 11.0+Beta</li>
<li>watchOS 4.0+Beta</li>
</ul>
<h3 id="3-3-如何获得CoreMl-Model"><a href="#3-3-如何获得CoreMl-Model" class="headerlink" title="3.3 如何获得CoreMl Model"></a>3.3 如何获得CoreMl Model</h3><p>从如上定义看出，CoreMl框架只是将机器学习后的成果拿来应用，本身并不涉及机器学习的运行环境和过程。获得这些结果的方式有两种。</p>
<ul>
<li><p>苹果爸爸为你提供的现在model<br>根据自己的需要下载：<a href="https://developer.apple.com/machine-learning" target="_blank" rel="external">https://developer.apple.com/machine-learning</a></p>
</li>
<li><p>自己创建model<br>苹果爸爸为开发者提供了生成方法，不满意官方或者使用不足的时候，可以自己去机器学习完成，在创建应用，即第四节的内容。</p>
</li>
</ul>
<h3 id="3-4-将CoreML模型用在你的应用中"><a href="#3-4-将CoreML模型用在你的应用中" class="headerlink" title="3.4 将CoreML模型用在你的应用中"></a>3.4 将CoreML模型用在你的应用中</h3><ul>
<li>新建demo工程，在工程target中在Build Phase的Link Binary With Libraries里，加上CoreML.framework系统框架。</li>
<li>将获得的 CoreMl Model 添加至工程中，我们以GoogLeNetPlaces.mlmodel为例:</li>
</ul>
<p><img src="/assets/images/CoreMLXcode.jpg" alt=""></p>
<ul>
<li>注意中间有个Model Class ，点击查看api调用，有两点注意，输入参数为 CVPixelBufferRef 格式,图片需要是224X224像素的大小，所以需要自己写方法去转化为合适的参数。</li>
</ul>
<p><img src="/assets/images/GoogleAPI.jpg" alt=""></p>
<ul>
<li><p>调用示例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GoogLeNetPlaces *model = [[GoogLeNetPlaces alloc] init];</div><div class="line">UIImage *scaledImage = [self imageScaleToSize224:CGSizeMake(224, 224)];</div><div class="line">CVPixelBufferRef buffer = [self pixelBufferFromImage:scaledImage];</div><div class="line">GoogLeNetPlacesInput *input = [[GoogLeNetPlacesInput alloc] initWithSceneImage:buffer];</div><div class="line">GoogLeNetPlacesOutput *output = [model predictionFromFeatures:input error:nil];</div><div class="line">NSLog(@&quot;Scene label is: %@&quot;, output.sceneLabel);</div></pre></td></tr></table></figure>
</li>
<li><p>结论<br>百度搜索图片，下载常规的桌子、卧室图片，利用google此个model进行判断输出，正确。输入健身房的图片，判断输出为博物馆。由此可以看出，训练样本过少，当输入数据变复杂的时候就不能判断正确，侧面激励开发者们自己开展训练模型。</p>
</li>
</ul>
<h2 id="四、创建自己的Core-Ml-Model"><a href="#四、创建自己的Core-Ml-Model" class="headerlink" title="四、创建自己的Core Ml Model"></a>四、创建自己的Core Ml Model</h2><h3 id="4-1-Apple支持的模型"><a href="#4-1-Apple支持的模型" class="headerlink" title="4.1 Apple支持的模型"></a>4.1 Apple支持的模型</h3><p>苹果支持由第三方工具和框架训练出来的机器学习模型转化，我们可以只用苹果提供的转化工具,将个人已经训练好的数据模型转化为CoreML进行支持。工具为 Core ML Tools ，是基于Python开发的工具，需要自己安装配置，到这里，上面一二节的概念理解就有作用了，前面提到了机器学习所使用到的思想算法，这里工具有对应的类型支持转化。我从官网对照理解过来如下图：</p>
<table>
<thead>
<tr>
<th>学习模型</th>
<th>子算法类型</th>
<th>工具框架</th>
</tr>
</thead>
<tbody>
<tr>
<td>人工神经网络</td>
<td>多层向前反馈网络（Multilayer Feedforward Network）、CNN卷积神经网络（Convolution Neural Network、RNN递归神经网络（Recurrent Neural Networks）</td>
<td>Caffe、Keras 1.2.2</td>
</tr>
<tr>
<td>集成算法</td>
<td>随机森林（Random forests）、迭代树（boosted trees）、决策树（decision trees）</td>
<td>scikit-learn 0.18、XGBoost 0.6</td>
</tr>
<tr>
<td>支持向量机</td>
<td>线性回归（Scalar regression）、多分类器（multiclass classification）</td>
<td>scikit-learn 0.18、LIBSVM 3.22</td>
</tr>
<tr>
<td>广义线性模型</td>
<td>线性回归（Linear regression）、多分类器（multiclass classification）、标量回归（Scalar regression）</td>
<td>scikit-learn 0.18</td>
</tr>
<tr>
<td>特征工程</td>
<td>稀疏向量化（Sparse vectorization）、密集向量化（ dense vectorization）、分类处理（categorical processing）</td>
<td>scikit-learn 0.18</td>
</tr>
<tr>
<td>机器学习流</td>
<td>马尔可夫链（Sequentially chained models）</td>
<td>scikit-learn 0.18</td>
</tr>
</tbody>
</table>
<h3 id="4-2-转换你的学习模型"><a href="#4-2-转换你的学习模型" class="headerlink" title="4.2 转换你的学习模型"></a>4.2 转换你的学习模型</h3><p>微信朋友圈常常被一些风格奇异的图片刷屏，app里上传自己的照片就能变成特定风格的画像，有油画、漫画等等，这些都是机器学习的结果，Neural Transfer Style。一般有两种实现：第一种是快速渲染，输入一张原图+一个某种固定画风的模型 = 输出结果，这个你只需要模型就OK；第二种方法是，输入一张原图+一张风格图 + 在线渲染 = 输出结果，需要一个原始模型就行。搜索查询都是基于python的训练实现，有基于tensorflow,也有基于torch的，没到已生成的model，因而这里还是拿一个已有的图像识别的例子来讲。</p>
<ul>
<li><p>已下载材料<br>   <a href="http://dl.caffe.berkeleyvision.org/bvlc_alexnet.caffemodel" target="_blank" rel="external">bvlc_alexnet.caffemodel</a>、<br>   <a href="https://raw.githubusercontent.com/BVLC/caffe/master/models/bvlc_alexnet/deploy.prototxt" target="_blank" rel="external">deploy.prototxt</a>、<br>   <a href="https://raw.githubusercontent.com/torch/tutorials/master/7_imagenet_classification/synset_words.txt" target="_blank" rel="external">class_labels.txt</a></p>
</li>
<li><p>其他参考Caffe Model：</p>
<p>  <a href="https://github.com/BVLC/caffe/wiki/Model-Zoo#models-for-age-and-gender-classification" target="_blank" rel="external">Caffe model</a></p>
</li>
</ul>
<h4 id="4-2-1-pip安装Coremltools"><a href="#4-2-1-pip安装Coremltools" class="headerlink" title="4.2.1 pip安装Coremltools"></a>4.2.1 pip安装Coremltools</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; sudo easy_install pip</div><div class="line">&gt;&gt; pip install -U coremltools</div></pre></td></tr></table></figure>
<h4 id="4-2-2-打开mac终端"><a href="#4-2-2-打开mac终端" class="headerlink" title="4.2.2 打开mac终端"></a>4.2.2 打开mac终端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; python</div><div class="line">&gt;&gt; import coremltools</div><div class="line">&gt;&gt; coreml_model = coremltools.converters.caffe.convert((&apos;bvlc_alexnet.caffemodel&apos;, &apos;deploy.prototxt&apos;),predicted_feature_name=&apos;class_labels.txt&apos;)</div><div class="line">&gt;&gt; coreml_model.author = &apos;徐子超&apos;</div><div class="line">&gt;&gt; coreml_model.license = &apos;字节跳动&apos;</div><div class="line">&gt;&gt; coreml_model.short_description = &apos;Predicts the price of a house in the Seattle area.&apos; </div><div class="line">&gt;&gt; coreml_model.save(&apos;BVLCObjectClassifier.mlmodel&apos;)</div></pre></td></tr></table></figure>
<h4 id="4-2-3-得到model结果"><a href="#4-2-3-得到model结果" class="headerlink" title="4.2.3 得到model结果"></a>4.2.3 得到model结果</h4><p>我下载的bvlc_alexnet.caffemodel大小有244M左右，在终端中转化为CoreMl却基本没有转化耗时，可见苹果在开发工具的创造上下了功夫。我们得到了CoreML的模型如下图：</p>
<p><img src="/assets/images/CoreMLFile.jpg" alt=""></p>
<p>直接在工程文件中，加入model,添加到对应的target</p>
<p><img src="/assets/images/CoreMLXcode.jpg" alt=""></p>
<p>点击中间Model Class即可查看对应的定义，Model依旧244M大小，我在打开定义的过程中感受到了Xcode的明显延迟卡顿。</p>
<p>到这里，我们的model转化就完成了，在WWDC上也介绍了别的python工具，我这里没有使用，直接在终端里面完成即可。接下来，做个实测demo跑一下效果，本次转化的model过大，此处我们还是继续拿第三节的model来做。</p>
<h2 id="五、相机即时画面的图像解析Demo"><a href="#五、相机即时画面的图像解析Demo" class="headerlink" title="五、相机即时画面的图像解析Demo"></a>五、相机即时画面的图像解析Demo</h2><h4 id="4-1-新建一个相机demo"><a href="#4-1-新建一个相机demo" class="headerlink" title="4.1 新建一个相机demo"></a>4.1 新建一个相机demo</h4><p>即时的图像识别，需要在摄像头打开后，实时的获取手机屏幕上展示的每一帧图像，所以通常的UIimageViewPicker是无法做到的，我们需要自己搭建UI并手写捕捉相机视图的代码来构建一个自己的相机，通过AVFoundationKit,我们可以拿到相机里面图像流动的每一帧，从而可以将图像传递给GoogleNet进行识别。来，继续改造第三节的demo工程，将viewController变成一个简化版本的相机。</p>
<p>相机启动在三个时机，viewDidLoad的时候直接建立好组件，主要涉及AVFoundationKit的类有：</p>
<ul>
<li>AVCaptureDevice：获取手机功能里的相机设备</li>
<li>AVCaptureSession：连接相机device到输出数据流的会话层</li>
<li>AVCaptureVideoPreviewLayer：用于展示图片的画布，也是我们常见的相机窗口</li>
<li>AVCaptureVideoDataOutput：数据流</li>
<li>AVCaptureConnection ：数据连接</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">- (void)initAVCapturWritterConfig</div><div class="line">&#123;</div><div class="line">    self.session = [[AVCaptureSession alloc] init];</div><div class="line">    </div><div class="line">    //视频</div><div class="line">    AVCaptureDevice *videoDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];</div><div class="line">    if (videoDevice.isFocusPointOfInterestSupported &amp;&amp; [videoDevice isFocusModeSupported:AVCaptureFocusModeContinuousAutoFocus]) &#123;</div><div class="line">        [videoDevice lockForConfiguration:nil];</div><div class="line">        [videoDevice setFocusMode:AVCaptureFocusModeContinuousAutoFocus];</div><div class="line">        [videoDevice unlockForConfiguration];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    AVCaptureDeviceInput *cameraDeviceInput = [[AVCaptureDeviceInput alloc] initWithDevice:videoDevice error:nil];</div><div class="line">    </div><div class="line">    </div><div class="line">    if ([self.session canAddInput:cameraDeviceInput]) &#123;</div><div class="line">        [self.session addInput:cameraDeviceInput];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //视频</div><div class="line">    self.videoOutPut = [[AVCaptureVideoDataOutput alloc] init];</div><div class="line">    NSDictionary * outputSettings = [[NSDictionary alloc] initWithObjectsAndKeys:[NSNumber numberWithInt:kCVPixelFormatType_32BGRA],(id)kCVPixelBufferPixelFormatTypeKey, nil];</div><div class="line">    [self.videoOutPut setVideoSettings:outputSettings];</div><div class="line">    if ([self.session canAddOutput:self.videoOutPut]) &#123;</div><div class="line">        [self.session addOutput:self.videoOutPut];</div><div class="line">    &#125;</div><div class="line">    self.videoConnection = [self.videoOutPut connectionWithMediaType:AVMediaTypeVideo];</div><div class="line">    self.videoConnection.enabled = NO;</div><div class="line">    [self.videoConnection setVideoOrientation:AVCaptureVideoOrientationPortrait];</div><div class="line">    </div><div class="line">    //初始化预览图层</div><div class="line">    self.previewLayer = [[AVCaptureVideoPreviewLayer alloc] initWithSession:self.session];</div><div class="line">    [self.previewLayer setVideoGravity:AVLayerVideoGravityResizeAspectFill];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，在viewDidAppear的开始捕捉画面，viewWillDisappear停止相机捕捉。在viewDidAppear的时候我们开始相机的录制，代码会在videooutput的协议里回调给我们相机设备录制到的每一帧图像，这个时候我们就可以开始处理了。关键代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (void)startVideoCapture</div><div class="line">&#123;</div><div class="line">    [self.session startRunning];</div><div class="line">    self.videoConnection.enabled = YES;</div><div class="line">    self.videoQueue = dispatch_queue_create(&quot;videoQueue&quot;, NULL);</div><div class="line">    [self.videoOutPut setSampleBufferDelegate:self queue:self.videoQueue];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark --AVCaptureVideoDataOutputSampleBufferDelegate</div><div class="line">- (void)captureOutput:(AVCaptureOutput *)captureOutput didOutputSampleBuffer:(CMSampleBufferRef)sampleBuffer fromConnection:(AVCaptureConnection *)connection</div><div class="line">&#123;</div><div class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;CMSampleBufferRef&quot;, NULL);</div><div class="line">    dispatch_sync(queue, ^&#123;</div><div class="line">        CGImageRef cgImage = [UIImage imageFromSampleBuffer:sampleBuffer];</div><div class="line">        NSString *text = [self predictImageScene:[UIImage imageWithCGImage:cgImage]];</div><div class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">            self.googleLabel.text = text;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意此处，相机给我们回传的是CMSampleBufferRef格式的数据，而我们在第三节需要传入的是CVPixelBufferRef，所以会有一步在UIImage+Utils里的转化,最后附上代码地址。</p>
<h4 id="4-2-实时显示效果"><a href="#4-2-实时显示效果" class="headerlink" title="4.2 实时显示效果"></a>4.2 实时显示效果</h4><p>到官网下载安装配置，把手机升级到IOS11的beta版本后，将相机demo连上手机真机调试得到实时显示,当我移动手机对准不同画面时，相机底部会对应解析出识别结果:</p>
<p><img src="/assets/images/coremlgif.gif" alt=""></p>
<h2 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h2><p>从本次实践上，还是可以看出一些问题：</p>
<p>1、Core ML 框架只在IOS11以上才开始支持，现状是很多APP还在支持低版本。比如目前微信支持IOS8以上。</p>
<p>2、每一个机器学习模型引入的model都是很大，我们的demo使用偏小的model，但是数据却又不准确，model的引入会给IOS安装包带来包体积很大的增加。</p>
<p>3、机器学习的结果分析大量的运算，虽然目前iphone在不断的升级硬件GPUCPU，但是我测试过程中还是发现计算的延迟，就异步计算返回的。</p>
<p>4、对于非专业的机器学习人士来讲，IOS开发能拿到现在的model来使用，很多酷炫的效果都没有现成的model,这里也是一个门槛。</p>
<p>随着Core ML技术的引入，移动端上实现机器学习开始变得可能，这也让IOS开发者为之兴奋，然而在IOS上实践机器学习还是有较长的路要走，当然apple本身的布局正在推动这一发展，保持期待。本文不仅仅是对WWDC新技术的探索和分享，也是对机器学习的兴趣认识。</p>
<h4 id="github代码-IOS-Core-ML，有兴趣的同学可以下载在IOS11的设备上跑起来。"><a href="#github代码-IOS-Core-ML，有兴趣的同学可以下载在IOS11的设备上跑起来。" class="headerlink" title="github代码:IOS-Core ML，有兴趣的同学可以下载在IOS11的设备上跑起来。"></a>github代码:<a href="https://github.com/xuzichao/IOS-Core-ML" target="_blank" rel="external">IOS-Core ML</a>，有兴趣的同学可以下载在IOS11的设备上跑起来。</h4>]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写在2016年末]]></title>
      <url>/2016/12/25/%E5%86%99%E5%9C%A82016%E5%B9%B4%E5%BA%95/</url>
      <content type="html"><![CDATA[<p>现在已经是16年的年尾了，想起去年元旦节那天和几个老基友在一棵年树下合影留念，恰好是自己入职今日头条第一天，那时候自己在工作上又上了一个台阶，特别开心。入职的一月给自己定了16年的目标，16年是本命年啊，要好好的过好这一年。</p>
<p>针对个人的各方面规划，看起来真是个美好的愿景，一天天按部就班的做着事情，希望能再年底的时候给自己惊喜。如今回头去看，有的目标还没有进展！贼哈哈哈哈哈！想起来我也是快乐的！是啊，这大半年有些浪。总结回顾，大概去年创业大半年给整累了，来了头条后，各种更好的生活，各种轻松的姿态，逐渐的也就有些懒散，当然头条也是创业驱动型公司，氛围是很强烈的，不过对于我这样从创业公司过来的，还是觉得条件会好些，少了点之前那股劲头。</p>
<p>目标这个东西确实容易让人清醒，想起当时的积极澎湃都去哪了，看着一个个目标的进度，上哪说理去？客观原因分析后，主要是一年自己没有想好怎么过，年初定的目标有偏颇，总是一个探索的心，自己尝试了好多方向去认识自己，在知道想干什么的前提下，尝试去判断自己能不能做到。而这些尝试呢，和原本设定的目标是有出入的。既定的目标的实现时机由于一个客观原因也发生了变化，在今年是完成不了的。就这样，在一个个夜里深睡去，直到每日早上九十点，几个老基友基本每周都聚，自己的生活节奏也是存在影响的。工作期间，找我的头聊了聊，他也看出了我的一些困惑，觉得我可能是有些茫然，大概对应了工作两年的人都会有的现象，给我讲述了他的一些故事。这又让我想起了自己大学的时候，好像大二是有点茫然，未来那么长，我该做点什么。对，是的，我该做点什么了。中间我也修正过一些计划，在中秋节的时候总结了一下，但是没有从根本上做出变动。</p>
<p>经过不断的自我认识，不断的尝试，我觉得现在比较清楚自己之后的安排了，可以拟定一些方向性质上的目标，以前定目标都是相对较短期目标，接下来要完成这些目标的时间是相对较长的，是到17年年底的时候才会来check的。因为是从自己目前的情况来看，这样相对来说合适一点，这段时间内，我也做不了比这些更大的事情了。总感觉这次和以往定目标时不太一样，也许这就是成长。</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>时间：16-12-25</p>
<blockquote>
<p>目标 1： IOS技术扩展挖深</p>
</blockquote>
<ul>
<li>头条的业务需求、管理一块业务</li>
</ul>
<blockquote>
<p>目标 2： 产品经理继续学习</p>
</blockquote>
<ul>
<li>头条数据分析；网站上学习理论知识，应用在独立App上</li>
</ul>
<blockquote>
<p>目标 3： 维护一个头条号</p>
</blockquote>
<ul>
<li>每周发两篇</li>
</ul>
<blockquote>
<p>目标 4： 争取能够自己发一款独立APP</p>
</blockquote>
<ul>
<li>IOS端至少能够达到演示的目的</li>
</ul>
<blockquote>
<p>目标 5： 托福考试过，申请香港或新加坡的硕士</p>
<p>目标 6： 成都或者重庆买下自己的第一套住房</p>
</blockquote>
<ul>
<li>去闯，闯不了就滚回去</li>
</ul>
<blockquote>
<p>目标 7： 学会摄影或者学会一门乐器</p>
</blockquote>
<ul>
<li>一个人拥有一个爱好是很重要的</li>
</ul>
<blockquote>
<p>目标 8： 锻炼</p>
</blockquote>
<ul>
<li>健康是最重要的，年轻人就得有肌肉</li>
</ul>
<h2 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h2><p>时间：17-12-28</p>
<blockquote>
<p>目标 1：</p>
</blockquote>
<ul>
<li><p>问答业务进展顺利，开发独立app</p>
</li>
<li><p>主导应用工程平台化。</p>
</li>
<li><p>主导内部创业新项目</p>
</li>
</ul>
<blockquote>
<p>目标 2：</p>
</blockquote>
<ul>
<li>零零散散的看了一些产品的博客和大咖的文章，看了两本书</li>
</ul>
<blockquote>
<p>目标 3：</p>
</blockquote>
<ul>
<li>建立了头条号，只发了几篇文章</li>
</ul>
<blockquote>
<p>目标 4： </p>
</blockquote>
<ul>
<li>画过原型和设计，做了部分APP的代码组件和雏形，在做解耦拆分，工作量大。</li>
</ul>
<blockquote>
<p>目标 5：</p>
</blockquote>
<ul>
<li>前后加起来背了有两千单词，然后被杂事打乱。</li>
<li>做完一本托福阅读的书籍。</li>
<li>由于其他原因，改为申请英国，考了一次雅思。</li>
<li>拿到华威和曼切斯特的计算机硕士offer</li>
</ul>
<blockquote>
<p>目标 6： </p>
</blockquote>
<ul>
<li><p>从11月份和12月份的观察，到1月份回去查看了各处的楼盘，对这事情的认识有所改观，房子这个事情先不着急，但是也可以做，牵扯到的东西多，春节回来办公积金卡，5月份的时候可以再去看看。</p>
</li>
<li><p>4月份的时候回了重庆，买在了照母山旁边，目前房价已经涨起来</p>
</li>
</ul>
<blockquote>
<p>目标 7：</p>
</blockquote>
<ul>
<li>单反出去拍过，有进步</li>
<li>自己买了个无人机，飞行了几次，在北京由于禁飞限制，每次都要开车跑很远，飞行成本很高</li>
<li>买了个小提琴，没怎么动过，以后可以考虑参加培训班</li>
</ul>
<blockquote>
<p>目标 8：</p>
</blockquote>
<ul>
<li>打过打乒乓球和羽毛球，偶尔跑步</li>
<li>力量训练少，整体频次低</li>
<li>身在IT行业再难做到学校的作息</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用CocoaPods创建私有仓库]]></title>
      <url>/2016/11/22/%E4%BD%BF%E7%94%A8CocoaPods%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="一、两个概念："><a href="#一、两个概念：" class="headerlink" title="一、两个概念："></a>一、两个概念：</h2><h3 id="1、XXX-podspec-配置文件"><a href="#1、XXX-podspec-配置文件" class="headerlink" title="1、XXX.podspec   配置文件"></a>1、XXX.podspec   配置文件</h3><p>spec 配置文件是cocoapods的每一个代码仓库所对应的信息管理文件，主要是对仓库的行为进行配置，每一个版本的代码仓库都对应有一个配置文件。</p>
<p>包括仓库的名称、版本号、描述、主页地址、证书说明、作者、版本指定方式、工程的目标版本号、文件和资源的路径、依赖的库关系等。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># Be sure to run `pod lib lint ios-category.podspec&apos; to ensure this is a</div><div class="line"># valid spec before submitting.</div><div class="line">#</div><div class="line"># Any lines starting with a # are optional, but their use is encouraged</div><div class="line"># To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html</div><div class="line">#</div><div class="line"></div><div class="line">Pod::Spec.new do |s|</div><div class="line">  s.name             = &apos;ios-category&apos;</div><div class="line">  s.version          = &apos;0.0.2&apos;</div><div class="line">  s.summary          = &apos;ios-category is used for ios-network&apos;</div><div class="line"></div><div class="line"># This description is used to generate tags and improve search results.</div><div class="line">#   * Think: What does it do? Why did you write it? What is the focus?</div><div class="line">#   * Try to keep it short, snappy and to the point.</div><div class="line">#   * Write the description between the DESC delimiters below.</div><div class="line">#   * Finally, don&apos;t worry about the indent, CocoaPods strips it!</div><div class="line"></div><div class="line">  s.description      = &lt;&lt;-DESC</div><div class="line"></div><div class="line">  s.homepage         = &apos;http://www.example.com&apos;</div><div class="line">  # s.screenshots     = &apos;www.example.com/screenshots_1&apos;, &apos;www.example.com/screenshots_2&apos;</div><div class="line">  s.license          = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</div><div class="line">  s.author           = &#123; &apos;xuzichao&apos; =&gt; &apos;xuzichao03@gmail.com&apos; &#125;</div><div class="line">  s.source           = &#123; :git =&gt; &apos;git@code.xuzichao.org:tt_pods_ios-category.git&apos;, :tag =&gt; s.version.to_s  &#125;</div><div class="line">  # s.social_media_url = &apos;https://twitter.com/&lt;TWITTER_USERNAME&gt;&apos;</div><div class="line"></div><div class="line">  s.ios.deployment_target = &apos;6.0&apos;</div><div class="line"></div><div class="line">  s.source_files = &apos;ios-category/Classes/**/*&apos;</div><div class="line">  </div><div class="line">  s.resource_bundles = &#123;</div><div class="line">    &apos;ios-category&apos; =&gt; [&apos;ios-category/Resources/*&apos;]</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  # s.public_header_files = &apos;Pod/Classes/**/*.h&apos;</div><div class="line">  # s.frameworks = &apos;UIKit&apos;, &apos;MapKit&apos;</div><div class="line">  # s.dependency &apos;ios-categorying&apos;, &apos;~&gt; 2.3&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<h3 id="2、Spec-repo"><a href="#2、Spec-repo" class="headerlink" title="2、Spec repo"></a>2、Spec repo</h3><p>组合词，表示仓库的概念，主要是用于存储pod代码库对应的podspec文件，管理各个仓库的各个版本的代码，它其实就是一个容器。Cocoapods会默认在本地建立一个容器，包含了你各个工程对应的代码仓库，当你使用了Cocoapods后，它们就会被clone到本地的~/.cocoapods/repos目录下。这里指代的是Cocoapods默认创建的仓库，其实我们不需要关心。</p>
<p>当我们创建私有库的时候，我们需要有自己的容器，用于存放自己的各个代码库，和上面的Cocoapods创建的是区别开的。我们自己创建的容器，其实就是一个远端的git仓库，我们把代码库对应的各个版本配置文件提交上去。</p>
<h2 id="二、创建的操作："><a href="#二、创建的操作：" class="headerlink" title="二、创建的操作："></a>二、创建的操作：</h2><h3 id="1、使用cocoapods："><a href="#1、使用cocoapods：" class="headerlink" title="1、使用cocoapods："></a>1、使用cocoapods：</h3><p>1.1 命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo gem install cocoapods</div><div class="line">touch podfile</div><div class="line">pod install</div><div class="line">pod update</div></pre></td></tr></table></figure>
<p>1.2 pod install 、 pod update</p>
<p>pod install 将pod的版本写入Podfile.lock文件中.对于已经在Podfile.lock中有记录的Pod下载对应的版本，即便有新的版本，也不会去更新.对于没有记录的，根据Podfile中的约定，下载版本，并把版本信息写入Podfile.lock中.</p>
<p>只有当需要更新pod版本时，才用pod update,其余时间都用pod install</p>
<h3 id="2、私有库"><a href="#2、私有库" class="headerlink" title="2、私有库"></a>2、私有库</h3><p>2.1 创建并设置一个私有的Spec Repo。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod repo add TestSpecs https://coding.net/test.git</div></pre></td></tr></table></figure>
<p>2.2 创建Pod的所需要的项目工程文件，并且有可访问的项目版本控制地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -s -m &quot;我的工程代码文件&quot;</div><div class="line">$ git remote add origin git@coding.net:ios-category.git     </div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p>2.3 创建Pod所对应的podspec文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod spec create ios-category.podspec</div></pre></td></tr></table></figure>
<p>2.4 本地测试配置好的podspec文件是否可用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint</div><div class="line">	</div><div class="line">$ pod &apos;ios-category&apos;, :podspec =&gt; &apos;~/Users/ios-category.podspec&apos;  #指定podspec文件</div></pre></td></tr></table></figure>
<p>2.5 向私有的Spec Repo中提交podspec。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo push TestSpecs ios-category.podspec</div></pre></td></tr></table></figure>
<p>2.6 在个人项目中的Podfile中增加刚刚制作的好的Pod并使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># private</div><div class="line">source &apos;https://coding.net/test.git&apos;</div><div class="line"># public</div><div class="line">source &apos;https://github.com/CocoaPods/Specs.git&apos;</div><div class="line"></div><div class="line">target &apos;ReactiveCocoaDemo&apos; do</div><div class="line">pod &quot;ios-category&quot;, &quot;0.1.0&quot;</div><div class="line">end</div></pre></td></tr></table></figure>
<h2 id="三、其他说明"><a href="#三、其他说明" class="headerlink" title="三、其他说明"></a>三、其他说明</h2><p>按照阶段二进行操作，即可顺利完成pod工程的引用，其他介绍说明文档中可能出现的，testpod 工程，其实可以不用管。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec create PodTestLibrary git@coding.net:test.gitt</div></pre></td></tr></table></figure>
<p>以及由于pod的各个版本变化，spec文件有可能本来是正确的，但是pod lib lint这一步始终不能通过，这样pod repo push这一步就无法完成。可以直接将spec文件通过git 提交的方式放进远端的Spec Repo中，依然可以正常运行。</p>
]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[头条热补丁方案]]></title>
      <url>/2016/09/11/%E5%A4%B4%E6%9D%A1%E7%83%AD%E8%A1%A5%E4%B8%81%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h1 id="TTSparkRescue"><a href="#TTSparkRescue" class="headerlink" title="TTSparkRescue"></a>TTSparkRescue</h1><blockquote>
<p>备注：2017年4月开始出现使用热修复审核不通过的情况，经过混淆的方式后，绕过了苹果的检测，但是到5月初的时候，苹果全方面严打IOS热修复策略，各方APP包括头条在内的方案被迫下架。</p>
</blockquote>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>TTSparkRescue是头条公司层面的通用的热修复库，同时提供给其他产品线使用。设计包括如下：</p>
<ul>
<li>启动崩溃计数修改为3秒后清除</li>
<li>启动初始化的预清理</li>
<li>启动崩溃本地有缓存预先执行</li>
<li>启动崩溃第二次，启动上报逻辑和预处理</li>
<li>启动崩溃第三次，开始启动修复逻辑</li>
<li>启动后修复</li>
<li>补丁下发更新机制</li>
<li>客户端本地处理下发的patch错误</li>
<li>下发JS空白</li>
<li>下发前，本地预先运行，验证JS脚本</li>
<li>本地模拟crash</li>
<li>管理的系统版本号粒度更精细</li>
<li>增加端监控，传出参数，由TTMonitor在外部配合调到 </li>
</ul>
<h1 id="2-快速集成"><a href="#2-快速集成" class="headerlink" title="2. 快速集成"></a>2. 快速集成</h1><h2 id="2-1-Podfile引用"><a href="#2-1-Podfile引用" class="headerlink" title="2.1 Podfile引用"></a>2.1 Podfile引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source &apos;头条内部的git地址&apos;</div><div class="line"></div><div class="line">pod &apos;TTSparkRescue&apos;, &apos;2.3&apos;</div></pre></td></tr></table></figure>
<h2 id="2-2-代码块替换"><a href="#2-2-代码块替换" class="headerlink" title="2.2 代码块替换"></a>2.2 代码块替换</h2><blockquote>
<p>方法A: </p>
</blockquote>
<p>APP原本的didFinishLaunchingWithOptions的全部逻辑didFinishLaunchingWithOptions</p>
<blockquote>
<p>方法B :</p>
</blockquote>
<p>新建并复制，参数和函数体与方法A保持一致</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application</div><div class="line"> normalLaunchProcessWithOptions:(NSDictionary *)launchOptions</div></pre></td></tr></table></figure>
<p>使用TTJSPatch结构替换方法A，下面部分可以直接复制即可用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    __weak typeof(self) wself = self;</div><div class="line">    </div><div class="line">#if DEBUG</div><div class="line">    //默认注释关闭</div><div class="line">    //    [[TTSparkRescue shareInstance] setTestPatch:YES simulationCrash:YES];</div><div class="line">#endif</div><div class="line">    </div><div class="line">    //内部监控上报</div><div class="line">    [[TTSparkRescue shareInstance] setReportBlock:^(NSString *key, NSDictionary *info) &#123;</div><div class="line">        </div><div class="line">        //crash的预处理逻辑</div><div class="line">        if ([key isEqualToString:TTJSPatchLaunchCrash]) &#123;</div><div class="line">            //优先清理coredata缓存</div><div class="line">            //解决可能造成的crash</div><div class="line">            //连续崩溃第四次才启用安全模式</div><div class="line">        &#125;</div><div class="line">        [[TTMonitor shareManager] trackService:key status:1 extra:info];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //运行错误处理，内部已加监控, type == 1 for JS, type == 2 for OC</div><div class="line">    [[TTSparkRescue shareInstance] setJSCrashHanlder:^(NSInteger type, NSString *msg) &#123;</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //CompletionBlock:头条正常启动逻辑</div><div class="line">    [[TTSparkRescue shareInstance] setBoolCompletionBlock:^BOOL&#123;</div><div class="line">        </div><div class="line">#if DEBUG</div><div class="line">        //本地测试的时候模拟crash，不必注释，由前面的开关控制即可</div><div class="line">        [[TTSparkRescue shareInstance] simulationLauchCrash];</div><div class="line">        [[TTSparkRescue shareInstance] simulationLauchDelayCrash];</div><div class="line">        [[TTSparkRescue shareInstance] simulationActiveCrash];</div><div class="line">        </div><div class="line">#endif</div><div class="line"></div><div class="line">        return [wself application:application normalLaunchProcessWithOptions:launchOptions];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //启动执行逻辑，完成后调用CompletionBlock</div><div class="line">    return [[TTSparkRescue shareInstance] launchContinuousCrashProcess];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="3-功能设计"><a href="#3-功能设计" class="headerlink" title="3. 功能设计"></a>3. 功能设计</h1><h2 id="3-1、说明："><a href="#3-1、说明：" class="headerlink" title="3.1、说明："></a>3.1、说明：</h2><h4 id="1、启动崩溃计数修改为12秒后清除"><a href="#1、启动崩溃计数修改为12秒后清除" class="headerlink" title="1、启动崩溃计数修改为12秒后清除"></a>1、启动崩溃计数修改为12秒后清除</h4><blockquote>
<p>如果启动过程中，出现延迟操作，操作时间在原先的5秒之外，那么这次操作如果出现崩溃将无法被记录下。也就无法再启动中修复。<br>     将清除时间调大，设置为一个网络请求的返回时间，覆盖了延迟造作造成的crash。</p>
</blockquote>
<h4 id="2、启动初始化的预清理"><a href="#2、启动初始化的预清理" class="headerlink" title="2、启动初始化的预清理"></a>2、启动初始化的预清理</h4><blockquote>
<p>当我们判断当前版本号发生变化时，直接清除本地的patch文件，避免升级覆盖安装后，还持有原先逻辑或者错误。</p>
</blockquote>
<h4 id="3、启动崩溃本地有缓存预先执行"><a href="#3、启动崩溃本地有缓存预先执行" class="headerlink" title="3、启动崩溃本地有缓存预先执行"></a>3、启动崩溃本地有缓存预先执行</h4><blockquote>
<p>因为是修复崩溃的逻辑，之前需要达到崩溃条件后才开始请求下发，原本就体验差了，如果再遇上网络缓慢的时候，启动会很慢，<br>  体验更差。并且每次都会崩溃后重新启动。此次修改后，出现一次之后同步请求返回patch,正常启动，下次进入，判断有缓存就直接执行，<br>  执行异步的请求更新。</p>
</blockquote>
<h4 id="4、启动崩溃第二次，启动上报逻辑和预处理"><a href="#4、启动崩溃第二次，启动上报逻辑和预处理" class="headerlink" title="4、启动崩溃第二次，启动上报逻辑和预处理"></a>4、启动崩溃第二次，启动上报逻辑和预处理</h4><blockquote>
<p>APPDelegate 上报和预处理逻辑 ReportBlock，当出现第二次崩溃的时候，可以删除本地的一些可能会导致crash的东西，<br>比如本地的数据库可以先清理掉，等等。然后统计上报。</p>
</blockquote>
<h4 id="5、启动崩溃第三次，开始启动修复逻辑"><a href="#5、启动崩溃第三次，开始启动修复逻辑" class="headerlink" title="5、启动崩溃第三次，开始启动修复逻辑"></a>5、启动崩溃第三次，开始启动修复逻辑</h4><blockquote>
<p>如果本地有缓存，则网络异步更新，因为后面的逻辑保证本地已有的缓存patchJS执行没错，所以可以先执行。<br>如果本地无缓存，则网络同步请求，返回补丁，运行成功后再启动APP正常流程。<br>不会再出现再次崩溃3此的情况。<br>只要出现3次崩溃，忽略本地缓存，直接请求更新。</p>
</blockquote>
<h4 id="6、启动后修复"><a href="#6、启动后修复" class="headerlink" title="6、启动后修复"></a>6、启动后修复</h4><blockquote>
<p>启动中的时候，判断本地有缓存文件，预先执行，之后，每次active就会请求更新文件</p>
</blockquote>
<h4 id="7、补丁下发更新机制"><a href="#7、补丁下发更新机制" class="headerlink" title="7、补丁下发更新机制"></a>7、补丁下发更新机制</h4><blockquote>
<p>本地无缓存，直接存储，有缓存，判断版本号。<br> 我们在后台下发补丁的时候，目前依旧保持，升级版本号，全量覆盖。也就是说，app每个版本，在客户端里依旧保持唯一一个补丁，启动前和启动后各自有对应的唯一一个。<br>此处，服务端也有策略，我们上传的参数包含当前，版本，如果服务端有更高版本，就会升级。</p>
</blockquote>
<h4 id="8、客户端本地处理下发的patch错误"><a href="#8、客户端本地处理下发的patch错误" class="headerlink" title="8、客户端本地处理下发的patch错误"></a>8、客户端本地处理下发的patch错误</h4><blockquote>
<ul>
<li>(void)handleException:(void (^)(NSInteger crashType,NSString *msg))exceptionBlock;<br>crashType == 1 的时候是 JS环境 运行的Crash<br>crashType == 2 的时候是  OC环境 运行的Crash<br>当我们下发的脚本有问题的时候，客户端本地直接删除全部补丁文件，包括启动前和启动后。<br>APPDelegate 中 JSCrashHanlder 被调用，可以填写上报逻辑和反馈运行的错误原因。<br>在此条件下，当用户退到后台之后，自动崩溃，重新打开客户端没有patch，这个留出来及时下发修正后Patch的时机。</li>
</ul>
</blockquote>
<h4 id="9、下发JS空白"><a href="#9、下发JS空白" class="headerlink" title="9、下发JS空白"></a>9、下发JS空白</h4><blockquote>
<p>直接删除本地补丁文件</p>
</blockquote>
<h4 id="10、下发前，本地预先运行，验证JS脚本"><a href="#10、下发前，本地预先运行，验证JS脚本" class="headerlink" title="10、下发前，本地预先运行，验证JS脚本"></a>10、下发前，本地预先运行，验证JS脚本</h4><blockquote>
<p>直接将要在后台要下发的JS代码，非BASE64编码，贴到工程里的test.js 文件里，此处文件名固定。<br>并在APPDelegate 打开测试运行的开关，然后直接运行即可，测试完毕，防止错误，必须关闭。</p>
</blockquote>
<h4 id="11、本地模拟crash"><a href="#11、本地模拟crash" class="headerlink" title="11、本地模拟crash"></a>11、本地模拟crash</h4><blockquote>
<p>增加错误的OC代码导致crash，用于模拟各种情况，包括启动中，启动中延时，启动后。<br>并设置了开关，默认都是关闭的，随测试方法的开关一起，正式提交时，必须关闭。</p>
</blockquote>
<h4 id="2、管理的系统版本号粒度更精细"><a href="#2、管理的系统版本号粒度更精细" class="headerlink" title="2、管理的系统版本号粒度更精细"></a>2、管理的系统版本号粒度更精细</h4><blockquote>
<p>整数示例：8，9，10   —-   后台命中：8.x,9.x,10.x   IOS系统版本<br>精确示例：9.1.2 — 后台命中：9.1.2 IOS系统版本</p>
</blockquote>
<h4 id="13、下发补丁一并写注释"><a href="#13、下发补丁一并写注释" class="headerlink" title="13、下发补丁一并写注释"></a>13、下发补丁一并写注释</h4><blockquote>
<p>每次下发补丁，需要填写说明，包括：【事故原因】【下发人】【下发日期】</p>
</blockquote>
<h4 id="14、启动后的下发调用改为通知"><a href="#14、启动后的下发调用改为通知" class="headerlink" title="14、启动后的下发调用改为通知"></a>14、启动后的下发调用改为通知</h4><blockquote>
<p>不需要在applicationDidBecomeActive中再显示调用原来的makePatchRequestAfterLaunch，manager内部监听通知即可。</p>
</blockquote>
<h4 id="15、增加端监控，传出参数，由TTMonitor在外部配合调到"><a href="#15、增加端监控，传出参数，由TTMonitor在外部配合调到" class="headerlink" title="15、增加端监控，传出参数，由TTMonitor在外部配合调到"></a>15、增加端监控，传出参数，由TTMonitor在外部配合调到</h4><blockquote>
<p>监控请求成功和失败、下发更新、版本升级删除的等等用于统计patch的使用情况，后期有利于生成分布和图形。<br>TTSparkRescueLaunchCrash<br>APPDelegate 上报和预处理逻辑 ReportBlock，当出现第二次崩溃的时候，可以删除本地的一些可能会导致crash的东西，<br>比如本地的数据库可以先清理掉，等等。然后统计上报。<br>TTSparkRescueServerCloseCrash<br>服务器端下发关闭运行JSPatch的统计<br>TTSparkRescueDeleteFile<br>删除清空本地文件的统计，下发空白、错误、运行错误、升级都会删除之前的缓存文件，用action字段区分。<br>TTSparkRescueError<br>内部运行的错误报告，文件请求失败和运行失败等。<br>TTSparkRescueUpdateFile<br>统计更新成功的事件</p>
</blockquote>
<h2 id="3-2、测试Case"><a href="#3-2、测试Case" class="headerlink" title="3.2、测试Case"></a>3.2、测试Case</h2><p>1、启动中，有崩溃，包括延时崩溃，无缓存文件。正常同步请求返回，APP启动完成。</p>
<p>2、启动中，有崩溃，包括延时崩溃，有缓存文件。<br>直接读取本地文件，APP启动完成。</p>
<p>3、启动中，有崩溃，包括延时崩溃，下发JS语法的patch文件。<br>无法正常启动，连续crash3次后走同步请求。</p>
<p>4、启动后，有崩溃，无缓存文件。正常异步请求返回，APP正常运行。</p>
<p>5、启动后，有崩溃，有缓存文件。直接读取本地文件，正常同步请求返回更新文件，APP正常运行。</p>
<p>6、启动后，下发错误JS语法的patch文件。客户端判断文件出错，删除全部补丁缓存文件，清零，开始重新请求更新。</p>
<p>7、以上case通过线上下发运行一次，再本地测试开关运行一次。testPatch.js 在主工程被正确添加后，都可以正确执行。</p>
<p>8、升级版本号，覆盖安装。删除本地原有的补丁文件，清零。</p>
<p>9、监控点事件上报。正常对外输出事件和外带信息到APPDelegate中</p>
<h1 id="4-使用说明"><a href="#4-使用说明" class="headerlink" title="4. 使用说明"></a>4. 使用说明</h1><h2 id="4-1-补丁后台管理"><a href="#4-1-补丁后台管理" class="headerlink" title="4.1 补丁后台管理"></a>4.1 补丁后台管理</h2><p>客户端的修复需要后端的支持，提供接口和后端管理平台，用于托管修复文件，控制版本和保证传输安全。客户端根据反馈的崩溃信息(版本、名称、设备、用户)，针对某一批用户或者某一个版本号，在后台进行选择对应的版本JS文件，进行下发即可。</p>
<h3 id="4-1-1-热修复接口定义"><a href="#4-1-1-热修复接口定义" class="headerlink" title="4.1.1 热修复接口定义"></a>4.1.1 热修复接口定义</h3><p>应用名称和应用ID作用一致，为了兼容老的已经发出去的版本，我们保留app_name，之后的都是用app_id，两者等效力，<br>参数命中其中一个，至少有一个就行，就可以返回值。  </p>
<table>
<thead>
<tr>
<th>参数</th>
<th>参数ID</th>
<th>举例说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>应用版本号</td>
<td>app_version</td>
<td>5.6.0</td>
</tr>
<tr>
<td>应用名称</td>
<td>app_name</td>
<td>今日头条</td>
</tr>
<tr>
<td>应用ID</td>
<td>app_id</td>
<td>com.iphone.text</td>
</tr>
<tr>
<td>启动前后</td>
<td>app_launch</td>
<td>0前1后</td>
</tr>
<tr>
<td>设备ID</td>
<td>device_id</td>
<td>用户的手机设备ID</td>
</tr>
<tr>
<td>编号</td>
<td>无，客户端不作请求参数</td>
<td>服务端后台的文件号，随意定，不重复即可</td>
</tr>
<tr>
<td>百分比</td>
<td>无，客户端不作请求参数</td>
<td>服务端后台按量下发补丁</td>
</tr>
<tr>
<td>ON/OFF</td>
<td>无，客户端不作请求参数</td>
<td>服务端后台控制补丁开关</td>
</tr>
<tr>
<td>逗号分隔</td>
<td>无，客户端不作请求参数</td>
<td>服务端后台下发补丁，支持不同的版本，逗号分隔</td>
</tr>
<tr>
<td>应用版本号扩展</td>
<td>无，客户端不作请求参数</td>
<td>服务端后台下发的补丁，补丁本身的版本号，格式约定：应用版本号整数数字.补丁版本号整数数字，比如：570.1，591.21</td>
</tr>
</tbody>
</table>
<h3 id="4-1-2-数据格式"><a href="#4-1-2-数据格式" class="headerlink" title="4.1.2 数据格式"></a>4.1.2 数据格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">status:0, </div><div class="line">message:&quot;&quot;,</div><div class="line">data:&#123;</div><div class="line">     js_crash:0,  //修复代码本身出错的时候打开</div><div class="line">     js_version:560.4,         //5.6.0版本的第四个JS版本</div><div class="line">     js_value: &quot; sfkdsfnldjgdfnkgndkfngdsfgmdfngfjshdbfkhrwnf&quot;   //js的BASE64编码值，客户端直接解码运行</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-2-客户端运行："><a href="#4-2-客户端运行：" class="headerlink" title="4.2 客户端运行："></a>4.2 客户端运行：</h2><p>补丁分为启动前和启动后，和前面快速集成代码块一样，只需要这里，就已经是全部，启动前后的划分在内部执行，通知监听，不需要手动再调用。</p>
<h2 id="4-3、具体案例："><a href="#4-3、具体案例：" class="headerlink" title="4.3、具体案例："></a>4.3、具体案例：</h2><p>案例：5.7.0版本上bug修复</p>
<p>当我们需要完全替换方法的时候，我们需要注意替换原则，就是尽量使用原生的Native方法，这样JSpatch在转化的过程中可以遵循原生方法规则，生成对应代码，在解析的时候可以还原。<br>比如：</p>
<h3 id="4-3-1-使用注意"><a href="#4-3-1-使用注意" class="headerlink" title="4.3.1 使用注意"></a>4.3.1 使用注意</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">static inline void setAutoresizingMaskFlexibleWidthAndHeight(UIView *view)&#123;</div><div class="line">    view.autoresizingMask = UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>setAutoresizingMaskFlexibleWidthAndHeight(self.footerView);<br>我们在写的时候得写成：<br>self.footerView.autoresizingMask = 2|16;<br>系统自定义的常量，比如：UIViewAutoresizingFlexibleWidth,在JSPtatch中将被转化为同名的变量，然而这个变量，却在JS环境中没有定义，从而会报错。<br>所以我们直接使用对应的常量数字 2.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[self.footerView footerScrollView] tt_addDelegate:self asMainDelegate:NO];</div></pre></td></tr></table></figure>
<p>用于JSPatch自定义的语法为使用下划线区分方法名称，所以当转化为的JS再次被转回来OC方法的时候，会出现[[self.footerView footerScrollView] tt:addDelegate:self asMainDelegate:NO];<br>这样就崩溃了。</p>
<h3 id="4-3-2-示例"><a href="#4-3-2-示例" class="headerlink" title="4.3.2  示例"></a>4.3.2  示例</h3><p>Native源代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@implementation TTDetailWebviewContainer</div><div class="line">- (void)addFooterView:(UIView&lt;TTDetailFooterViewProtocol&gt; *)footerView</div><div class="line">  detailFooterAddType:(TTDetailNatantStyle)natantStyle</div><div class="line">&#123;</div><div class="line">    self.natantStyle = natantStyle;</div><div class="line">    self.footerView = footerView;</div><div class="line">    [self.footerView addObserver:self forKeyPath:@&quot;footerScrollView&quot; options:NSKeyValueObservingOptionOld | NSKeyValueObservingOptionNew context:nil];</div><div class="line">    [[self.footerView footerScrollView] tt_addDelegate:self asMainDelegate:NO];</div><div class="line">    self.footScrollView = self.footerView.footerScrollView;</div><div class="line">    self.footerView.frame = self.bounds;</div><div class="line">    //footerScrollView被赋值后，刷新scrollEnable和scrollToTop的状态；</div><div class="line">    self.footerStatus = self.footerStatus;</div><div class="line">    setAutoresizingMaskFlexibleWidthAndHeight(self.footerView);</div><div class="line">    if ([self shouldOpenInsertionOptimization]) &#123;</div><div class="line">        [self addFooterView];</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">      [self addFooterView];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>目标JS代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">defineClass(&apos;TTDetailWebviewContainer&apos;, &#123;</div><div class="line">addFooterView_detailFooterAddType: function(footerView, natantStyle) &#123;</div><div class="line">self.setNatantStyle(natantStyle);</div><div class="line">self.setFooterView(footerView);</div><div class="line">self.footerView().addObserver_forKeyPath_options_context(self, &quot;footerScrollView&quot;, 1|2, null);</div><div class="line">self.footerView().footerScrollView().tt__addDelegate_asMainDelegate(self, false);</div><div class="line">self.setFootScrollView(self.footerView().footerScrollView());</div><div class="line">self.footerView().setFrame(self.bounds());</div><div class="line">self.setFooterStatus(self.footerStatus());</div><div class="line">self.footerView().setAutoresizingMask(2 | 16);</div><div class="line">if (self.shouldOpenInsertionOptimization()) &#123;</div><div class="line">self.addFooterView();</div><div class="line">&#125; else &#123;</div><div class="line">self.addFooterView();</div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="5-原理介绍"><a href="#5-原理介绍" class="headerlink" title="5. 原理介绍"></a>5. 原理介绍</h1><h2 id="5-1-三方库"><a href="#5-1-三方库" class="headerlink" title="5.1 三方库"></a>5.1 三方库</h2><p>JSPatch(Github链接)诞生于2015年5月，最初是腾讯广研高级iOS开发@bang的个人项目。在Github.com上开源后获得了几千个star和几百个fork，广受关注，目前已被应用在大量腾讯/阿里/百度的App中。只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。所以我们通过下发 JS 脚本替换原生 Objective-C 代码，就可以实时修复线上 bug。针对头条客户端用于解决客户端发布后的崩溃修复问题，尤其是解决客户端的启动崩溃问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div></pre></td></tr></table></figure>
<h2 id="5-2-TTSparkRescue"><a href="#5-2-TTSparkRescue" class="headerlink" title="5.2 TTSparkRescue"></a>5.2 TTSparkRescue</h2><h3 id="5-2-1-修复类型"><a href="#5-2-1-修复类型" class="headerlink" title="5.2.1 修复类型"></a>5.2.1 修复类型</h3><h4 id="5-2-1-1-启动进行中"><a href="#5-2-1-1-启动进行中" class="headerlink" title="5.2.1.1 启动进行中"></a>5.2.1.1 启动进行中</h4><p>当发生启动崩溃的时候，通过同步的网络请求，下发JS脚本执行修复。下发的条件由本地的崩溃计数决定，应用每次启动都会在本地增加一次崩溃计数，并在3秒之后将计数清理，如果3秒内崩溃，则判定为一次真实的崩溃。当崩溃次数达到设置的条件的时候，比如连续崩溃3次，客户端就开始执行修复的逻辑过程，向后端发起对此接口的同步请求，由接口信息告知是否需要使用JS修复，是否需要更新JS文件，文件版本号以及JS文件内容的加密值。请求返回后，由客户端本地判断更新文件，下载，并执行。如果本地之前没有修复的JS 文件，默认需要请求更新。更新文件成功后，对应更新本地的文件版本号和MD5值。</p>
<p>同步请求：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</div><div class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;queue&quot;, NULL);</div><div class="line">dispatch_async(queue, ^(void) &#123;</div><div class="line">    </div><div class="line">    HandlerBlock semaphoreBlock = ^(TTSparkRescueCrashType type,NSString *msg)&#123;</div><div class="line">        dispatch_semaphore_signal(semaphore);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    [self getLaunchRequestBlock:semaphoreBlock];</div><div class="line">&#125;);</div><div class="line">    </div><div class="line">dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div></pre></td></tr></table></figure>
<p>请求返回保存本地</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (void)updateLaunchLocalJS:(NSString *)launchJS</div><div class="line">                versionCode:(NSNumber *)versionCode</div></pre></td></tr></table></figure>
<p>执行本地JS代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (void)exvalueBase64Script:(NSString *)base64Script;</div><div class="line">- (void)exvalueRescueScript:(NSString *)jsScript;</div></pre></td></tr></table></figure>
<p>监听是否有执行错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)setJSCrashHanlder:(HandlerBlock)handlerBlock;</div></pre></td></tr></table></figure>
<h4 id="5-2-1-2-启动完成后，使用中"><a href="#5-2-1-2-启动完成后，使用中" class="headerlink" title="5.2.1.2 启动完成后，使用中"></a>5.2.1.2 启动完成后，使用中</h4><p>当到达启动崩溃条件的时候，我们直接执行启动热修复逻辑。启动的时间稍微加长，遇见网络慢的情况用户需要等待的时间就会更久，当然为了避免崩溃这都是必要的。还有，另外的情况是，当用户使用我们的应用的时候，在一个层级比较深的地方操作并出现崩溃，当用户用到这里之前才会崩溃都不会有，这种情况我们依然需要进行热修复。流程类似，为异步。</p>
<h3 id="5-2-2-补丁模拟自测"><a href="#5-2-2-补丁模拟自测" class="headerlink" title="5.2.2 补丁模拟自测"></a>5.2.2 补丁模拟自测</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  测试环节，用一个方法控制开关</div><div class="line"> *  执行测试的testPatch.js,固定命名，测试完毕提交的时候必须关闭</div><div class="line"> *  模拟启动中崩溃,立刻</div><div class="line"> *  模拟启动中延迟崩溃，延迟启动中网络请求返回的默认时间10s</div><div class="line"> *  模拟激活后崩溃,60s</div><div class="line"> */</div><div class="line"></div><div class="line">- (void)setTestPatch:(BOOL)testJsOn simulationCrash:(BOOL)crashOn;</div><div class="line">- (void)simulationLauchCrash;</div><div class="line">- (void)simulationLauchDelayCrash;</div><div class="line">- (void)simulationActiveCrash;</div></pre></td></tr></table></figure>
<h3 id="5-2-2-混淆方式，绕过审核"><a href="#5-2-2-混淆方式，绕过审核" class="headerlink" title="5.2.2 混淆方式，绕过审核"></a>5.2.2 混淆方式，绕过审核</h3><h4 id="5-2-2-1-原理："><a href="#5-2-2-1-原理：" class="headerlink" title="5.2.2.1 原理："></a>5.2.2.1 原理：</h4><p>我们大致判断，苹果审核部检测应用是否使用JSPatch是通过运行时方法名检测。所以通过宏定义替换的方式，我们将与”JSPatch“有关的字段都用混淆的字符串进行宏定义替换，运行时检测到的都是混淆的不可读名称。</p>
<h4 id="5-2-2-2-脚本替换"><a href="#5-2-2-2-脚本替换" class="headerlink" title="5.2.2.2 脚本替换"></a>5.2.2.2 脚本替换</h4><p>shell脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#!/usr/bin/env bash  </div><div class="line"> </div><div class="line">STRING_SYMBOL_FILE=&quot;func.list&quot;  </div><div class="line">HEAD_FILE=&quot;./confuseMacro.h&quot;  </div><div class="line">export LC_CTYPE=C  </div><div class="line"></div><div class="line">ramdomString()  </div><div class="line">&#123;  </div><div class="line">    openssl rand -base64 64 | tr -cd &apos;a-zA-Z&apos; |head -c 16  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">rm -f $HEAD_FILE  </div><div class="line"></div><div class="line">touch $HEAD_FILE</div><div class="line">echo &apos;#ifndef Demo_codeObfuscation_h  </div><div class="line">#define Demo_codeObfuscation_h&apos; &gt;&gt; $HEAD_FILE  </div><div class="line">echo &quot;//confuse string at `date`&quot; &gt;&gt; $HEAD_FILE  </div><div class="line">cat &quot;$STRING_SYMBOL_FILE&quot; | while read -ra line; do  </div><div class="line">    if [[ ! -z &quot;$line&quot; ]]; then  </div><div class="line">        ramdom=`ramdomString`  </div><div class="line">        echo $line $ramdom  </div><div class="line">        echo &quot;#define $line $ramdom&quot; &gt;&gt; $HEAD_FILE  </div><div class="line">    fi  </div><div class="line">done  </div><div class="line">echo &quot;#endif&quot; &gt;&gt; $HEAD_FILE</div></pre></td></tr></table></figure>
<p>宏定义替换结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">#ifndef Demo_codeObfuscation_h  </div><div class="line">#define Demo_codeObfuscation_h</div><div class="line">//confuse string at 2017年 5月 9日 星期二 15时09分20秒 CST</div><div class="line">#define JPEngine zLuEDxRvmBuomcFI</div><div class="line">#define JPExtension IoAZxAmFBjgEOaIg</div><div class="line">#define JPBoxing wzZsoLGKuQUTRFsi</div><div class="line">#define startEngine PRqvWWtwFlXUqdBe</div><div class="line">#define evaluateScriptWithPath cNHrlJKiZyWXkfKo</div><div class="line">#define _evaluateScriptWithPath oDyiimPOHiIWBOEI</div><div class="line">#define addExtensions MbpkqoMunCfIBgxY</div><div class="line">#define defineStruct jIfCtJkMsIshJCvx</div><div class="line">#define formatPointerJSToOC IcHiIjXLjFucrQHR</div><div class="line">#define formatRetainedCFTypeOCToJS lyCjsaHwzQaYUiBE</div><div class="line">#define formatPointerOCToJS DdwjOGMUveuHjYQq</div><div class="line">#define formatJSToOC BBFoPIaVlHRWBNQx</div><div class="line">#define formatOCToJS PHwNpfqmydeeFhMY</div><div class="line">#define TTSparkRescue euibpyTZoKOvrKyO</div><div class="line">#define exvalueBase64Script fcXBLgUPqmsRqIWx</div><div class="line">#define _JSOverideMethods FBOBELKtnClIUhEa</div><div class="line">#define _TMPMemoryPool ysvnOHCwoCVvFwfY</div><div class="line">#define _propKeys cnyhVgwVNuEVAvEp</div><div class="line">#define _JSMethodSignatureCache inrkXDymTFAbwLRo</div><div class="line">#define _JSMethodSignatureLock LmXaTYYBizrQBKzn</div><div class="line">#define _JSMethodForwardCallLock YdmfSXxrtNuKsJkp</div><div class="line">#define _protocolTypeEncodeDict NxHWlKlDFjjgpzYV</div><div class="line">#define _pointersToRelease pybucmDygKyxFMvj</div><div class="line">#define jp_methodSignatureForSelector cyzfrUQNsmWrwIgU</div><div class="line">#define jp_fixMethodSignature vlSNUMpVTTXwTWJl</div><div class="line">#define JPForwardInvocation gflqBWbUOmJHNfcL</div><div class="line">#define JPExecuteORIGForwardInvocation itGMsXKksYYFyCPL</div><div class="line">#define _initJPOverideMethods hpoUXLPSkKsFbHRk</div><div class="line">#define overrideMethod KCgQjNlpCNXOixZS</div><div class="line">#define invokeVariableParameterMethod YITOuEIcAICefCkG</div><div class="line">#define convertJPSelectorString wwttXxSrZoFlmKML</div><div class="line">#define getJSFunctionInObjectHierachy JjRtFUqUREPdZAgY</div><div class="line">#define unboxOCObjectToJS MeVMxsEAmgCokbXc</div><div class="line">#define makePatchRequestAfterLaunch icreqUfezHNyjLdw</div><div class="line">#define setJSCrashHanlder hwsfKTIzZPvTEMmc</div><div class="line">#define getLaunchPatchVersionCode jqRICpprUZpVeKVy</div><div class="line">#define getActivePatchVersionCode zZIvunQsewkyABXu</div><div class="line">#endif</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端持久化存储方案]]></title>
      <url>/2016/08/03/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h2 id="一、持久化方案："><a href="#一、持久化方案：" class="headerlink" title="一、持久化方案："></a>一、持久化方案：</h2><h3 id="1-1-NSUserDefault"><a href="#1-1-NSUserDefault" class="headerlink" title="1.1 NSUserDefault"></a>1.1 NSUserDefault</h3><p>通常用来存储用户偏好设置和应用配置信息，偶尔也会存放一些服务端版本标识数据，比如AB方案的判断开关。它适合小规模的数据，并且这些数据是不具备私密性的。常见的应用启动的时候是否需要展示引导页，就可以在这里设置一个是否已显示过的标志。它的背后实际上是一个特殊的 .plist 文件。</p>
<h3 id="1-2-Keychain"><a href="#1-2-Keychain" class="headerlink" title="1.2 Keychain"></a>1.2 Keychain</h3><p>Keychain 用来存储一些敏感的数据，比如密码，token 等。由于相关的 API 比较底层，我们可以使用对其做了封装的更友好的第三方库，比如 FXKeychain。</p>
<h3 id="1-3-文件"><a href="#1-3-文件" class="headerlink" title="1.3 文件"></a>1.3 文件</h3><p>文件存储一般用于存取媒体文件，包括视频音频图片等。比如iOS端上由于本地资源库没法直接读取视频数据本身，通常会转化到文件里面再进行上传处理。</p>
<h3 id="1-4-Plist"><a href="#1-4-Plist" class="headerlink" title="1.4 Plist"></a>1.4 Plist</h3><p>.plist 文件用来存储小规模的结构化的数据，用到的时候可以很方便的读取。常见的比如“省-城市”数据。但存储对象类型只能是这些：NSData，NSString，NSNumber，NSDate，NSArray，NSDictionary。<br>NSKeyedArchiver：由于 Plist 对存储对象类型的限制，如果想存更大量的，结构更复杂的对象，就可以用归档。只需要自定义的数据类型遵守 NSCoding 协议。</p>
<h3 id="1-5-数据库"><a href="#1-5-数据库" class="headerlink" title="1.5 数据库"></a>1.5 数据库</h3><p>上面提到的几种方案都是很轻量级的，一旦数据量更大，数据结构及关联关系更复杂，需要更频繁和方便的增删改查，我们就需要用上数据库来满足这些需求。本篇涉及的数据包括：GYDataCenter、Core Data、Realm。</p>
<h2 id="二-数据库对比"><a href="#二-数据库对比" class="headerlink" title="二. 数据库对比"></a>二. 数据库对比</h2><h3 id="2-1-CoreData"><a href="#2-1-CoreData" class="headerlink" title="2.1 CoreData"></a>2.1 CoreData</h3><p>Core Data 是 Apple的对象图管理和数据持久化框架。它的底层是通过 SQLite，XML 或二进制文件存储数据的。在数据存储之上，又提供了数据模型的解决方案。可以说它搭起了下层数据和上层对象之间的桥梁，将关系型数据转成对象，并通过对象图组织起来，进行自动管理。同时使得开发者可以面向对象编程。</p>
<p>虽然是苹果自带的数据库方案，但是它常常为人所诟病。不展开对它的使用，因为我们要采用的方案从来都不是它。说说那些列举不完的原因：</p>
<ul>
<li>学习成本高，要很久才能得心应手</li>
<li>对象Schema改变后，数据迁移比较棘手</li>
<li>对于一次大量更新删除等操作效率较低</li>
<li>对主键的支持要自己去维护 </li>
<li>占用内存会高</li>
<li>Context之间的关系和线程之间的处理感到很头痛</li>
<li>多个持久化文件很麻烦</li>
</ul>
<h3 id="2-2-RealM"><a href="#2-2-RealM" class="headerlink" title="2.2 RealM"></a>2.2 RealM</h3><p>在选择替换数据库方案的时候，网上看了很多对realm的赞扬，尤其是在和coredata的对比之下，没有哪里是不完爆的，各种好使各种快速。不过我们还是好好的来理一下他的优缺点。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>使用方便</li>
</ul>
<p>Realm并不是基于SQLite的对象关系映射数据库。它是使用自己的持久化引擎，为简单和速度而生。</p>
<ul>
<li>快</li>
</ul>
<p>零拷贝的设计使得它比其他数据库都更快。</p>
<ul>
<li>跨平台 </li>
<li>优秀的特性</li>
</ul>
<p>如加密，图形查询，轻松的迁移。Realm的API是一个非常适合打造高响应的应用程​​序，并且Realm为我们提供方便的组件。</p>
<p>###</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>关联关系弱</li>
</ul>
<p>对象跟对象之间的一对多关系和多对多关系，并不能映射，需要在双方里面都写上属性，此外还需要在设置的时候两边同时设置。查询时候也是 NSPredicate 也仅仅只支持一些一层的查询，没法做出带SUBQUERY的复杂查询出来。</p>
<ul>
<li>强制内省容错机制导致存储文件不断变大</li>
</ul>
<p>Realm本身感觉有一个数据容错机制。但是这个机制在数据库文件有错误的情况自己修复的时候，会无限增大。官方文档里面有说到会造成这种情形的原因，我在尽我所能的避免问题以后，存储文件还是会有可能不那么夸张的变大一些。</p>
<ul>
<li>没有细粒化通知</li>
</ul>
<p>在某个地方做出修改。 其他地方只知道Realm有修改，但是没法知道我是增加、修改还是删除了数据。不知道我更新的是那一条数据。</p>
<ul>
<li>增加包体积</li>
</ul>
<p>官方说会增加1MB左右的包大小，如果你是一个小体积应用，或者是一个几千万用户的主流应用。</p>
<ul>
<li>核心代码目前闭源</li>
</ul>
<h2 id="2-3-GYDataCenter"><a href="#2-3-GYDataCenter" class="headerlink" title="2.3 GYDataCenter"></a>2.3 GYDataCenter</h2><p>GYDataCenter 是一个 SQLite 数据库框架，提供了一套简单易用的面向对象的数据操作接口，同时保留了 SQL 查询的灵活性。GYDataCenter 简单易上手，相对于 CoreData，GYDataCenter 的学习成本更低。同时，根据自己的需求，开发者可以更方便地划分数据库，设计数据库表，数据库索引等。</p>
<p>GYDataCenter 具有以下特性：</p>
<ul>
<li>面向对象的数据操作接口</li>
<li>使用 SQLite 的 where 语句做为查询条件</li>
<li>自动创建及更新数据库表</li>
<li>高性能 cache 层</li>
<li>faulting 机制（类似 Core Data）</li>
<li>自动批量写入磁盘</li>
<li>使用 ANALYZE 优化查询</li>
</ul>
<h2 id="三、封装GYModelObject"><a href="#三、封装GYModelObject" class="headerlink" title="三、封装GYModelObject"></a>三、封装GYModelObject</h2><p>对比了上述三种数据库之后，决定放弃当前使用的coredata存储方式。另外两种在使用上各有优势，考虑到realm比较重，我们对数据库的要求不高，觉得采用比较轻量级的GYmodel尝试实现存储需求。</p>
<p>GYDataCenter的上手使用非常快，核心点在于继承GYModle然后与对应的数据库建立映射，并且不需要自己手动建立数据库的过程。GY基于FMDB做的封装。具体的使用这里就不展开叙述了，在具体的使用中为了更方便易用，我们讲一下对它的升级。首页我们自定一个Model,它继承自GYModelObject，叫做BaseEntity,以后其他业务使用需要存入数据库的数据，直接继承BaseEntity。</p>
<h3 id="3-1-字典模型转化"><a href="#3-1-字典模型转化" class="headerlink" title="3.1 字典模型转化"></a>3.1 字典模型转化</h3><p>GYModelObject继承自NSObject，拥有基础的读取、查询和保存到数据的接口。但是通常的应用中，原始的Json数据需要转化到模型上使用，参照JSModle的使用，<br>我们给BaseEntity新增两个方法。</p>
<ul>
<li><ul>
<li>(void)updateWithDictionary:(NSDictionary *)dictionary</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (void)updateWithDictionary:(NSDictionary *)dictionary &#123;</div><div class="line">    NSArray *persistentProperties = [[self class] persistentProperties];</div><div class="line">    NSDictionary *propertyTypes = [[self class] propertyTypes];</div><div class="line">    NSDictionary *keyMapping = [[self class] keyMapping];</div><div class="line"></div><div class="line">    for (NSString *modelKey in persistentProperties) &#123;</div><div class="line">        NSString *jsonKey = [keyMapping objectForKey:modelKey];</div><div class="line">        if (!jsonKey) &#123;</div><div class="line">            jsonKey = modelKey;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        id value = [dictionary objectForKey:jsonKey];</div><div class="line">        if (value &amp;&amp; value != [NSNull null]) &#123;</div><div class="line">            GYPropertyType propertyType = [[propertyTypes objectForKey:modelKey] unsignedIntegerValue];</div><div class="line">            if (propertyType == GYPropertyTypeRelationship) &#123;</div><div class="line">                NSAssert([value isKindOfClass:[NSDictionary class]], @&quot;&quot;);</div><div class="line">                Class propertyClass = [[[self class] propertyClasses] objectForKey:modelKey];</div><div class="line">                value = [dictionary ttentity_dictionaryValueForKey:jsonKey defalutValue:nil];</div><div class="line">                if (value) &#123;</div><div class="line">                    value = [propertyClass objectWithDictionary:value];</div><div class="line">                &#125; else &#123;</div><div class="line">                    //value不合法，忽略</div><div class="line">                    NSAssert(NO, @&quot;wrong relation type&quot;);</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            else if (propertyType == GYPropertyTypeInteger) &#123;</div><div class="line">                value = @([dictionary ttentity_longlongValueForKey:jsonKey defaultValue:0]);</div><div class="line">            &#125;</div><div class="line">            else if (propertyType == GYPropertyTypeFloat) &#123;</div><div class="line">                value = @([dictionary ttentity_doubleValueForKey:jsonKey defaultValue:0]);</div><div class="line">            &#125;</div><div class="line">            else if (propertyType == GYPropertyTypeString) &#123;</div><div class="line">                value = [dictionary ttentity_stringValueForKey:jsonKey defaultValue:nil];</div><div class="line">            &#125;</div><div class="line">            else if (propertyType == GYPropertyTypeBoolean) &#123;</div><div class="line">                value = @([dictionary ttentity_boolValueForKey:jsonKey defaultValue:NO]);</div><div class="line">            &#125;</div><div class="line">            else if (propertyType == GYPropertyTypeDate) &#123;</div><div class="line">                if (![value isKindOfClass:[NSDate class]]) &#123;</div><div class="line">                    NSAssert(NO, @&quot;wrong date type&quot;);</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            else if (propertyType == GYPropertyTypeData) &#123;</div><div class="line">                if (![value isKindOfClass:[NSData class]]) &#123;</div><div class="line">                    NSAssert(NO, @&quot;wrong data type&quot;);</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            else if (propertyType == GYPropertyTypeUndefined || propertyType == GYPropertyTypeTransformable) &#123;</div><div class="line">                //NSNumber, NSDictionary, NSArray会走这个分支</div><div class="line">                NSString *className = [GYReflection propertyTypeOfClass:[self class] propertyName:modelKey];</div><div class="line">                Class propertyClass = NSClassFromString(className);</div><div class="line">                if (propertyClass == nil || //取不到时也认为value合法，WenDaInviteData会出现这种情况</div><div class="line">                    [value isKindOfClass:propertyClass] ||</div><div class="line">                    [value isKindOfClass:[NSData class]]) &#123;</div><div class="line">                    // value合法</div><div class="line">                    </div><div class="line">                &#125;</div><div class="line">                else if ([propertyClass isSubclassOfClass:[NSNumber class]] &amp;&amp; [value isKindOfClass:[NSString class]]) &#123;</div><div class="line">                    value = @([(NSString *)value longLongValue]);</div><div class="line">                &#125;</div><div class="line">                else &#123;</div><div class="line">                    //类型不匹配，认为value不合法，忽略赋值</div><div class="line">                    LOGD(@&quot;setWrongTypeValueForKey %@ value %@&quot;, modelKey, value);</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @try &#123;</div><div class="line">                [self setValue:value forKey:modelKey];</div><div class="line">            &#125;</div><div class="line">            @catch (NSException *exception) &#123;</div><div class="line">                NSAssert(NO, @&quot;exception %@&quot;, exception);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><ul>
<li>(NSDictionary *)toDictionary</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (NSDictionary *)toDictionary &#123;</div><div class="line">    NSArray *persistentProperties = [[self class] persistentProperties];</div><div class="line">    NSDictionary *keyMapping = [[self class] keyMapping];</div><div class="line">    </div><div class="line">    NSMutableDictionary *dictionary = [NSMutableDictionary dictionaryWithCapacity:persistentProperties.count];</div><div class="line">    </div><div class="line">    for (NSString *modelKey in persistentProperties) &#123;</div><div class="line">        NSString *jsonKey = [keyMapping objectForKey:modelKey];</div><div class="line">        if (!jsonKey) &#123;</div><div class="line">            jsonKey = modelKey;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        id value = [self valueForKey:modelKey];</div><div class="line">        if (value) &#123;</div><div class="line">            if ([value isKindOfClass:[TTEntityBase class]]) &#123;</div><div class="line">                [dictionary setValue:[value toDictionary] forKey:jsonKey];</div><div class="line">            &#125; else &#123;</div><div class="line">                [dictionary setValue:value forKey:jsonKey];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return dictionary;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-查询"><a href="#3-2-查询" class="headerlink" title="3.2 查询"></a>3.2 查询</h3><ul>
<li>(NSArray <em>)objectsWithQuery:(NSDictionary </em>)query<pre><code>orderBy:(NSString *)orderKey
 offset:(NSInteger)offset
  limit:(NSInteger)limit
</code></pre></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">+ (NSArray *)objectsWithQuery:(NSDictionary *)query orderBy:(NSString *)orderKey offset:(NSInteger)offset limit:(NSInteger)limit &#123;</div><div class="line">    NSMutableString *sql = [[NSMutableString alloc] init];</div><div class="line">    NSMutableArray *arguments = [[NSMutableArray alloc] init];</div><div class="line">    </div><div class="line">    NSArray *allKeys = query.allKeys;</div><div class="line">    NSUInteger count = [allKeys count];</div><div class="line">    </div><div class="line">    for (NSUInteger i = 0; i &lt; count; ++i) &#123;</div><div class="line">        NSString *key = [allKeys objectAtIndex:i];</div><div class="line">        if (i == 0) &#123;</div><div class="line">            [sql appendFormat:@&quot;WHERE %@ = ?&quot;, key];</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            [sql appendFormat:@&quot; AND %@ = ?&quot;, key];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        [arguments addObject:query[key]];</div><div class="line">        //NSLog(@&quot;%@=%@&quot;, key, query[key]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (orderKey.length &gt; 0) &#123;</div><div class="line">        [sql appendFormat:@&quot; ORDER BY %@&quot;, orderKey];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (limit &gt; 0 &amp;&amp; limit &lt; NSIntegerMax) &#123;</div><div class="line">        [sql appendFormat:@&quot; LIMIT %ld OFFSET %ld&quot;, (long)limit, (long)offset];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSArray *results = [self objectsWhere:sql arguments:arguments];</div><div class="line">    return results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-3-size大小"><a href="#3-3-size大小" class="headerlink" title="3.3 size大小"></a>3.3 size大小</h3><ul>
<li>(float)dbSize</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+ (float)dbSize &#123;</div><div class="line">    NSError *error = nil;</div><div class="line">    NSDictionary *fileDictionary = [[NSFileManager defaultManager] attributesOfItemAtPath:[self pathForDbName:[self dbName]] error:&amp;error];</div><div class="line">    if (!error) &#123;</div><div class="line">        float result = [[fileDictionary objectForKey:NSFileSize] floatValue];</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">    return 0.f;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-4-删除"><a href="#3-4-删除" class="headerlink" title="3.4 删除"></a>3.4 删除</h3><ul>
<li>(void)deleteDBFileIfNeeded</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+ (void)deleteDBFileIfNeeded &#123;</div><div class="line">    NSString *key = [NSString stringWithFormat:@&quot;k%@DBVersion&quot;, NSStringFromClass(self)];</div><div class="line">    NSInteger oldNewsDBVersion = [[NSUserDefaults standardUserDefaults] integerForKey:key];</div><div class="line">    NSInteger newsDBVersion = [self dbVersion];</div><div class="line">    </div><div class="line">    // 升级或降级都要删数据库</div><div class="line">    if (newsDBVersion != oldNewsDBVersion) &#123;</div><div class="line">        if (oldNewsDBVersion &gt; 0) &#123;</div><div class="line">            [self deleteDBFile];</div><div class="line">        &#125; else &#123;</div><div class="line">            [[NSUserDefaults standardUserDefaults] setInteger:newsDBVersion forKey:key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>(BOOL)deleteDBFile</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ (BOOL)deleteDBFile &#123;</div><div class="line">    NSString *path = [self pathForDbName:[self dbName]];</div><div class="line">    BOOL ret = YES;</div><div class="line">    </div><div class="line">    if ([[NSFileManager defaultManager] fileExistsAtPath:path]) &#123;</div><div class="line">        ret = [[NSFileManager defaultManager] removeItemAtPath:path error:nil];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (ret) &#123;</div><div class="line">        //dbVersion更新为当前版本</div><div class="line">        NSString *key = [NSString stringWithFormat:@&quot;k%@DBVersion&quot;, NSStringFromClass(self)];</div><div class="line">        [[NSUserDefaults standardUserDefaults] setInteger:[self dbVersion] forKey:key];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-5-使用小结"><a href="#3-5-使用小结" class="headerlink" title="3.5 使用小结"></a>3.5 使用小结</h3><p>使用下来还是比Coredata,更快捷、更方便。原本我们的数据库有点积重难返，每次升级不好管理容易冲突，整个迁移过程中，比较正常顺利，<br>没有因为数据库出现严重的显示问题，bug还很少，且容易追查，对于我们以后数据持久化是一次重大的更新。说一下还有哪些地方不太满足需求的：</p>
<ul>
<li>关联很弱，不同model之间基本没有什么关系</li>
<li>同一model更新保存，其他地方的引用得不到刷新</li>
<li>每次修改数据库存储的字段，需要整体删除原有数据库重新生成新的，带来版本号问题</li>
<li>当数字很大时候，使用NSNumber属性作为存储属性，保存值会出现不正确情况</li>
<li>BaseEntity里面出现子model，需要变为BaseEntity且重写读取方法，包括删除和保存都需要单独调用</li>
</ul>
<p>虽然如此，我们从迁移到目前一直使用着，可见开发中还是没有出现严重问题，对比realm,给我们带来的收益应该会好一点，看到有新的数据库我们还是会尝试。</p>
]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[给表弟的高考志愿推荐]]></title>
      <url>/2016/06/12/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84%E9%AB%98%E8%80%83%E5%BF%97%E6%84%BF%E6%8E%A8%E8%8D%90/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此文针对我表弟16年重庆高考就读普通大学本科专业推荐，推荐凭借自己的社会认识和对众多所在对应专业的同学学习从业动向判定而得，等高考成绩出来了，结合本省排名、个人意向、专业招生人数、专业往年招生分数，可快速定位，带有明显个人色彩。</p>
<h2 id="可选专业"><a href="#可选专业" class="headerlink" title="可选专业"></a>可选专业</h2><h3 id="01学科门类：哲学-（所有门类不考虑）"><a href="#01学科门类：哲学-（所有门类不考虑）" class="headerlink" title="01学科门类：哲学 （所有门类不考虑）"></a>01学科门类：哲学 <font color="blue">（所有门类不考虑）</font></h3><h3 id="02学科门类：经济学-（所有门类可选）"><a href="#02学科门类：经济学-（所有门类可选）" class="headerlink" title="02学科门类：经济学  （所有门类可选）"></a>02学科门类：经济学  <font color="red">（所有门类可选）</font></h3><blockquote>
<p> 0201 经济学类 </p>
</blockquote>
<pre><code>* 020101 经济学

* 020102 经济统计学
</code></pre><blockquote>
<p>0202 财政学类</p>
</blockquote>
<pre><code>* 020201K 财政学

* 020202 税收学
</code></pre><blockquote>
<p>0203 金融学类</p>
</blockquote>
<pre><code>* 020301K 金融学

* 020302 金融工程

* 020303 保险学

* 020304 投资学
</code></pre><blockquote>
<p>0204 经济与贸易类</p>
</blockquote>
<pre><code>* 020401 国际经济与贸易

* 020402 贸易经济
</code></pre><h3 id="03学科门类：法学-（其他门类不考虑）"><a href="#03学科门类：法学-（其他门类不考虑）" class="headerlink" title="03学科门类：法学  （其他门类不考虑）"></a>03学科门类：法学  <font color="blue">（其他门类不考虑）</font></h3><blockquote>
<p>030101K 法学 <font color="red">（可选）</font></p>
</blockquote>
<h3 id="04学科门类：教育学-（所有门类不考虑）"><a href="#04学科门类：教育学-（所有门类不考虑）" class="headerlink" title="04学科门类：教育学  （所有门类不考虑）"></a>04学科门类：教育学  <font color="blue">（所有门类不考虑）</font></h3><h3 id="05学科门类：文学-（其他门类不考虑）"><a href="#05学科门类：文学-（其他门类不考虑）" class="headerlink" title="05学科门类：文学  （其他门类不考虑）"></a>05学科门类：文学  <font color="blue">（其他门类不考虑）</font></h3><blockquote>
<p>0502 外国语言文学类 <font color="red">（可选）</font></p>
<p>0503 新闻传播学类 <font color="red">（可选）</font></p>
</blockquote>
<pre><code>050301 新闻学

050302 广播电视学

050303 广告学

050304 传播学

050305 编辑出版学
</code></pre><h3 id="06学科门类：历史学-（所有门类不考虑）"><a href="#06学科门类：历史学-（所有门类不考虑）" class="headerlink" title="06学科门类：历史学  （所有门类不考虑）"></a>06学科门类：历史学  <font color="blue">（所有门类不考虑）</font></h3><h3 id="07学科门类：理学-（其他门类不考虑）"><a href="#07学科门类：理学-（其他门类不考虑）" class="headerlink" title="07学科门类：理学  （其他门类不考虑）"></a>07学科门类：理学  <font color="blue">（其他门类不考虑）</font></h3><blockquote>
<p>0701 数学类  <font color="red">（可选）</font></p>
</blockquote>
<pre><code>070101 数学与应用数学

070102 信息与计算科学
</code></pre><blockquote>
<p>0712 统计学类 <font color="red">（可选）</font></p>
</blockquote>
<pre><code>071201 统计学

071202 应用统计学
</code></pre><h3 id="08学科门类：工学-（全部门类可选，分程度）"><a href="#08学科门类：工学-（全部门类可选，分程度）" class="headerlink" title="08学科门类：工学 （全部门类可选，分程度）"></a>08学科门类：工学 <font color="red">（全部门类可选，分程度）</font></h3><blockquote>
<p>0801 力学类  <font color="green">（最后）</font></p>
</blockquote>
<pre><code>080101 理论与应用力学
</code></pre><blockquote>
<p>0802 机械类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>080201 机械工程

080202 机械设计制造及其自动化

080203 材料成型及控制工程

080204 机械电子工程

080205 工业设计

080206 过程装备与控制工程

080207 车辆工程

080208 汽车服务工程
</code></pre><blockquote>
<p>0803 仪器类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>080301 测控技术与仪器
</code></pre><blockquote>
<p>0804 材料类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>080401 材料科学与工程

080402 材料物理（注：可授工学或理学学士学位）

080403 材料化学（注：可授工学或理学学士学位）

080404 冶金工程

080405 金属材料工程

080406 无机非金属材料工程

080407 高分子材料与工程

080408 复合材料与工程
</code></pre><blockquote>
<p>0805 能源动力类 <font color="green">（最后）</font></p>
</blockquote>
<pre><code>080501 能源与动力工程
</code></pre><blockquote>
<p>0806 电气类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>080601 电气工程及其自动化
</code></pre><blockquote>
<p>0807 电子信息类 <font color="green">（优先）</font></p>
</blockquote>
<pre><code>080701 电子信息工程（注：可授工学或理学学士学位）

080702 电子科学与技术（注：可授工学或理学学士学位）

080703 通信工程

080704 微电子科学与工程（注：可授工学或理学学士学位）

080705光电信息科学与工程（注：可授工学或理学学士学位）

080706 信息工程
</code></pre><blockquote>
<p>0808 自动化类 <font color="green">（优先）</font></p>
</blockquote>
<pre><code>080801 自动化
</code></pre><blockquote>
<p>0809 计算机类 <font color="green">（优先）</font></p>
</blockquote>
<pre><code>080901 计算机科学与技术（注：可授工学或理学学士学位）

080902 软件工程

080903 网络工程

080904K 信息安全（注：可授工学或理学或管理学学士学位）

080905 物联网工程

080906 数字媒体技术
</code></pre><blockquote>
<p>0810 土木类 <font color="green">（优先）</font></p>
</blockquote>
<pre><code>081001 土木工程

081002 建筑环境与能源应用工程

081003 给排水科学与工程

081004 建筑电气与智能化
</code></pre><blockquote>
<p>0811 水利类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>081101 水利水电工程

081102 水文与水资源工程

081103 港口航道与海岸工程
</code></pre><blockquote>
<p>0812 测绘类 <font color="green">（最后）</font></p>
</blockquote>
<pre><code>081201 测绘工程

081202 遥感科学与技术
</code></pre><blockquote>
<p>0813 化工与制药类 <font color="green">（最后）</font></p>
</blockquote>
<pre><code>081301 化学工程与工艺

081302 制药工程
</code></pre><blockquote>
<p>0814 地质类 <font color="green">（最后）</font></p>
</blockquote>
<pre><code>081401 地质工程

081402 勘查技术与工程

081403 资源勘查工程
</code></pre><blockquote>
<p>0815 矿业类 <font color="green">（最后）</font></p>
</blockquote>
<pre><code>081501 采矿工程

081502 石油工程

081503 矿物加工工程

081504 油气储运工程
</code></pre><blockquote>
<p>0816 纺织类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>081601 纺织工程

081602 服装设计与工程（注：可授工学或艺术学学士学位）
</code></pre><blockquote>
<p>0817 轻工类 <font color="green">（最后）</font></p>
</blockquote>
<pre><code>081701 轻化工程

081702 包装工程

081703 印刷工程
</code></pre><blockquote>
<p>0818 交通运输类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>081801 交通运输

081802 交通工程

081803K 航海技术

081804K 轮机工程

081805K 飞行技术
</code></pre><blockquote>
<p>0819 海洋工程类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>081901 船舶与海洋工程
</code></pre><blockquote>
<p>0820 航空航天类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>082001 航空航天工程

082002 飞行器设计与工程

082003 飞行器制造工程

082004 飞行器动力工程

082005 飞行器环境与生命保障工程
</code></pre><blockquote>
<p>0821 兵器类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>082101 武器系统与工程

082102 武器发射工程

082103 探测制导与控制技术

082104 弹药工程与爆炸技术

082105 特种能源技术与工程

082106 装甲车辆工程

082107 信息对抗技术
</code></pre><blockquote>
<p>0822 核工程类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>082201 核工程与核技术

082202 辐射防护与核安全

082203 工程物理

082204 核化工与核燃料工程
</code></pre><blockquote>
<p>0823 农业工程类 <font color="green">（最后）</font></p>
</blockquote>
<pre><code>082301 农业工程

082302 农业机械化及其自动化

082303 农业电气化

082304 农业建筑环境与能源工程

082305 农业水利工程
</code></pre><blockquote>
<p>0824 林业工程类 <font color="green">（最后）</font></p>
</blockquote>
<pre><code>082401 森林工程

082402 木材科学与工程

082403 林产化工
</code></pre><blockquote>
<p>0825 环境科学与工程类 <font color="green">（最后）</font></p>
</blockquote>
<pre><code>082501 环境科学与工程

082502 环境工程

082503 环境科学（注：可授工学或理学学士学位）

082504 环境生态工程
</code></pre><blockquote>
<p>0826 生物医学工程类<font color="green">（最后）</font></p>
</blockquote>
<pre><code>082601 生物医学工程（注：可授工学或理学学士学位）
</code></pre><blockquote>
<p>0827 食品科学与工程类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>082701 食品科学与工程（注：可授工学或农学学士学位）

082702 食品质量与安全

082703 粮食工程

082704 乳品工程

082705 酿酒工程
</code></pre><blockquote>
<p>0828 建筑类 <font color="green">（优先）</font></p>
</blockquote>
<pre><code>082801 建筑学

082802 城乡规划

082803 风景园林（注：可授工学或艺术学学士学位）
</code></pre><blockquote>
<p>0829 安全科学与工程类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>082901 安全工程
</code></pre><blockquote>
<p>0830 生物工程类 <font color="green">（最后）</font></p>
</blockquote>
<pre><code>083001 生物工程
</code></pre><blockquote>
<p>0831 公安技术类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>083101K 刑事科学技术

083102K 消防工程
</code></pre><h3 id="09学科门类：农学-（所有门类不考虑）"><a href="#09学科门类：农学-（所有门类不考虑）" class="headerlink" title="09学科门类：农学 （所有门类不考虑）"></a>09学科门类：农学 <font color="blue">（所有门类不考虑）</font></h3><h3 id="10学科门类：医学-（所有门类可考虑，分程度）"><a href="#10学科门类：医学-（所有门类可考虑，分程度）" class="headerlink" title="10学科门类：医学 （所有门类可考虑，分程度）"></a>10学科门类：医学 <font color="red">（所有门类可考虑，分程度）</font></h3><blockquote>
<p>1001 基础医学类  <font color="green">（其次）</font></p>
</blockquote>
<pre><code>100101K 基础医学
</code></pre><blockquote>
<p>1002 临床医学类 <font color="green">（优先）</font></p>
</blockquote>
<pre><code>100201K 临床医学
</code></pre><blockquote>
<p>1003 口腔医学类 <font color="green">（优先）</font></p>
</blockquote>
<pre><code>100301K 口腔医学
</code></pre><blockquote>
<p>1004 公共卫生与预防医学类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>100401K 预防医学

100402 食品卫生与营养学
</code></pre><blockquote>
<p>1005 其次医学类 <font color="green">（最后）</font></p>
</blockquote>
<pre><code>100501K 其次医学

100502K 针灸推拿学

100503K 藏医学

100504K 蒙医学

100505K 维医学

100506K 壮医学

100507K 哈医学
</code></pre><blockquote>
<p>1006 其次西医结合类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>100601K 其次西医临床医学
</code></pre><blockquote>
<p>1007 药学类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code> 100701 药学

100702 药物制剂
</code></pre><blockquote>
<p>1008 其次药学类 <font color="green">（最后）</font></p>
</blockquote>
<pre><code>100801 其次药学

100802 其次药资源与开发
</code></pre><blockquote>
<p>1009 法医学类 <font color="green">（其次）</font></p>
<p>1010 医学技术类 <font color="green">（其次）</font></p>
</blockquote>
<pre><code>101001 医学检验技术

101002 医学实验技术

101003 医学影像技术

101004 眼视光学

101005 康复治疗学

101006 口腔医学技术

101007 卫生检验与检疫
</code></pre><blockquote>
<p>1011 护理学类 <font color="green">（最后）</font></p>
</blockquote>
<pre><code>101101 护理学
</code></pre><h3 id="12学科门类：管理学-（其他门类不考虑）"><a href="#12学科门类：管理学-（其他门类不考虑）" class="headerlink" title="12学科门类：管理学 （其他门类不考虑）"></a>12学科门类：管理学 <font color="blue">（其他门类不考虑）</font></h3><blockquote>
<p>1201 管理科学与工程类  <font color="red">（可选）</font></p>
</blockquote>
<pre><code>120101 管理科学

120102 信息管理与信息系统

120103 工程管理

120104 房地产开发与管理

120105 工程造价
</code></pre><blockquote>
<p>1202 工商管理类  <font color="red">（可选）</font></p>
</blockquote>
<pre><code>120201K 工商管理

120202 市场营销

120203K 会计学

120204 财务管理

120205 国际商务

120206 人力资源管理

120207 审计学

120208 资产评估
120209 物业管理

120210 文化产业管理
</code></pre><h3 id="13学科门类：艺术学-（其他门类不考虑）"><a href="#13学科门类：艺术学-（其他门类不考虑）" class="headerlink" title="13学科门类：艺术学   （其他门类不考虑）"></a>13学科门类：艺术学   <font color="blue">（其他门类不考虑）</font></h3><blockquote>
<p>1305 设计学类 <font color="red">（可选）</font></p>
</blockquote>
<pre><code>130501 艺术设计学

130502 视觉传达设计

130503 环境设计

130504 产品设计

130505 服装与服饰设计

130506 公共艺术

130507 工艺美术

130508 数字媒体艺术
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 高考 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iweb 峰会]]></title>
      <url>/2016/05/12/iweb%20%E5%B3%B0%E4%BC%9A/</url>
      <content type="html"><![CDATA[<p>16年的时候，赶上周末去参加了一趟北京的iweb峰会，会上来自各个公司的人分享和宣传自己的产品和技术，我作为一名普通开发者的角度去听大会，并了解和记录当前的一些技术发展。 </p>
<h2 id="一、主题峰会-9-00-–-12-00"><a href="#一、主题峰会-9-00-–-12-00" class="headerlink" title="一、主题峰会 9:00 – 12:00"></a>一、主题峰会 9:00 – 12:00</h2><h4 id="1、主持人开场-–-田爱娜-HTML5梦工场-创始人"><a href="#1、主持人开场-–-田爱娜-HTML5梦工场-创始人" class="headerlink" title="1、主持人开场    – 田爱娜 HTML5梦工场  创始人"></a>1、主持人开场    – 田爱娜 HTML5梦工场  创始人</h4><p>HTML5梦工场是中国最有影响力的技术社区团队，由国内最早一批HTML5探索者和狂热拥护者发起，为广大开发者搭建一个开放、自由的互动交流平台，旨在推动HTML5在中国的应用与普及。“梦工场”也被誉为最接地气的草根公益组织。</p>
<h4 id="2、HTML5发行的力量-–-凌海-蝴蝶互动-CEO"><a href="#2、HTML5发行的力量-–-凌海-蝴蝶互动-CEO" class="headerlink" title="2、HTML5发行的力量    – 凌海  蝴蝶互动  CEO"></a>2、HTML5发行的力量    – 凌海  蝴蝶互动  CEO</h4><p>公司的创始人凌海、王峰都来自于中国互联网上市公司核心高管，有业界极为丰富的互联网产品经验和创新精神。凌海曾任盛大集团高级副总裁，盛大游戏总 裁，韩国上市公司ACTOZ董事长。王峰曾任盛大游戏技术副总裁。<br>《传世H5》工作室组建于2015年初，由策划团队、美术团队、技术研发团队、运营团队、测试团队等组成。<br>除了《传世H5》蝴蝶互动又相继推出了《鬼吹灯》、《天天赚钱》、《蛮荒创世》等优秀的HTML5游戏，收到用户和业界的不断好评，之后蝴蝶互动即将推出《武 神》、《鹿鼎记》等。</p>
<h4 id="3、天下武功，唯快不破-–-陈书艺-白鹭时代-CEO"><a href="#3、天下武功，唯快不破-–-陈书艺-白鹭时代-CEO" class="headerlink" title="3、天下武功，唯快不破 – 陈书艺 白鹭时代  CEO"></a>3、天下武功，唯快不破 – 陈书艺 白鹭时代  CEO</h4><p>白鹭移动游戏解决方案包含白鹭引擎、工具和白鹭开放平台，提供从游戏开发、上线到商业化运营的一站式免费服务。白鹭引擎（Egret Engine）、HTML5加速器(Egret Runtime)、骨骼动画工具(Dragon Bones)、可视化编辑器(Egret Wing)等共计14款核心产品，可以帮助开发者高效地开发出HTML5游戏。白鹭开放平台联动开发者、发行商、渠道商、第三方服务商，让HTML5游戏实现了从开发、上线到商业化运营生态连线，并且让所有技术服务和商业化服务，得以落地。案例：围住神经猫、访问量三天过亿</p>
<h4 id="4、-社交生态下的HTML5游戏新契-–-王哲-触控科技副总裁"><a href="#4、-社交生态下的HTML5游戏新契-–-王哲-触控科技副总裁" class="headerlink" title="4、    社交生态下的HTML5游戏新契 – 王哲 触控科技副总裁"></a>4、    社交生态下的HTML5游戏新契 – 王哲 触控科技副总裁</h4><p>公司起步于2008年初创建的CocoaChina社区，专注于苹果产品和iOS系统开发。2010年11月12日触控科技正式组建团队，并在之后2年间获得北极光、迪士尼思伟创投、红杉创投以及纪源资本（GGV）的风险投资，融资总规模3200万美金。2011年凭借一款《捕鱼达人》游戏一战成名。</p>
<h4 id="5、-HTML5和Docker容器如何重构和颠覆应用产业-–-李明-很快-创始人兼CEO"><a href="#5、-HTML5和Docker容器如何重构和颠覆应用产业-–-李明-很快-创始人兼CEO" class="headerlink" title="5、 HTML5和Docker容器如何重构和颠覆应用产业 – 李明 很快  创始人兼CEO"></a>5、 HTML5和Docker容器如何重构和颠覆应用产业 – 李明 很快  创始人兼CEO</h4><h4 id="6、WeX5移动开发云-马科-CEO"><a href="#6、WeX5移动开发云-马科-CEO" class="headerlink" title="6、WeX5移动开发云 马科 CEO"></a>6、WeX5移动开发云 马科 CEO</h4><p>WeX5开发H5 app，遵循Apache开源协议，完全开源免费，上百个组件框架，全部开放，可视化的组件框架，开发者可自定义组件，集成第三方组件，采用MVC设计模式，数据和视图分离，页面描述和代码逻辑分离，支持浏览器调试、真机调试、原生调试，等多种调试模式，开发者可掌握每一行代码。WeX5一直坚持采用H5+CSS3+JS标准技术，一次开发，多端任意部署.</p>
<h4 id="7、-Web-前端的实时化-–-江小丹-英特尔-Web技术研发总监"><a href="#7、-Web-前端的实时化-–-江小丹-英特尔-Web技术研发总监" class="headerlink" title="7、 Web 前端的实时化 – 江小丹 英特尔  Web技术研发总监"></a>7、 Web 前端的实时化 – 江小丹 英特尔  Web技术研发总监</h4><h4 id="8、移动互联网下半场，不用好HTML5将无法生存-–-肖光宇-野狗实时后端云-联合创始人"><a href="#8、移动互联网下半场，不用好HTML5将无法生存-–-肖光宇-野狗实时后端云-联合创始人" class="headerlink" title="8、移动互联网下半场，不用好HTML5将无法生存 – 肖光宇 野狗实时后端云  联合创始人"></a>8、移动互联网下半场，不用好HTML5将无法生存 – 肖光宇 野狗实时后端云  联合创始人</h4><p>实时通信—包括消息订阅，推送，双向通信等功能。网络延迟小，服务响应速度快，API简单易用。<br>数据存储—提供了一个Key-Value的云端数据存储，直接通过API就可以对数据进行存取操作。操作简单，按需扩展。</p>
<h4 id="9、-H5游戏进入精品新时代-—-王安-Dcloud-CEO"><a href="#9、-H5游戏进入精品新时代-—-王安-Dcloud-CEO" class="headerlink" title="9、 H5游戏进入精品新时代 — 王安 Dcloud CEO"></a>9、 H5游戏进入精品新时代 — 王安 Dcloud CEO</h4><p>DCloud面向HTML5行业分别推出了开发工具HBuilder、手机强化引擎5+ Runtime、跨平台前端框架mui、应用发行产品流应用，通过系列产品对HTML5的强化支持，使得HTML5能达到原生的功能和体验，同时在发行上更优于原生应用。</p>
<p>类似 : APICloud</p>
<h4 id="10-、谢成鸿-LayaBox-CEO"><a href="#10-、谢成鸿-LayaBox-CEO" class="headerlink" title="10 、谢成鸿 LayaBox  CEO"></a>10 、谢成鸿 LayaBox  CEO</h4><p>Layabox是HTML5引擎之一，引擎以HTML5技术为核心，定位于全平台的高性能引擎，让游戏开发者一次开发，可同时发布APP、HTML5、VR、Flash版本。开发语言支持Flash AS3、JavaScript、TypeScript三种，让开发者人才选择范围更广泛。引擎核心库仅100K左右，除了大型游戏和小型游戏、还可以用于HTML5应用、APP、广告、营销、教育、3D、VR等众多领域。另外，LayaPlayer运行器移动设备安装量覆盖超5亿，帮助Layabox引擎的开发者进行产品发行。<br>  Layabox是Laya中国实验室历经4年倾力打造的全球顶级HTML5技术框架，核心产品包括：Flash开发H5的框架（LayaFlash）、多语言H5开发引擎（LayaAir）、H5运行器（LayaPlayer）、嵌入式H5应用商店（LayaStore）。</p>
<h2 id="二、应用工具专场1-13：30-–-17：00"><a href="#二、应用工具专场1-13：30-–-17：00" class="headerlink" title="二、应用工具专场1 13：30 – 17：00"></a>二、应用工具专场1 13：30 – 17：00</h2><h4 id="1、HTML5-App开发云实践-基于完全开源的WeX5开发框架"><a href="#1、HTML5-App开发云实践-基于完全开源的WeX5开发框架" class="headerlink" title="1、HTML5 App开发云实践-基于完全开源的WeX5开发框架"></a>1、HTML5 App开发云实践-基于完全开源的WeX5开发框架</h4><p>王洁 WeX5  首席技术运营</p>
<h4 id="2、-Web技术推进多样化人机交互方式"><a href="#2、-Web技术推进多样化人机交互方式" class="headerlink" title="2、 Web技术推进多样化人机交互方式"></a>2、 Web技术推进多样化人机交互方式</h4><p>吴栋霞 英特尔  软件工程师</p>
<h4 id="3、-Yo-去哪儿移动UI框架"><a href="#3、-Yo-去哪儿移动UI框架" class="headerlink" title="3、 Yo-去哪儿移动UI框架"></a>3、 Yo-去哪儿移动UI框架</h4><p>杜瑶 去哪儿网  前端开发总监</p>
<h4 id="4、-手机QQ-React-Web极致优化"><a href="#4、-手机QQ-React-Web极致优化" class="headerlink" title="4、 手机QQ React Web极致优化"></a>4、 手机QQ React Web极致优化</h4><p>李成熙 腾讯AlloyTeam  前端工程师</p>
<h4 id="5、-手机淘宝营销互动页面最佳实践"><a href="#5、-手机淘宝营销互动页面最佳实践" class="headerlink" title="5、 手机淘宝营销互动页面最佳实践"></a>5、 手机淘宝营销互动页面最佳实践</h4><p>黄华健  阿里巴巴  前端工程师</p>
<h4 id="6、大型SPA的复杂工程如何化简"><a href="#6、大型SPA的复杂工程如何化简" class="headerlink" title="6、大型SPA的复杂工程如何化简"></a>6、大型SPA的复杂工程如何化简</h4><p>陈恺睿 小米  高级前端工程师</p>
<h4 id="7、-UC前端业务套件体系"><a href="#7、-UC前端业务套件体系" class="headerlink" title="7、 UC前端业务套件体系"></a>7、 UC前端业务套件体系</h4><p>三桥 阿里巴巴UC移动事业群  高级前端工程师</p>
<h2 id="三、应用工具专场2-13：30-–-17：00"><a href="#三、应用工具专场2-13：30-–-17：00" class="headerlink" title="三、应用工具专场2 13：30 – 17：00"></a>三、应用工具专场2 13：30 – 17：00</h2><h4 id="1、Web-Components-—-Web-前端开发的未来趋势"><a href="#1、Web-Components-—-Web-前端开发的未来趋势" class="headerlink" title="1、Web Components — Web 前端开发的未来趋势"></a>1、Web Components — Web 前端开发的未来趋势</h4><p>1、陈本峰 云适配  创始人兼CEO</p>
<p>云适配由前微软美国总部专家、美通云动（北京）科技公司CEO陈本峰在美国西雅图研发，只需在原网站中插入一行代码，即能创建移动化网站，并实现网址不变、内容实时更新，它颠覆了传统手工移动网站建设模式，可快速打开移动营销六大入口。</p>
<p>2、 web  Components : </p>
<p>组件化给前端开发带来了极大的效率提升，组件化的UI框架也因此层出不穷，从EXTJs、YUI到 jQuery UI ，再到 Bootstrap、React、Ratchet、Ionic等等等等等等，几乎每年都有很多新的UI框架冒出来，它们或者借鉴或者颠覆其他已存在的框架。简单对比一下就会发现这些框架的很大一部分模块在功能上是重合的，但也仅仅在功能层面重合，代码层面确完全不兼容。</p>
<p>Web Components 的出现给组件标准化带来了很好的契机：</p>
<p>WEB组件目前仍然依靠各种类似”Hack”的方式来模拟，模拟方式也各有不同，很难统一和标准化，而 Web Components 则直接提供了标准化的组件定义方式，这是组件标准化的基石，使得未来的组件能够统一创建、方法调用、事件监听、属性访问等。<br>基于标准化的组件定义方式，我们便可以像W3C等标准组织一样来定义组件标准，无需再依赖、等待“内置”组件，这也使得我们获得了“渔”的能力</p>
<h4 id="2、语音智能与H5的结合"><a href="#2、语音智能与H5的结合" class="headerlink" title="2、语音智能与H5的结合"></a>2、语音智能与H5的结合</h4><p>陈家军 科大讯飞  云平台事业部研发主管</p>
<h4 id="3、-浅析HTML5中的无障碍标签及用处"><a href="#3、-浅析HTML5中的无障碍标签及用处" class="headerlink" title="3、 浅析HTML5中的无障碍标签及用处"></a>3、 浅析HTML5中的无障碍标签及用处</h4><p>张昆 中国信息无障碍产品联盟  首席专家</p>
<h4 id="4、HTML5多屏互动平台实践"><a href="#4、HTML5多屏互动平台实践" class="headerlink" title="4、HTML5多屏互动平台实践"></a>4、HTML5多屏互动平台实践</h4><p>苏震巍 苏州盛派网络  CEO</p>
<h4 id="5、iWeb-议题：Weex-开发者工具探究"><a href="#5、iWeb-议题：Weex-开发者工具探究" class="headerlink" title="5、iWeb 议题：Weex 开发者工具探究"></a>5、iWeb 议题：Weex 开发者工具探究</h4><p>勾三股四（阿里巴巴 前端工程师）、梧叶（阿里巴巴 高级技术专家）</p>
<p>手淘和天猫曾经尝试过React Native，然后放弃了。但是把它的思想吸收过来，结合Web Component和Vue.js，然后就成了Weex.</p>
<h4 id="6、小米应用商店Hybrid性能优化实践"><a href="#6、小米应用商店Hybrid性能优化实践" class="headerlink" title="6、小米应用商店Hybrid性能优化实践"></a>6、小米应用商店Hybrid性能优化实践</h4><p>杨伟贤 小米  高级前端工程师</p>
<h4 id="7、Vue-js从入门到上线"><a href="#7、Vue-js从入门到上线" class="headerlink" title="7、Vue.js从入门到上线"></a>7、Vue.js从入门到上线</h4><p>陈陆扬 精雕细课  前端负责人</p>
<h2 id="四、游戏专场1-13：30-–-17：00"><a href="#四、游戏专场1-13：30-–-17：00" class="headerlink" title="四、游戏专场1 13：30 – 17：00"></a>四、游戏专场1 13：30 – 17：00</h2><h4 id="1、文学连接游戏-阅文集团“泛娱乐2-0”迎接H5领域新时代"><a href="#1、文学连接游戏-阅文集团“泛娱乐2-0”迎接H5领域新时代" class="headerlink" title="1、文学连接游戏 阅文集团“泛娱乐2.0”迎接H5领域新时代"></a>1、文学连接游戏 阅文集团“泛娱乐2.0”迎接H5领域新时代</h4><p>朱靖 阅文集团  副总裁</p>
<p>腾讯COO任宇昕与副总裁程武宣布正式成立阅文集团，统一管理和运营原本属于盛大文学和腾讯文学旗下的起点中文网、创世中文网、小说阅读网、潇湘书院、红袖添香、云起书院、榕树下、QQ阅读、中智博文、华文天下等网文品牌。</p>
<h4 id="2、Cocos-Creator：全面提升-H5-游戏的开发和运行速度"><a href="#2、Cocos-Creator：全面提升-H5-游戏的开发和运行速度" class="headerlink" title="2、Cocos Creator：全面提升 H5 游戏的开发和运行速度"></a>2、Cocos Creator：全面提升 H5 游戏的开发和运行速度</h4><p>王楠 触控科技  产品总监</p>
<p>Cocos Creator 是以内容创作为核心的游戏开发工具，在 Cocos2d-x 基础上实现了彻底脚本化、组件化和数据驱动等特点</p>
<h4 id="3、快创互娱，人人都是HTML5游戏创想家"><a href="#3、快创互娱，人人都是HTML5游戏创想家" class="headerlink" title="3、快创互娱，人人都是HTML5游戏创想家"></a>3、快创互娱，人人都是HTML5游戏创想家</h4><p>段会锋 快创互娱  合伙人兼技术副总</p>
<p>快创互娱是由大连文森软件特科技有限公司设计开发的一款HTML5在线开发平台。快创互娱是一款可视化、零代码、拖拽式编程的在线开发平台，基于HTML5及MIT开源协议，具有跨平台的强大性能。使用者可通过鼠标拖拽的简单方法，创造属于自己的故事、动画、游戏、课件，同时一键分享，轻松将作品上传至网络。</p>
<h4 id="4、Yahoo-Y5平台飛躍出海、強勢出航！"><a href="#4、Yahoo-Y5平台飛躍出海、強勢出航！" class="headerlink" title="4、Yahoo Y5平台飛躍出海、強勢出航！"></a>4、Yahoo Y5平台飛躍出海、強勢出航！</h4><p>赖俊光 Yahoo台湾与香港游戏频道   负责人</p>
<h4 id="5、发行和渠道为什么推那个产品"><a href="#5、发行和渠道为什么推那个产品" class="headerlink" title="5、发行和渠道为什么推那个产品"></a>5、发行和渠道为什么推那个产品</h4><p>李力维 独角兽游戏  CEO</p>
<h4 id="6、腾讯浏览服务，鼎力服务H5游戏生态"><a href="#6、腾讯浏览服务，鼎力服务H5游戏生态" class="headerlink" title="6、腾讯浏览服务，鼎力服务H5游戏生态"></a>6、腾讯浏览服务，鼎力服务H5游戏生态</h4><p>魏晓海 腾讯浏览器  内核开发总监技术专家</p>
<h4 id="7、H5游戏2-0时代到来"><a href="#7、H5游戏2-0时代到来" class="headerlink" title="7、H5游戏2.0时代到来"></a>7、H5游戏2.0时代到来</h4><p>姬海江 交叉点  CEO   一个外包公司</p>
<h2 id="五、游戏专场2-13：30-–-17：00"><a href="#五、游戏专场2-13：30-–-17：00" class="headerlink" title="五、游戏专场2 13：30 – 17：00"></a>五、游戏专场2 13：30 – 17：00</h2><h4 id="1、约三端，战未来"><a href="#1、约三端，战未来" class="headerlink" title="1、约三端，战未来"></a>1、约三端，战未来</h4><p>汪阔 Layabox  技术副总裁</p>
<h4 id="2、《小小战争》的设计经验分享"><a href="#2、《小小战争》的设计经验分享" class="headerlink" title="2、《小小战争》的设计经验分享"></a>2、《小小战争》的设计经验分享</h4><p>李瑞峰 圣堂科技  CEO     H5策略游戏</p>
<h4 id="3、H5游戏的未来发展"><a href="#3、H5游戏的未来发展" class="headerlink" title="3、H5游戏的未来发展"></a>3、H5游戏的未来发展</h4><p>赵鹏 横石科技  副总裁 在线网页游戏《弑沙》</p>
<h4 id="4、Lie-to-Me—聊聊HTML5多人实时在线游戏的优化"><a href="#4、Lie-to-Me—聊聊HTML5多人实时在线游戏的优化" class="headerlink" title="4、Lie to Me—聊聊HTML5多人实时在线游戏的优化"></a>4、Lie to Me—聊聊HTML5多人实时在线游戏的优化</h4><p>大城小胖  自由程序员 </p>
<p><a href="http://weibo.com/finscn?is_hot=1" target="_blank" rel="external">http://weibo.com/finscn?is_hot=1</a></p>
<p><a href="https://github.com/finscn" target="_blank" rel="external">https://github.com/finscn</a></p>
<h4 id="5、强化渠道产品联动，升级用户游戏体验"><a href="#5、强化渠道产品联动，升级用户游戏体验" class="headerlink" title="5、强化渠道产品联动，升级用户游戏体验"></a>5、强化渠道产品联动，升级用户游戏体验</h4><p>林玮 北京游琥科技  副总经理</p>
<h4 id="6、从市场角度分析H5游戏该如何立项"><a href="#6、从市场角度分析H5游戏该如何立项" class="headerlink" title="6、从市场角度分析H5游戏该如何立项"></a>6、从市场角度分析H5游戏该如何立项</h4><p>谭德文 上海越山科技  CEO</p>
<h4 id="7、H5游戏的困境和破局"><a href="#7、H5游戏的困境和破局" class="headerlink" title="7、H5游戏的困境和破局"></a>7、H5游戏的困境和破局</h4><p>黄加阳 9G游戏  CEO</p>
<h2 id="六、数字营销专场-13：30-–-17：00"><a href="#六、数字营销专场-13：30-–-17：00" class="headerlink" title="六、数字营销专场 13：30 – 17：00"></a>六、数字营销专场 13：30 – 17：00</h2><h4 id="1、后营销时代：借H5实现“移动互联网"><a href="#1、后营销时代：借H5实现“移动互联网" class="headerlink" title="1、后营销时代：借H5实现“移动互联网+"></a>1、后营销时代：借H5实现“移动互联网+</h4><p>张翔 白鹭时代、青雀移动  联合创始人、总经理</p>
<h4 id="2、-共享创赢移动网页大平台"><a href="#2、-共享创赢移动网页大平台" class="headerlink" title="2、    共享创赢移动网页大平台"></a>2、    共享创赢移动网页大平台</h4><p>马岳 Google  商业合作部行业总监</p>
<h4 id="3、-裂变·营销闭环·H5生态"><a href="#3、-裂变·营销闭环·H5生态" class="headerlink" title="3、    裂变·营销闭环·H5生态"></a>3、    裂变·营销闭环·H5生态</h4><p>刘旭 易企秀  联合创始人兼副总裁</p>
<p>易企秀是一款针对移动互联网营销的手机幻灯片、H5场景应用制作工具，将原来只能在PC端制作和展示的各类复杂营销方案转移到更为便携和展示的手机上，用户随时随地根据自己的需要在PC端、手机端进行制作和展示，随时随地营销。</p>
<h4 id="4、-喵葩：天猫电商互动技术新思路"><a href="#4、-喵葩：天猫电商互动技术新思路" class="headerlink" title="4、    喵葩：天猫电商互动技术新思路"></a>4、    喵葩：天猫电商互动技术新思路</h4><p>续彬 天猫  高级技术专家</p>
<h4 id="5、-网络营销未来的五大发展趋势"><a href="#5、-网络营销未来的五大发展趋势" class="headerlink" title="5、    网络营销未来的五大发展趋势"></a>5、    网络营销未来的五大发展趋势</h4><p>葛甲 北京蓝时代  互联网分析师，自媒体人</p>
<h4 id="6、-H5数字营销的技术痛点"><a href="#6、-H5数字营销的技术痛点" class="headerlink" title="6、    H5数字营销的技术痛点"></a>6、    H5数字营销的技术痛点</h4><p>余悠 跳跳糖创意  CEO</p>
<h4 id="7、-纽约广告节最佳数字营销作品赏析"><a href="#7、-纽约广告节最佳数字营销作品赏析" class="headerlink" title="7、    纽约广告节最佳数字营销作品赏析"></a>7、    纽约广告节最佳数字营销作品赏析</h4><p>吴金君<br>纽约广告节  中国首席代表</p>
]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AVFoundation视频开发总结]]></title>
      <url>/2016/03/28/%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>AVFoundation是为数不多的几个框架,您可以使用和创建基于时间的视听媒体。它提供了一个objective - c接口用于工作与基于时间的视听数据详细的级别。例如,您可以使用它来检查,创建、编辑或reencode媒体文件。你也可以输入流从设备和操作视频实时捕捉和回放。</p>
<h2 id="一、概念引导："><a href="#一、概念引导：" class="headerlink" title="一、概念引导："></a>一、概念引导：</h2><h3 id="1、ASSets媒体文件"><a href="#1、ASSets媒体文件" class="headerlink" title="1、ASSets媒体文件:"></a>1、ASSets媒体文件:</h3><p>1）AVAsset</p>
<p>一个抽象类来表示时间等视听媒体视频和声音。每个资产包含一组跟踪旨在呈现或加工在一起,一个统一的媒体类型,包括但不限于音频、视频、文本、关闭字幕,字幕。</p>
<p>AVURLAsset *anAsset = [[AVURLAsset alloc] initWithURL:url options:nil];属性有<br>tracks、duration、preferredVolume、preferredTransform等等。</p>
<p>2) 一个AVAssetTrack</p>
<p>对象提供了所有资产提供track-level检查接口,方便对ASSets进行更具体的属性获取以及对应的操作。</p>
<p>3）AVAssetImageGenerator</p>
<p>对象提供缩略图或预览图像的资产独立于回放，可以生成单独的图片，也可以生成图片队列，这是获取视频缩略图的方式之一，还有另外两种ALAsset的thumbnail 和 - (UIImage *)imageFromSampleBuffer:(CMSampleBufferRef)sampleBuffer。</p>
<p>4）AVAssetExportSession</p>
<p>针对AVAsset源对象的内容进行转码，创建一个被指定输出形式的资源。</p>
<p><img src="/assets/images/AVAssetExportSession.jpg" alt=""></p>
<h3 id="2、Playback播放控制"><a href="#2、Playback播放控制" class="headerlink" title="2、Playback播放控制:"></a>2、Playback播放控制:</h3><p>1) AVPlayer</p>
<p>你使用一个AVPlayer对象来实现控制器和用户接口单一或多种条目回放。</p>
<ul>
<li><p>-  (instancetype)initWithPlayerItem:(AVPlayerItem *)item</p>
</li>
<li><p>play 、 parse 、 end</p>
</li>
<li><p>- (void)seekToTime:(CMTime)time</p>
</li>
</ul>
<p>2) AVPlayerLayer</p>
<p>用于显示视频内容，相当于大屏幕。里面有videoGravity，默认值 AVLayerVideoGravityResizeAspect.</p>
<p>3) AVPlayerItem</p>
<p>一个AVPlayerItem代表资产的表现状态,由一个AVPlayer对象和可以观察到的状态。对视频播放状态修改一起监听的过程多数发生在正对这个对象的操作操作上，比如：</p>
<ul>
<li>seekToTime，从哪里开始播放</li>
<li>各种资源播放状态的通知AVPlayerItemFailedToPlayToEndTimeNotification<br>等</li>
</ul>
<p>4) AVPlayerItemTrack </p>
<p>你用一个AVPlayerItemTrack对象修改资产的表现状态跟踪(AVAssetTrack)一个AVPlayer对象。通常视频的加载播放有各种状态，我们需要KVO监听或者添加通知去知道播放器的准备、进行、暂停、停止等状态。</p>
<p>5) AVQueuePlayer</p>
<p>按照队列播放视频</p>
<ul>
<li><p>queuePlayerWithItems，</p>
</li>
<li><p>insertItem:(AVPlayerItem *)item</p>
<pre><code>afterItem:(AVPlayerItem *)afterItem
</code></pre></li>
</ul>
<h3 id="3、Editing资源编辑"><a href="#3、Editing资源编辑" class="headerlink" title="3、Editing资源编辑:"></a>3、Editing资源编辑:</h3><p>AVFoundation框架提供了一个功能丰富的组类促进视听资产的编辑。AVFoundation的编辑API的核心成分，就是一组追踪从一个或多个不同的媒体资产。AVMutableComposition类提供了一个接口,用于插入和删除操作的痕迹,以及管理自己时间排序。</p>
<p><img src="/assets/images/AVMutableComposition.jpg" alt=""></p>
<p>1）AVMutableComposition</p>
<p>是一个可变的AVComposition子类，当您想要从现有资产创建一个新的资源。你可以添加和删除跟踪,可以添加、删除和时间范围。<br>比如：</p>
<ul>
<li>– insertEmptyTimeRange：可以增加一段空白时间</li>
</ul>
<ul>
<li>– insertTimeRange:ofAsset:atTime:error:<br>插入的所有跟踪给定的时间范围内指定的资产到接收机。</li>
</ul>
<!-- -->
<pre><code>AVAsset *videoAsset = &lt;#AVAsset with at least one video track#&gt;;
AVAsset *anotherVideoAsset = &lt;#another AVAsset with at least one video track#&gt;;
// Get the first video track from each asset.
AVAssetTrack *videoAssetTrack = [[videoAsset tracksWithMediaType:AVMediaTypeVideo] objectAtIndex:0];
AVAssetTrack *anotherVideoAssetTrack = [[anotherVideoAsset tracksWithMediaType:AVMediaTypeVideo] objectAtIndex:0];
// Add them both to the composition.
[mutableCompositionVideoTrack insertTimeRange:CMTimeRangeMake(kCMTimeZero,videoAssetTrack.timeRange.duration) ofTrack:videoAssetTrack atTime:kCMTimeZero error:nil];
[mutableCompositionVideoTrack insertTimeRange:CMTimeRangeMake(kCMTimeZero,anotherVideoAssetTrack.timeRange.duration) ofTrack:anotherVideoAssetTrack atTime:videoAssetTrack.timeRange.duration error:nil];&apos;
</code></pre><p>2) AVMutableAudioMix </p>
<p>一个AVMutableAudioMix对象管理混合音轨的输入参数。它允许自定义音频处理在回放期间音轨或执行其他操作。</p>
<!--0-->
<pre><code>AVMutableAudioMix *mutableAudioMix = [AVMutableAudioMix audioMix];
// Create the audio mix input parameters object.
AVMutableAudioMixInputParameters *mixParameters = [AVMutableAudioMixInputParameters audioMixInputParametersWithTrack:mutableCompositionAudioTrack];
// Set the volume ramp to slowly fade the audio out over the duration of the composition.
[mixParameters setVolumeRampFromStartVolume:1.f toEndVolume:0.f timeRange:CMTimeRangeMake(kCMTimeZero, mutableComposition.duration)];
// Attach the input parameters to the audio mix.
mutableAudioMix.inputParameters = @[mixParameters];
</code></pre><h3 id="4、Media-Capture媒体捕捉"><a href="#4、Media-Capture媒体捕捉" class="headerlink" title="4、Media Capture媒体捕捉:"></a>4、Media Capture媒体捕捉:</h3><p>1) AVCaptureDevice </p>
<p>代表输入设备,如摄像头或麦克风</p>
<p>2) AVCaptureInput </p>
<p>输入设备的配置端口，我们可以理解为输入</p>
<p>3）AVCaptureSession</p>
<p>协调数据流从输入到输出,用startRunning开始从输入到输出的数据流,并调用stopRunning停止流动。采取关闭代理，保证取景器一直流动。</p>
<p>4) AVCaptureOutput </p>
<ul>
<li><p>AVCaptureMovieFileOutput，输入到视频文件，代理AVCaptureFileOutputRecordingDelegate</p>
</li>
<li><p>AVCaptureVideoDataOutput，如果想要实时的处理每一帧数据，或想要有自己的图形动画，代理AVCaptureVideoDataOutputSampleBufferDelegate</p>
</li>
</ul>
<ul>
<li><p>AVCaptureAudioDataOutput ，音频数据，代理AVCaptureVideoDataOutputSampleBufferDelegate</p>
</li>
<li><p>AVCaptureStillImageOutput ，图片数据</p>
</li>
</ul>
<p>5）AVCaptureVideoPreviewLayer </p>
<p>实时展示被session传出出来的视频流数据，也就是我们的取景器</p>
<p>6）AVCaptureConnection </p>
<p>代表捕获之间的连接输入和输出对象关联到一个捕获会话。</p>
<p><img src="/assets/images/AVCaptureConnection.jpg" alt=""></p>
<h3 id="5、Export媒体输出"><a href="#5、Export媒体输出" class="headerlink" title="5、Export媒体输出:"></a>5、Export媒体输出:</h3><p>1) AVAssetExportSession</p>
<p>针对AVAsset对象转码，创建一个输出的形式被指定出口预设内容。包括对输出媒体资源的属性设定，可以设置presetName进行视频品质压缩，AVAssetExportPresetLowQuality等。也可以设置属性包括：outputFileType<br>、fileLengthLimit、timeRange<br>等。</p>
<p>2）AVAssetReader </p>
<p>直接从媒体读取存储样本,获得样本解码成可渲染的形式。组合资产多个音轨和组合多个视频跟踪(通过使用AVAssetReaderAudioMixOutput和AVAssetReaderVideoCompositionOutput)。</p>
<ul>
<li>addOutPut</li>
<li>startReading</li>
<li>cancelReading</li>
</ul>
<p>读取一个音频：</p>
<!--0-->
<pre><code>AVAudioMix *audioMix = &lt;#An AVAudioMix that specifies how the audio tracks from the AVAsset are mixed#&gt;;
// Assumes that assetReader was initialized with an AVComposition object.
AVComposition *composition = (AVComposition *)assetReader.asset;
// Get the audio tracks to read.
NSArray *audioTracks = [composition tracksWithMediaType:AVMediaTypeAudio];
// Get the decompression settings for Linear PCM.
NSDictionary *decompressionAudioSettings = @{ AVFormatIDKey : [NSNumber numberWithUnsignedInt:kAudioFormatLinearPCM] };
// Create the audio mix output with the audio tracks and decompression setttings.
AVAssetReaderOutput *audioMixOutput = [AVAssetReaderAudioMixOutput assetReaderAudioMixOutputWithAudioTracks:audioTracks audioSettings:decompressionAudioSettings];
// Associate the audio mix used to mix the audio tracks being read with the output.
audioMixOutput.audioMix = audioMix;
// Add the output to the reader if possible.
if ([assetReader canAddOutput:audioMixOutput])
[assetReader addOutput:audioMixOutput];
</code></pre><p>3) AVAssetWriter</p>
<p>使用一个AVAssetWriter对象媒体数据写入新文件指定视听的容器类型,如QuickTime电影文件或一个mp4文件,支持自动交叉媒体数据的多个并发的痕迹。</p>
<ul>
<li>initWithURL:fileType:error:</li>
<li>startWriting</li>
<li>startSessionAtSourceTime</li>
<li>addInput</li>
<li>endSessionAtSourceTime</li>
<li>finishWritingWithCompletionHandler</li>
</ul>
<h2 id="二、代码实践："><a href="#二、代码实践：" class="headerlink" title="二、代码实践："></a>二、代码实践：</h2><blockquote>
<h3 id="import-“TTCameraViewController-h”"><a href="#import-“TTCameraViewController-h”" class="headerlink" title="#import “TTCameraViewController.h”"></a>#import “TTCameraViewController.h”</h3></blockquote>
<h2 id="三、问题回顾："><a href="#三、问题回顾：" class="headerlink" title="三、问题回顾："></a>三、问题回顾：</h2><h3 id="1、视频文件写入崩溃："><a href="#1、视频文件写入崩溃：" class="headerlink" title="1、视频文件写入崩溃："></a>1、视频文件写入崩溃：</h3><h4 id="现象："><a href="#现象：" class="headerlink" title="现象："></a>现象：</h4><p>相机开始拍摄就会出现崩溃，时而出现，有时难以复现。</p>
<h4 id="原因与解决："><a href="#原因与解决：" class="headerlink" title="原因与解决："></a>原因与解决：</h4><p>1）startSessionAtSourceTime只能在 AVAssetWriterStatusWriting的之后调用，但是startWriting调用之后writer并没有立即变为writing状态，而已有一个极短的开始时间，参照苹果规范使用文档，只需要前面调用之后后面就可以跟着执行startSessionAtSourceTime，然而，我遇见了这问题，说明它并不是。随后我到stackoverflow上查了问题，发现有人早就提过，并没有答案，说是升级IOS8以后就没有了，可我这里是IOS9…随后我只能判断writer状态如果是writing就开始执行，如果不是就调用startWriting。</p>
<p>2）[videoWriterInput appendSampleBuffer：xxx]这只能在startSessionAtSourceTime开始之后调用，和1是同样的情况，明明第一行调用了startSessionAtSourceTime，第二调用appendSampleBuffer就会崩溃，并且依旧是偶尔发生。但是这里的问题是没有一个状态可以判断是否已经开始startSessionAtSourceTime，这里就有点血崩了，不能像问题1一样判断解决，后来只好try catch了,稳住局面防止崩溃，丢失极少的毫秒级帧数。</p>
<h3 id="2、相机拍摄闪烁抖动："><a href="#2、相机拍摄闪烁抖动：" class="headerlink" title="2、相机拍摄闪烁抖动："></a>2、相机拍摄闪烁抖动：</h3><h4 id="现象：-1"><a href="#现象：-1" class="headerlink" title="现象："></a>现象：</h4><p>开始拍摄时候，取景器闪烁抖动，引起一小部分可见范围内的视频内容发送抖动，并被存入文件中，体验差。</p>
<h4 id="原因与解决：-1"><a href="#原因与解决：-1" class="headerlink" title="原因与解决："></a>原因与解决：</h4><p>在开始拍摄的时候，再去创建connection并传递设备和拍摄方向，有利于视频获取oritation，自然而然的横着拍摄也会竖着播放，但是问题在于connection的建立产生较大的链接，引起视频抖动，此抖动将被录制进入视频文件中。于是我采取在初始化input的时候就把connection就增加进去，当开始拍摄的时候不会发生抖动，但是牺牲的是视频的oritation需要自己根据用户拍摄的方向去手动修改视频方向。</p>
<h3 id="3、视频方向混乱："><a href="#3、视频方向混乱：" class="headerlink" title="3、视频方向混乱："></a>3、视频方向混乱：</h3><h4 id="现象：-2"><a href="#现象：-2" class="headerlink" title="现象："></a>现象：</h4><p>背面摄像头拍摄，home键在下，拍摄出来的视频文件，在播放的时候，底部在手机右边，而不是底边，一次类推，home键在底部与视频的底部角度成90垂直关系。</p>
<h4 id="原因与解决：-2"><a href="#原因与解决：-2" class="headerlink" title="原因与解决："></a>原因与解决：</h4><!--0-->
<pre><code>self.videoOutPut = [[AVCaptureVideoDataOutput alloc] init];
NSDictionary * outputSettings = [[NSDictionary alloc] initWithObjectsAndKeys:[NSNumber numberWithInt:kCVPixelFormatType_32BGRA],(id)kCVPixelBufferPixelFormatTypeKey, nil];
[self.videoOutPut setVideoSettings:outputSettings];

//必须
if ([self.session canAddOutput:self.videoOutPut]) {
    [self.session addOutput:self.videoOutPut];
}

//先于
self.videoConnection = [self.videoOutPut connectionWithMediaType:AVMediaTypeVideo];
self.videoConnection.enabled = NO;
[self.videoConnection setVideoOrientation:AVCaptureVideoOrientationPortrait];
</code></pre><h3 id="4、横着拍摄的视频横着播放："><a href="#4、横着拍摄的视频横着播放：" class="headerlink" title="4、横着拍摄的视频横着播放："></a>4、横着拍摄的视频横着播放：</h3><h4 id="现象：-3"><a href="#现象：-3" class="headerlink" title="现象："></a>现象：</h4><p>横着拍摄的视频，放的时候是竖着的。</p>
<h4 id="原因与解决：-3"><a href="#原因与解决：-3" class="headerlink" title="原因与解决："></a>原因与解决：</h4><p>因为上面解决视频抖动，导致不能直接设定拍摄时候的视频方向，从而需要根据手动的拍摄方向去修改视频的视图的方向。<br>考虑到用户可能锁住屏幕旋转，于是就CMMotionManager获取重力方向来判断，在VC出现或者开始拍摄的时候开启，在VC退出或者拍摄完成的的时候关闭。获得方向后，在视频的写入里直接修改方向即可。</p>
<!--0-->
<pre><code>[videoWriterInput setTransform:CGAffineTransformScale(CGAffineTransformMakeRotation(-M_PI_2), 1.0, 1.0)];
</code></pre><h3 id="5、录制视频有右边和底边绿色线条："><a href="#5、录制视频有右边和底边绿色线条：" class="headerlink" title="5、录制视频有右边和底边绿色线条："></a>5、录制视频有右边和底边绿色线条：</h3><h4 id="现象：-4"><a href="#现象：-4" class="headerlink" title="现象："></a>现象：</h4><p>手机全屏录制的时候，设置视频输出宽度为手机的宽高，当宽高为基数的时候视频录制里面会出现绿色线条。</p>
<h4 id="原因与解决：-4"><a href="#原因与解决：-4" class="headerlink" title="原因与解决："></a>原因与解决：</h4><p>不知道原因，神奇的bug，参照着段子的视频方法解决的，直接修改视频输出宽高为偶数。</p>
<!--0-->
<pre><code>NSInteger videoWidth = [[NSNumber numberWithFloat:self.view.frame.size.width] integerValue];
NSInteger videoHeight = [[NSNumber numberWithFloat:self.view.frame.size.height] integerValue];
if (videoWidth % 2 == 1) {
    videoWidth = videoWidth - 1;
}
if (videoHeight % 2 == 1) {
    videoHeight = videoHeight - 1;
}
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IOS 音频一览]]></title>
      <url>/2016/03/15/IOS%20%E9%9F%B3%E9%A2%91%E4%B8%80%E8%A7%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>做嘉宾聊天室这个需求的时候接触了音频和视频上的开发，嘉宾可以发布视频和语音以及文字信息出来，观众则可以文字回复，这样主持人嘉宾和观众就形成一个良性的互动过程。在这里把相关整理一下，望给大家带来一些认识。</p>
</blockquote>
<h1 id="一、了解音频"><a href="#一、了解音频" class="headerlink" title="一、了解音频"></a>一、了解音频</h1><p>声音作为信息的一种媒介载体必不可少，在移动端体现为各类语音交流以及音乐等，开发中使用的音频文件通过声音采样、量化、编码几步从而成为人耳可听的声音，频率为20HZ到20KHZ，奈奎斯特的理论表明采样率高于最高频2倍时候，是可以将数字信号还原为原来的模拟信号的，所以通常我们在网上看到的音频文件的采样率为44.1KHZ。</p>
<p>采样后通过量化的脉冲编码调制，我们得到了PCM类型的数据，比如在使用AVAudioRecorder采样的时候可以看到采样类型kAudioFormatLinearPCM。但是这样拿到的数据是很大的，不便于使用和传输，通过对人类不敏感的声音区域进行过滤压缩，就有了MP3、AAC、OGG、WMA等数据格式类型，这些都是有损压缩。</p>
<p>码率代码了压缩质量，比如MP3常用码率有128kbit/s、160kbit/s、320kbit/s等等，越高代表着声音音质越好。MP3中的数据有ID3和音频数据组成，ID3用于存储歌名、演唱者、专辑、音轨等我们可以常见的信息。</p>
<h1 id="二、IOS对音频的操作"><a href="#二、IOS对音频的操作" class="headerlink" title="二、IOS对音频的操作"></a>二、IOS对音频的操作</h1><p>开发实际上是为了解决需求，需求对应的是使用场景，开发的方式很多，不同的使用场景可以使用的方法不同。IOS开发提供了以下几种常用方式供我们解决对应的音频需求。</p>
<ul>
<li>System Sound Services </li>
<li>AVFoundation 框架</li>
<li>Media Player 框架</li>
</ul>
<h2 id="2-1-System-Sound-Services"><a href="#2-1-System-Sound-Services" class="headerlink" title="2.1  System Sound Services"></a>2.1  System Sound Services</h2><h4 id="2-1-1-场景特点"><a href="#2-1-1-场景特点" class="headerlink" title="2.1.1 场景特点"></a>2.1.1 场景特点</h4><p>最底层也是简单的声音播放服务，此方法是适合播放提示警告类型的短小的声音</p>
<h4 id="2-1-2-存在限制"><a href="#2-1-2-存在限制" class="headerlink" title="2.1.2 存在限制"></a>2.1.2 存在限制</h4><ul>
<li>声音长度要小于 30 秒</li>
<li>In linear PCM 或者 IMA4 (IMA/ADPCM) 格式的</li>
<li>打包成 .caf, .aif, 或者 .wav 的文件</li>
<li>不能控制播放的进度</li>
<li>调用方法后立即播放声音</li>
<li>没有循环播放和立体声控制：</li>
</ul>
<h4 id="2-1-3-使用方式"><a href="#2-1-3-使用方式" class="headerlink" title="2.1.3 使用方式"></a>2.1.3 使用方式</h4><p>调用 AudioServicesCreateSystemSoundID(CFURLRef inFileURL,SystemSoundID *outSystemSoundID) 该函数的第一个参数代表音频文件的URL（可通过NSURL转换成CFURLRef），第二个参数代表注册音频文件的SystemSoundID。</p>
<p>调用AudioServicesAddSystemSoundCompletion()函数为制定SystemSoundID注册Callback函数。有了 CallBack 函数我们可以解决不少问题，比如可以克服 System Sound Services 本身不支持循环播放的问题。</p>
<p>调用AudioServicePlaySystemSound函数或者AudioServicePlayAlertSound（调用系统振动功能）。</p>
<pre><code>- (void)viewDidLoad
{
[super viewDidLoad];

// 1. 定义要播放的音频文件的URL
NSURL *voiceURL = [[NSBundle mainBundle]URLForResource:@&quot;CleanDidFinish&quot; withExtension:@&quot;aiff&quot;];

// 2. 注册音频文件（第一个参数是音频文件的URL 第二个参数是音频文件的SystemSoundID）
AudioServicesCreateSystemSoundID((__bridge CFURLRef)(voiceURL),&amp;ditaVoice);

// 3. 为crash播放完成绑定回调函数AudioServicesAddSystemSoundCompletion(ditaVoice,NULL,NULL,(void*)completionCallback,NULL);

// 4. 播放 ditaVoice 注册的音频 并控制手机震动
AudioServicesPlayAlertSound(ditaVoice);

//    AudioServicesPlaySystemSound(ditaVoice);
//    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate); // 控制手机振动

}
</code></pre><h2 id="2-2-AVFoundation-框架"><a href="#2-2-AVFoundation-框架" class="headerlink" title="2.2  AVFoundation 框架"></a>2.2  AVFoundation 框架</h2><h4 id="2-2-1-场景特点"><a href="#2-2-1-场景特点" class="headerlink" title="2.2.1 场景特点"></a>2.2.1 场景特点</h4><p>如果播放较大的音频或者要对音频有精确的控制，则System Sound Service可能就很难满足实际需求了，通常这种情况会选择使用AVFoundation，它可以满足我们通常意义上的绝大部分的场景需求，包括音乐的交互、声音的制作等等，根据自己的业务需求实现自定义的定制化。如果你只是想实现音频的播放或者录制，没有其他需求，AVFoundation会很好的满足你，它的接口使用简单、不用关心其中的细节。</p>
<h4 id="2-2-2-关键点和API浏览"><a href="#2-2-2-关键点和API浏览" class="headerlink" title="2.2.2 关键点和API浏览"></a>2.2.2 关键点和API浏览</h4><blockquote>
<p>Background Modes</p>
</blockquote>
<p>打开后台模式的音乐播放，或者在info.plist文件中添加Required Background Modes键，其值是App plays audio or streams audio/video using AirPlay</p>
<blockquote>
<p>AVAudioSession</p>
</blockquote>
<p>用于 iOS 系统中协调应用程序之间的音频播放的 API 的。例如，当有电话打进来时，音频的播放就会被暂停；在用户启动电影时，音乐的播放就会停止。我们需要使用这些 API 来确保一个应用程序能够正确响应并处理这类事件。</p>
<blockquote>
<p>AVAudioPlayer</p>
</blockquote>
<p>这个高层级的 API 为你提供一个简单的接口，用来播放本地或者内存中的音频。这是一个无界面的音频播放器 (也就是说没有提供 UI 元素)，使用起来也很直接简单。它不适用于网络音频流或者低延迟的实时音频播放。如果这些问题都不需要担心，那么 AVAudioPlayer 可能就是正确的选择。音频播放器的 API 也为我们带来了一些额外的功能，比如循环播放、获取音频的音量强度等等。</p>
<blockquote>
<p>AVAudioRecorder</p>
</blockquote>
<p>作为与 AVAudioPlayer 相对应的 API，AVAudioRecorder 是将音频录制为文件的最简单的方法。除了用一个音量计接受音量的峰值和平均值以外，这个 API 简单粗暴，但要是你的使用场景很简单的话，这可能恰恰就是你想要的方法。</p>
<blockquote>
<p>AVPlayer</p>
</blockquote>
<p>AVPlayer 与上面提到的 API 相比，提供了更多的灵活性和可控性。它基于 AVPlayerItem 和 AVAsset，为你提供了颗粒度更细的权限来获取资源，比如选择指定的音轨。它还通过 AVQueuePlayer 子类支持播放列表，而且你可以控制这些资源是否能够通过 AirPlay 发送。</p>
<h4 id="与-AVAudioPlayer-最主要的区别是，AVPlayer-对来自网络的流媒体资源的-“开箱即用”-支持。这增加了处理播放状态的复杂性，但是你可以使用-KVO-来观测所有的状态参数来解决这个问题。"><a href="#与-AVAudioPlayer-最主要的区别是，AVPlayer-对来自网络的流媒体资源的-“开箱即用”-支持。这增加了处理播放状态的复杂性，但是你可以使用-KVO-来观测所有的状态参数来解决这个问题。" class="headerlink" title="与 AVAudioPlayer 最主要的区别是，AVPlayer 对来自网络的流媒体资源的 “开箱即用” 支持。这增加了处理播放状态的复杂性，但是你可以使用 KVO 来观测所有的状态参数来解决这个问题。"></a>与 AVAudioPlayer 最主要的区别是，AVPlayer 对来自网络的流媒体资源的 “开箱即用” 支持。这增加了处理播放状态的复杂性，但是你可以使用 KVO 来观测所有的状态参数来解决这个问题。</h4><blockquote>
<p> AVAudioEngine</p>
</blockquote>
<p>AVAudioEngine 是播放和录制的 Objective-C 接口。它提供了以前需要深入到 Audio Toolbox 框架的 C API 才能做的控制 (例如一些实时音频任务)。该音频引擎 API 对底层的 API 建立了优秀的接口。如果你不得不处理底层的问题，你仍然可以使用 Audio Toolbox 框架。</p>
<p>这个 API 的基本概念是建立一个音频的节点图，从源节点 (播放器和麦克风) 以及过处理 (overprocessing) 节点 (混音器和效果器) 到目标节点 (硬件输出)。每一个节点都具有一定数量的输入和输出总线，同时这些总线也有良好定义的数据格式。这种结构使得它非常的灵活和强大。而且它集成了音频单元 (audio unit)。</p>
<h2 id="2-3-Media-Player-框架"><a href="#2-3-Media-Player-框架" class="headerlink" title="2.3 Media Player 框架"></a>2.3 Media Player 框架</h2><h4 id="2-3-1-场景特点"><a href="#2-3-1-场景特点" class="headerlink" title="2.3.1 场景特点"></a>2.3.1 场景特点</h4><p>众所周知音乐是iOS的重要组成播放，无论是iPod、iTouch、iPhone还是iPad都可以在iTunes购买音乐或添加本地音乐到音乐库中同步到你的iOS设备。在MediaPlayer.frameowork中有一个MPMusicPlayerController用于播放音乐库中的音乐。Media Player 框架是 iOS 平台上一个用于音频和视频播放的高层级接口，它包含了一个你可以在应用中直接使用的默认的用户界面。你可以使用它来播放用户在 iPod 库中的项目，或者播放本地文件以及网络流。这个框架也包括了查找用户媒体库中内容的 API，同时还可以配置像是在锁屏界面或者控制中心里的音频控件。</p>
<h4 id="2-3-2-使用方式"><a href="#2-3-2-使用方式" class="headerlink" title="2.3.2 使用方式"></a>2.3.2 使用方式</h4><p>使用MPMusicPlayerController实例化对象来播放内置音乐库的媒体文件，有以下两种类方法来实例化对象：</p>
<p>MPMusicPlayerController *playController = [MPMusicPlayerController systemMusicPlayer]; </p>
<p>说明：播放内置媒体库项目取代用户目前播放状态（如果是用网易云音乐或QQQ音乐在播放歌曲）</p>
<p>MPMusicPlayerController *playController = [MPMusicPlayerController applicationMusicPlayer]; </p>
<p>说明：播放该应用内的歌曲，不影响本机自带音乐播放器的状态。</p>
<ul>
<li><p>判断有没有正在播放的媒体</p>
<pre><code>[MPMusicPlayerController indexOfNowPlayingItem] == NSNotFound
</code></pre></li>
<li><p>创建媒体队列</p>
<pre><code>[MPMediaQuery songsQuery];
[MPMusicPlayerController setQueueWithQuery:nil];
</code></pre></li>
<li><p>获取媒体曲目的信息</p>
</li>
</ul>
<pre><code>MPMediaItem *currentItem = ....
NSString *artist = [currentItem valueForProperty:MPMediaItemPropertyArtist];
NSString *songName = [currentItem valueForProperty:MPMediaItemPropertyTitle];
</code></pre><ul>
<li><p>监听媒体通知</p>
<pre><code>NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];[notificationCenter addObserver:self
              selector:@selector()
                       name:MPMusicPlayerControllerNowPlayingItemDidChangeNotification
                     object:nil];
</code></pre></li>
</ul>
<h2 id="2-4-更多音频方案"><a href="#2-4-更多音频方案" class="headerlink" title="2.4 更多音频方案"></a>2.4 更多音频方案</h2><p>CoreAudio的接口层次：</p>
<p><img src="/assets/images/api.png" alt=""></p>
<h4 id="2-4-1-OpenAL"><a href="#2-4-1-OpenAL" class="headerlink" title="2.4.1 OpenAL"></a>2.4.1 OpenAL</h4><p>OpenAL 是一个跨平台的 API。它提供了位置 (3D) 和低延迟的音频服务。它主要用于跨平台游戏的开发。它有意地模仿了 OpenGL 中 API 的风格。</p>
<h4 id="2-4-2-Audio-Unit-框架"><a href="#2-4-2-Audio-Unit-框架" class="headerlink" title="2.4.2  Audio Unit 框架"></a>2.4.2  Audio Unit 框架</h4><p>Audio Unit 框架是一个底层的 API；所有 iOS 中的音频技术都构建在 Audio Unit 这个框架之上。音频单元是用来加工音频数据的插件。一个音频单元链叫做音频处理图。</p>
<p>如果你需要非常低的延迟 (如 VoIP 或合成乐器)、回声消除、混音或者音调均衡的话，你可能需要直接使用音频单元，或者自己写一个音频单元。但是其中的大部分工作可以使用 AVAudioEngine 的 API 来完成。如果你不得不写自己的音频单元的话，你可以将它们与 AVAudioUnit 节点一起集成在 AVAudioEngine 处理图中。</p>
<h4 id="2-4-2-AudioToolBox-框架"><a href="#2-4-2-AudioToolBox-框架" class="headerlink" title="2.4.2 AudioToolBox 框架"></a>2.4.2 AudioToolBox 框架</h4><p>通过AudioToolbox框架，可以将短声音注册到system sound服务上，被注册到system sound服务上的声音称之为 system sounds。<br>前面常用的System Sound Services 就来自这里的框架。</p>
<p>它必须满足下面几个条件：</p>
<p>(1).播放的时间不能超过30秒</p>
<p>(2).数据必须是 PCM或者IMA4流格式</p>
<p>(3).必须被打包成下面三个格式之一：Core Audio Format (.caf), Waveform audio (.wav), 或者 Audio Interchange File (.aiff)</p>
<p>(4）声音文件必须放到设备的本地文件夹下面。通过AudioServicesCreateSystemSoundID方法注册这个声音文件.</p>
<h4 id="2-4-3-CoreMIDI-和-CoreAudioKit-框架"><a href="#2-4-3-CoreMIDI-和-CoreAudioKit-框架" class="headerlink" title="2.4.3 CoreMIDI 和 CoreAudioKit 框架"></a>2.4.3 CoreMIDI 和 CoreAudioKit 框架</h4><p>在 iOS 上，Core MIDI 和 CoreAudioKit 可以被用来使应用程序表现为 MIDI 设备。在 OS X 上，Music Sequencing 服务提供了基于 MIDI 的控制和对音乐数据访问的权限。Core MIDI 服务为服务器和驱动程序提供了支持。</p>
<h4 id="2-4-4-QTKit-和-QuickTime-框架"><a href="#2-4-4-QTKit-和-QuickTime-框架" class="headerlink" title="2.4.4 QTKit 和 QuickTime 框架"></a>2.4.4 QTKit 和 QuickTime 框架</h4><p>现在已经过时了，它们不应该被用在以后的开发中。我们应该使用 AVFoundation (和 AVKit) 来代替它们</p>
<h1 id="三、今日头条嘉宾聊天室音频实践"><a href="#三、今日头条嘉宾聊天室音频实践" class="headerlink" title="三、今日头条嘉宾聊天室音频实践"></a>三、今日头条嘉宾聊天室音频实践</h1><h2 id="3-1-背景"><a href="#3-1-背景" class="headerlink" title="3.1 背景"></a>3.1 背景</h2><p>嘉宾聊天室是头条16年初新起的一个项目服务，目标是为了引进明星嘉宾访谈类型和体育赛事线上直播的节目，丰富头条在直播领域的内容，聊天室一期是属于图文、语音、短视频直播，后期发展可成为视频线上直播。表现形式与网易直播频道类似，但更丰富。</p>
<h2 id="3-2-IOS端实现"><a href="#3-2-IOS端实现" class="headerlink" title="3.2 IOS端实现"></a>3.2 IOS端实现</h2><p>根据聊天室在语音和视频的需求，使用系统自带实现的MPMoviePlayerController没法符合自定义的需求，包括功能与交互设计，并且MPMoviePlayerController已经不被苹果官方提倡，将要通过AVPlayer方案代替。需求本身的属于基本的语音和视频沟通，只对音频视频的录制与播放，符合音质画质要求和大小要求，因此采用AVFoundation框架即可，能够满足聊天室的需求。主要使用了AVPlayer、AVAudioRecorder、AVAudioSession等主要的类。</p>
<p>实现类有如下等：</p>
<pre><code>#import &quot;TTAudioRecorder.h&quot;
#import &quot;TTAudioPlayer.h&quot;
#import &quot;TTLiveCameraViewController.h&quot;
#import &quot;TTUploadVideoAudioManager.h&quot;
#import &quot;TTLiveAudioManager.h&quot;
</code></pre><h2 id="3-3-问题与解决"><a href="#3-3-问题与解决" class="headerlink" title="3.3 问题与解决"></a>3.3 问题与解决</h2><p>整个需求的实现过程还算顺利，按照API说明理解即可，提两三点说明下都会遇见哪一类的问题。</p>
<h4 id="3-1-音频格式为AMR"><a href="#3-1-音频格式为AMR" class="headerlink" title="3.1 音频格式为AMR"></a>3.1 音频格式为AMR</h4><p>AVPlayer来播放视频音频都相当强大，但是它也存在着一些不可回避的问题，那就是目前IOS已经不再支持AMR格式的播放。</p>
<pre><code>AMR format is no longer supported by Apple (since iOS 4.3)
</code></pre><p>与安卓同步开发的时候对接确立的通用的格式为AMR，因为AAC文件在网络传输下载播放的时候显得很大，AMR相对来说会好很多，同时我们也看了微博和微信的实现都是使用AMR，鉴于头条的用户量和使用体验，于是就采用了同样的方式。安卓可以很好支持AMR，在iOS平台上需要进行WAV和AMR之间的转换，好在libopencore可以解决这个事。网络上有好些所谓的相互转化的库，仔细看了下，都没有脱离这个core本身。</p>
<p>libopencore库：</p>
<pre><code>interf_dec.h 
interf_enc.h
dec_if.h
if_rom.h
libopencore-amrnb.a
libopencore-amrwb.a
</code></pre><p>主要方法：</p>
<pre><code>EncodeWAVEFileToAMRFile 、 DecodeAMRFileToWAVEFile
</code></pre><p>封装一个mannager：        </p>
<pre><code>#import &lt;Foundation/Foundation.h&gt;

@interface VoiceConverter : NSObject

+ (int)amrToWav:(NSString*)_amrPath wavSavePath:(NSString*)_savePath;

+ (int)wavToAmr:(NSString*)_wavPath amrSavePath:(NSString*)_savePath;

@end
</code></pre><h4 id="3-2-WAV转化AMR声音变形："><a href="#3-2-WAV转化AMR声音变形：" class="headerlink" title="3.2 WAV转化AMR声音变形："></a>3.2 WAV转化AMR声音变形：</h4><p>录制WAV格式本地正常播放，转化为AMR后，把AMR格式文件在电脑端播放，声音严重变形，无法识别，再转化会WAV,，手机还是无法识别。<br>原因与解决<br>声音格式转化采用的是”amrFileCodec.h”，它对转化的音频输入源是有格式要求的，要求转化的采样率为标准的8k，如果录制的音频频率采用高频率44.1K的话就会出现变形，我想这里的设定依据来自于amr格式的采样率通常为8K。通过AVAudioRecorder把采样率设置为8K后，可以正常互相转化。</p>
<blockquote>
<p>AMR维基百科：</p>
<p>采样率 8 kHz/13-bit (160 采样点每20ms)，滤波后只保留 200-3400 Hz 范围内的信号.</p>
<p>编码器使用8个位速：12.2、10.2、7.95、7.40、6.70、5.90、5.15和4.75 kbit/s.</p>
</blockquote>
<pre><code>NSMutableDictionary *settings=[NSMutableDictionary dictionary];
[settings setObject:@(kAudioFormatLinearPCM) forKey:AVFormatIDKey];
[settings setObject:@(8000) forKey:AVSampleRateKey]; //必须和amr文件解码参数保持一致
[settings setObject:@(1) forKey:AVNumberOfChannelsKey];
[settings setObject:@(16) forKey:AVLinearPCMBitDepthKey];
[settings setObject:@(NO) forKey:AVLinearPCMIsFloatKey];
[settings setValue:@(NO) forKey:AVLinearPCMIsNonInterleaved];
[settings setValue:@(NO) forKey:AVLinearPCMIsBigEndianKey];
[settings setValue:@(AVAudioQualityHigh) forKey:AVEncoderAudioQualityKey];
AVAudioRecorder *recorderTemp = [[AVAudioRecorder alloc] initWithURL:fileUrl settings:settings error:nil];
</code></pre><h4 id="3-3-AVPlayer的准备状态"><a href="#3-3-AVPlayer的准备状态" class="headerlink" title="3.3 AVPlayer的准备状态"></a>3.3 AVPlayer的准备状态</h4><p>当AVPlayer的status变为AVPlayerStatusReadyToPlay后，依旧可能无法开始播放？</p>
<p>AVPlayerStatusReadyToPlay属性只是表明了AVPlayer已经成功的载入了AVPlayerItem，并且准备好，但是实际的是否能播放时由AVPlayerItem的status到达AVPlayerItemStatusReadyToPlay的时候，才能开始正常播放的。<br>如果我们的App使用CPU过多，I/O读写过多时，有可能导致直接无法播放，我们再调用play或者seekToTime:方法都无法正常播放，尤其是视频。所以我们需要做一个真正播放状态准备好的判断，也可以通过KVO去监听AVPlayerItem的status。</p>
<pre><code>//播放器是否准备好
if (self.videoPrePlayer.status == AVPlayerStatusReadyToPlay) 
{
    //视频是否加载成功
    if(self.videoPrePlayer.currentItem.status == AVPlayerItemStatusFailed){   
        return;
    }
        [self.videoPrePlayer play];

}
</code></pre><h1 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h1><p>文章主要对音频的使用范畴做了概括，并列举了两三实践点，其他的并没有做详细的论述，因为本篇比较偏向音频知识的介绍，知道用什么工具框架后再具体解决就好。比如如何播放流畅的网络音频，如何实现音频的快放与慢放等具体问题，此次需求内容并不复杂没有涉及，他们都可以通过 AudioToolBox框架实现。</p>
]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[换肤功能的实现]]></title>
      <url>/2016/01/21/%E6%8D%A2%E8%82%A4%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>市面上的应用常见换肤功能，归纳下来可谓两类形式，一种是普通的切换皮肤颜色，比如今日头条的夜间阅读模式，另外一种是节假日喜庆皮肤，比如淘宝京东每逢双十一的炫酷界面，来头条后刚好接触到这方面的学习，写篇文章总结下。</p>
<h3 id="二、头条夜间阅读模式"><a href="#二、头条夜间阅读模式" class="headerlink" title="二、头条夜间阅读模式"></a>二、头条夜间阅读模式</h3><p>1、定制</p>
<p>一般的视图大多继承自UIView，但是也存在没有继承比如UIBarButtonItem，更换主题的时候，不同视图需要更换的属性比如textColor、backgroundColor和UIImageView的图片也不同，所以也难避免需要一种一种的找出来进行视图的定制。</p>
<p>新建一个SSThemed.h文件，里面定义的所有视图都需要绑定一个主题的key值，每一种key值对应了不同主题下的各个颜色。<br>设置一个视图为浅白色的，key值是backgrounColor4，在白天的时候对应的是#ffffff,在夜间的时候对应的是#252525。</p>
<p>比如SSThemedView这个类，其实就是继承自UIView，绑定了关于背景和边框线的主题键即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@interface SSThemedView : SSViewBase</div><div class="line"></div><div class="line">@property(nonatomic, copy) IBInspectable NSString *backgroundColorThemeKey;</div><div class="line">@property(nonatomic, copy) IBInspectable NSString *borderColorThemeKey;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>而像文本输入框这样的视图继承自UITextView，就要相对多2个属性，因为包含文字颜色</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@interface SSThemedTextView : UITextView</div><div class="line">@property(nonatomic, copy) IBInspectable NSString *borderColorThemeKey;</div><div class="line">@property(nonatomic, copy) IBInspectable NSString *textColorThemeKey;</div><div class="line">@property(nonatomic, copy) IBInspectable NSString *placeholderColorThemeKey;</div><div class="line">@property(nonatomic, copy) IBInspectable NSString *backgroundColorThemeKey;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>其他类似，比如UIImageView，但是图片会多一个图片name属性，这个是由开发者自己添加的，主题切换的时候需要自己处理，我们接下往下看。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@interface SSThemedImageView : UIImageView</div><div class="line"></div><div class="line">@property(nonatomic, copy) IBInspectable NSString *imageName;</div><div class="line">@property(nonatomic, copy) IBInspectable NSString *highlightedImageName;</div><div class="line">@property(nonatomic, copy) IBInspectable NSString *tintColorThemeKey;</div><div class="line">@property(nonatomic, copy) IBInspectable NSString *hightlightedTintColorThemeKey;</div><div class="line">@property(nonatomic, assign) IBInspectable BOOL enableNightCover;</div><div class="line">@property(nonatomic) CGSize preferredContentSize;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>2、管理主题的manager</p>
<p>创建一个全局单例的TTThemeManager，用于读取配置管理主题和记录用户选择主题操作。头条的做法是将尽可能使用到的主题放在一个默认的plist文件中，有与头条只有夜间模式和白天模式，所以通过plist存储颜色值基本可以满足配置要求，应用启动的时候管理器读取应用包里的配置。白天对应的plist是default_theme.plist，夜间对应的是night_theme.plist，里面存放的key值是相同的，如上所述，不同文件里相同key对应的颜色值不一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (NSDictionary *)dictionaryForBundle:(NSString *)bundleName theme:(NSString*)themeName &#123;</div><div class="line">    if (!bundleName) bundleName = @&quot;TTThemed&quot;;</div><div class="line">    </div><div class="line">    NSString *bundlePath = [[NSBundle mainBundle] pathForResource:bundleName ofType:@&quot;bundle&quot;];</div><div class="line">    NSBundle *bundle = [NSBundle bundleWithPath:bundlePath];</div><div class="line">    </div><div class="line">    NSString *fileName = [NSString stringWithFormat:@&quot;%@_theme&quot;, themeName];</div><div class="line">    NSString *path = [bundle pathForResource:fileName ofType:@&quot;plist&quot;];</div><div class="line">    if (![[NSFileManager defaultManager] fileExistsAtPath:path]) &#123;</div><div class="line">        path = [[NSBundle mainBundle] pathForResource:@&quot;default_theme&quot; ofType:@&quot;plist&quot;];</div><div class="line">    &#125;</div><div class="line">    return [NSDictionary dictionaryWithContentsOfFile:path];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、主题切换</p>
<p>头条内部夜间模式和白天模式切换，通过发出一个全局的通知NSNotification到各个组件，组件收到通知事件通过mananger读取当前的主题，也就是当前是白天还是夜间，然后获取当前绑定的颜色key值在该主题下所对应的颜色。</p>
<p>针对背景颜色和边框颜色的情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (void)_customThemeChanged:(NSNotification *)notification &#123;</div><div class="line">    if (!isEmptyString(_backgroundColorThemeKey)) &#123;</div><div class="line">        self.backgroundColor = [UIColor tt_themedColorForKey:_backgroundColorThemeKey];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (UIColor *)themedColorForKey:(NSString *)key &#123;</div><div class="line">    if (self.currentTheme &amp;&amp; [self.currentTheme[@&quot;colors&quot;] valueForKey:key]) &#123;</div><div class="line">        NSString *colorString = [self.currentTheme[@&quot;colors&quot;] valueForKey:key];</div><div class="line">        </div><div class="line">        UIColor *color = [self.colorCache objectForKey:colorString];</div><div class="line">        </div><div class="line">        if (!color) &#123;</div><div class="line">            color = [UIColor colorWithHexString:colorString];</div><div class="line">            </div><div class="line">            if (color) &#123;</div><div class="line">                [self.colorCache setObject:color forKey:colorString];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return color;</div><div class="line">    &#125;</div><div class="line">    return nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>针对图片替换情况，开发者在建议有主题变化的ImageView的时候需要提供两套图片，一个是白天的，一个是夜晚，并且需要遵循一定的规则，比如白天的名字叫XXX.png,那么夜晚的名字就是白天的名字加上后缀_night,也就是XX_night.png。当主题发生变化的时候，UIImageView自动寻找对应的后缀名的图片文件替换。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"> if ([[TTThemeManager sharedInstance_tt] currentThemeMode] == TTThemeModeNight) &#123;</div><div class="line">        if (noNightModeFileNameSet == nil) &#123;</div><div class="line">            noNightModeFileNameSet = [[NSMutableSet alloc] initWithCapacity:100];</div><div class="line">        &#125;</div><div class="line">        if ([noNightModeFileNameSet containsObject:fixedName]) &#123;</div><div class="line">            return [UIImage imageNamed:fixedName];</div><div class="line">        &#125;</div><div class="line">        if ([TTDeviceHelper is667Screen] || [TTDeviceHelper is736Screen]) &#123;</div><div class="line">            NSString * name = hdImageNamed(fixedName, YES);</div><div class="line">            UIImage * image = [UIImage imageNamed:name];</div><div class="line">            if (image) &#123;</div><div class="line">                [noNightModeFileNameSet addObject:name];</div><div class="line">                return image;</div><div class="line">            &#125;</div><div class="line">            name = hdImageNamed(fixedName, NO);</div><div class="line">            image = [UIImage imageNamed:name];</div><div class="line">            if (image) &#123;</div><div class="line">                [noNightModeFileNameSet addObject:name];</div><div class="line">                return image;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        NSString * fileNameWithNightModelSuffix = [self fileNameAddNightModelSuffix:fixedName];</div><div class="line">        </div><div class="line">        UIImage * img = [UIImage imageNamed:fileNameWithNightModelSuffix];</div><div class="line">        if (img != nil) &#123;</div><div class="line">            return img;</div><div class="line">        &#125;</div><div class="line">        [noNightModeFileNameSet addObject:fixedName];</div><div class="line">        return [UIImage imageNamed:fixedName];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">+ (NSString * )fileNameAddNightModelSuffix:(NSString *)originName</div><div class="line">&#123;</div><div class="line">    NSMutableString *resultName = [NSMutableString stringWithString:originName];</div><div class="line">    </div><div class="line">    NSRange lastPoint = [resultName rangeOfString:@&quot;.&quot; options:NSBackwardsSearch];</div><div class="line">    if(lastPoint.location != NSNotFound) &#123;</div><div class="line">        [resultName insertString:nightModelSuffixStr atIndex:lastPoint.location];</div><div class="line">    &#125; else &#123;</div><div class="line">        [resultName appendString:nightModelSuffixStr];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return resultName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、节假日的喜庆皮肤"><a href="#三、节假日的喜庆皮肤" class="headerlink" title="三、节假日的喜庆皮肤"></a>三、节假日的喜庆皮肤</h3><p>与阅读模式有些微区别，虽然本质上可以使用一套，但是节日假通常是根据节假日时间出现和消失，并且不是属于用户行为，而是应用开发方进行的控制，有了上述的方法的基础，不使用默认提供的theme组件，我们再节假日单独变更的页面可以采用入下实现方式。</p>
<p>1、首先需要定制符合需求的UI组件</p>
<p>2、下发数据使用接口</p>
<p>我们可以合server约定类型，在参数为1-10的时候表示为10中主题，当下发参数为0的时候客户端显示默认设计样式，不走本地主题的逻辑，下发的数据格式举例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;home_navi&quot;: &#123;</div><div class="line">        &quot;colors&quot;: &#123;</div><div class="line">            &quot;color_background&quot;: &quot;#ffffff&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;images&quot;: &#123;</div><div class="line">            &quot;image_logo&quot;: &quot;home_topLogo&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;home_tabbar&quot;: &#123;</div><div class="line">        &quot;colors&quot;: &#123;</div><div class="line">            &quot;color_background&quot;: &quot;#F9F9F9&quot;,</div><div class="line">            &quot;color_button_normal&quot;: &quot;#999999&quot;,</div><div class="line">            &quot;color_button_selected&quot;: &quot;#444444&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;images&quot;: &#123;</div><div class="line">            &quot;image_one_button_normal&quot;: &quot;tab按钮1图片&quot;,</div><div class="line">            &quot;image_one_button_selected&quot;: &quot;tab按钮1选中图片&quot;,</div><div class="line">            &quot;image_two_button_normal&quot;: &quot;tab按钮2图片&quot;,</div><div class="line">            &quot;image_two_button_selected&quot;: &quot;tab按钮2选中图片&quot;,</div><div class="line">            &quot;image_three_button_normal&quot;: &quot;tab按钮2图片&quot;,</div><div class="line">            &quot;image_three_button_selected&quot;: &quot;tab按钮2选中图片&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;values&quot;: &#123;</div><div class="line">            &quot;value_one_button&quot;: &quot;tab按钮1&quot;,</div><div class="line">            &quot;value_two_button&quot;: &quot;tab按钮2&quot;,</div><div class="line">            &quot;value_three_button&quot;: &quot;tab按钮3&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;loading&quot;: &#123;</div><div class="line">        &quot;resources&quot;: &#123;</div><div class="line">            &quot;resource_refreshImage&quot; : &quot;refresh.gif&quot;</div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、下发使用压缩包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@interface SSZipArchive : NSObject</div><div class="line"></div><div class="line">// Password check</div><div class="line">+ (BOOL)isFilePasswordProtectedAtPath:(NSString *)path;</div><div class="line"></div><div class="line">// Unzip</div><div class="line">+ (BOOL)unzipFileAtPath:(NSString *)path toDestination:(NSString *)destination;</div><div class="line">+ (BOOL)unzipFileAtPath:(NSString *)path toDestination:(NSString *)destination delegate:(nullable id&lt;SSZipArchiveDelegate&gt;)delegate;</div><div class="line"></div><div class="line">//...</div><div class="line">@end</div></pre></td></tr></table></figure>
<h3 id="4、优化"><a href="#4、优化" class="headerlink" title="4、优化"></a>4、优化</h3><p>头条在使用皮肤切换的存储上其实可以通过下发的处理，更加灵活和方便产品变动。主调颜色一致是红色，也没有节假日的活动皮肤，其实个人认为可以多增加点产品上的小体验，大红色好单调哦，主题可以多定制几个，而不是只有夜间模式。</p>
]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[15年底于今日头条]]></title>
      <url>/2015/12/30/15%E5%B9%B4%E5%BA%95%E4%BA%8E%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/</url>
      <content type="html"><![CDATA[<p>2015年过去的很快，这一年算是自己工作的上升成长期，由毕业后最初的踏入到如今完全接受自己的工作领域和环境，并能正常的快速加入新的公司和团队，这是我这一年来最大的变化。人总是在不断的认知中成长，在去哪儿那会生活很安逸舒适，其他部门加班成狗的时候，我们无线部门依旧正常上下班，相信这也是移动发版周期化带来的好处，急了也急不了多少，慢也慢不起来，所以一切都再正常的时间里做着正常的事情里度过。</p>
<p>到15年7月，自己的水平已经进步了，恰逢学长开始创业，叫我一起干，原本就看着互联网大潮的我愉快的加入了。之后在里面独立承担开发APP 的任务，收货颇多。可毕竟不是个以产品支撑的企业，随着资本市场的低谷，我们的汽车业务数据起不来的结果就是最后度日艰难。到我离开的时候，互联网领域依旧低调，前面后试了许多知名企业，也拿到了一些Offer，还是对自己更加肯定，可是环境毕竟不是我想要得，想起自己从前的日子，年轻人暂时还不想过得太安逸。</p>
<p>12月底，经过多轮面试，我选择加入了今日头条，这是一个快速发展的公司，处于上升期，公司对员工很不错，尤其是食堂的饭菜很好吃，工作氛围也符合了我的预期，我相信在这里我会有更多的成长和获得更多的机会。目前，已经对公司的节奏基本把握和适应，对工作的需求已经开展中了。</p>
<p>恰逢2016年新年开始，我希望自己在新的一年里，整个安心稳定的工作，加大工作的力度，却不要追逐速度，要沉稳，要踏实，在自己的开发领域里有新的突破，对开发的认知更进一步，对技术的使用更深一层。针对头条的客户端能够熟悉并搭建工程结构，希望未来在某一方面或者某一块能够完全胜任管理，能够快速开发，能够应用和分享新的技术，并实践在客户端中。这一切都离不开同事们的交流，希望同事能够把一些坑和经验写入wiki文档，成为大家一起分享的资料，有说明才有更好的合作开发，也希望组长能够多多指点，让我能有力去做出一些付出，希望公司越来越好。</p>
]]></content>
      
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我短暂的创业经历]]></title>
      <url>/2015/12/21/%E6%88%91%E7%9F%AD%E6%9A%82%E7%9A%84%E5%88%9B%E4%B8%9A%E7%BB%8F%E5%8E%86/</url>
      <content type="html"><![CDATA[<p>互联网圈内，去哪儿旅行对外展示着的形象是加班多，偶尔还传出员工猝死的消息，然而任何一家公司也并不是每个部门都加班，并不是每个部门都有那么多亟不可待的业务需要去追赶，反而，在这里，我每天的工作自在舒适，按需完成，加班是很少的，如果你不想去外面的世界翻滚，这里就是你长久生养之地。那个时候我就是一枚螺丝开发，由于业务需求没有那么多，所以每日我只需要自己安排完成一定的工作量即可，有时候需求周期因为各端同事的配合时间也会被拉长，所以其实我大部分时间就是在自己浏览学习，没有实际的业务上手实践。而与此同时，互联网界正在迅猛发展，每天看着的都是各自CEO的诞生，各自融资拿钱拿到手软，这不禁也影响着我。<br>所以，尽管如此，尽管这里是整个互联网最安逸的体现，到了今年的7月份时候，我还是决心离开这温暖的被窝，离开我每日安享的梦境，全心投身创业。我却开始有些难过，因为那是我第一份工作，和去哪儿也是很有缘分的说，跟大家告别的时候特别伤心。一阵心塞之后，我的雄心开始燃烧，总是想着要闯出一片天地，对未来充满希望和无限遐想，想到我会享受着创业成就感与创业艰辛的交织幸福感，内心便激动起来。</p>
<p>加入的创业公司属于互联网汽车行业，与一般不同的是，做的是汽车B2B模式平台。加入前，我和公司的领头人聊得很好，不仅是因为旧相识，谈得更多的是对整个业务未来的展望，他侃侃而谈，把整个行业给我分析了一遍，我似乎找不到哪里一点他说的不对，只有当我问到如果事情没有按照你所推演的发展，这中间出现环节出错误的时候，他才有些避重就轻。当时我的理解，在此投资环境如此之好得情况下，任何一家创业公司的带头人应该都是这幅样子，要利用互联网优势把这个市场搅拌，要让传统行业为我们所用的架势,遇见的问题自然也会有办法。汽车市场如此之大，随便能咬到一口就是丰厚的回报，而早期的成员就自然不言而喻。同时已经拿到投资，数额可观，在此基础上开始讲解了如何去且足以推动整个业务的初期发展，到这里我确实接触到了不少我之前没能接触到的各种环境，且对他的信任，就基本已经奠定我后来加入的格局了。</p>
<p>加入团队后，秉承着我创业的心态一直很有干劲，除了自己分管的一些业务，其他大小事务也有一些参与感，看着产品的不断迭代和上线，我看到了自己努力的结果，心里满足，同时也收获了很多朋友，直到上周五离开，整整5个月了。</p>
<p>那么问题来了，我为何还是选择离开？</p>
<p>事情似乎看着一切进展顺利，产品上线，人员分工合理，但其中的原因并不缺乏，一切可以说只是看起来顺利，可以说常见的创业问题几乎在这个公司都体现出来了，尤其到后来资本市场的寒冬到来，互联网经济受影响，4个月之后出现融资困难，在这时候公司问题更加的突出了。</p>
<p>首先说说产品，因为我是过去做开发的。产品的存在是为了服务公司的业务，开发人员和产品人员每日工作干进度是为了早日将这些服务呈现出来，按照我们的业务形态，产品的主要使用对象是汽车经销商，包括二级和4S在内。当时，产品和技术说现在版本上线了，大家可以推广使用了，却没有啥回应，包括几个带头人，他们对产品的使用好像并不在意，原本该我们的销售人员向对应的经销商开始推广安装使用，却没有一个销售人员相应行动。在团队产品的推进过程中，他们不会关心现在有多少人在使用了，不会关心技术团队的人加班后又做到什么程度了，这只是产品，为什么我单独说产品，因为三个合伙人是有一个专门管产品的，我看到的是他时常悠闲的在购物。</p>
<p>再说说领导的意识和管理，到公司内部的管理也是混乱，涉及到大家过了实习期转正问题的时候，负责人基本不在意，一问就说有事之后再说，一拖就是近10天，我自己倒是干得还可以，也相信负责人，但其中不乏一些刚毕业的学生同事，他们感受到的更多是不幸福，严重降低大家创业积极性，不过这些算是也创业的小问题，在这个创业环境下，我们都可以接受，都可以认为没什么，因为大家在业务兴起的时候，必须各自忙着自己这一块，可能管不了很多。</p>
<p>所以我们来说说，销售业务，这个公司最关键的地方，产品再好，没有业绩没有数据，一切为空。互联网汽车行业，单纯靠互联网的产品哪能，这也许成为前面大家忽视的原因，更多的精力放在了销售业务上，所以从这个角度看过去前面的好像也可以理解。销售团队向各级经销商，通过公司平台进行车源交易，从最初开始，产品技术和销售一起去往同一个地方推广，做销售的事情，活动覆盖了一个省，到现在建立几个省的销售区，规模也是有了。但是到现在，销售的量，汽车的成交量，一直没有突破，一直处于很低的指数，而这同时，最初的投资已经消耗了不少了，直到我离开的时候，销售的业务还是没有起，销售队伍已经快瓦解。公司各个方面的不足导致公司现在人心涣散，那些留下同事的理由唯一就是还有那么些钱可以消耗，可以再观望一阵。后来，到带头人发现有些带不动大家的时候，开始找大家吃饭讲问题，每次一讲都是几个小时。可在又一次的会议上，我们大家一起探讨，说到我们这次离开北京去浙江做到什么程度其实我也不知道，做多久其实我也不知道，最后，他自己也说了一句，要是我们这个没做起来，就换个方向做。我问，什么是换个方向，他说，就是不做这业务了找其他事情做。听到这里的时候，我开始确定我之前的怀疑，看来并不是我自己创业心智不够成熟，是确实这件事情本身存在了我们没能解决的不足。随后，销售团队首先开始离职，技术团队先后离职了，我也就是其中一个。</p>
<p>今天是周一，写了些文字，为了记录一下我这次经历吧，我对整个公司没有什么负面情绪，相反，从领头人到和我工作的同事，大家都对我很照顾，平常也是一起其乐融融的生活，自己也成长进步。倒是这次的经历之后，让我开始反思自己究竟想要做什么，自己适合做什么，写这篇文章不仅是总结，也是分享给其他有兴趣的人看看吧。我给自己mark,让自己以后的路会做到走的更好。</p>
<p>我在咖啡屋里，周围好些人，或看书，或攀谈，抿一口，待会继续投简历。</p>
<blockquote>
<h3 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h3></blockquote>
<p>离我当时离开过了一年半了，我走的时候有一位坚持留下的开发同事走了，去了小米，随后也走了一名产品同事，去了高德地图，那位合伙的产品负责人也走了，去了一家互联网家具公司担任负责人。剩下的其他同事都还在，他们也招了新同事，也改了发展路线，目前在慈溪开了三家汽车品牌服务维修店，大概是做汽车销售品牌的路线。比之前有很多进展，但是要走的路还很长，真的很长，祝愿他们能更快的取得更好的成果。</p>
]]></content>
      
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RunLoop是如何跑起来的]]></title>
      <url>/2015/11/05/RunLoop%E6%98%AF%E5%A6%82%E4%BD%95%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/</url>
      <content type="html"><![CDATA[<h2 id="一、Run-Loop为何存在"><a href="#一、Run-Loop为何存在" class="headerlink" title="一、Run Loop为何存在?"></a>一、Run Loop为何存在?</h2><p>我们从编写命令式的语句开始理解，一般我们写一个运行函数，只要顺序执行，一遍就过了，比如简单的NSLog一个“hello word”，这样我们就算完成了一个问候世界的程序。好简单的程序，但是一个复杂的系统，一个能称之为系统的程序，比如我们的手机App，它是不可能按照执行顺序一下执行完成就结束的，它包含了我们各类需求，会接受我们不同的操作，所以这个程序需要有一个设计的模式能够符合这样的应用场景，能够响应操作。所以，有了Event驱动的模式。</p>
<p>特点：</p>
<ul>
<li>程序可以一直运行并且接受用户的输入</li>
<li>决定程序应该处理哪些Event</li>
<li>主调方不能被被调方卡主，所以需要调用解耦。主调方就发个消息就完事了，就不管了，就可以去做别的了，被调防根据消息去派发、操作等等。这个概念就是(Message Queue) </li>
<li>节省了CPU时间，比如时间片执行，这就是操作系统里的概念。</li>
<li>没事的时候闲着，有事的时候激活它</li>
</ul>
<h2 id="二、Run-Loop-都包含了什么相关内容？"><a href="#二、Run-Loop-都包含了什么相关内容？" class="headerlink" title="二、Run Loop 都包含了什么相关内容？"></a>二、Run Loop 都包含了什么相关内容？</h2><h3 id="1、CF层和F层"><a href="#1、CF层和F层" class="headerlink" title="1、CF层和F层"></a>1、CF层和F层</h3><p>CF层是C写的，跨平台，F层其实不干事的。GCD 有部分联系。</p>
<p><img src="/assets/images/RL_CF.jpg" alt=""></p>
<h3 id="2、常用"><a href="#2、常用" class="headerlink" title="2、常用"></a>2、常用</h3><p>NSTimer 完全依赖于RunLoop，UIEvent 都是RunLoop 跑的，AutoRelease 面试问题</p>
<p><img src="/assets/images/RL_normal.jpg" alt=""></p>
<h2 id="三、RunLoop调用堆栈"><a href="#三、RunLoop调用堆栈" class="headerlink" title="三、RunLoop调用堆栈"></a>三、RunLoop调用堆栈</h2><p><img src="/assets/images/RL_zhan.jpg" alt=""></p>
<h2 id="四、RunLoop构成元素"><a href="#四、RunLoop构成元素" class="headerlink" title="四、RunLoop构成元素"></a>四、RunLoop构成元素</h2><h3 id="1、构成元素"><a href="#1、构成元素" class="headerlink" title="1、构成元素"></a>1、构成元素</h3><p>thread里面不是只能起一个RL，是可以多个的，但是必须嵌套。<br>RunLoop机制存在的一对多的关系，比如Mode和Timer<br>CFRunLoopSurece、CFRunLoopTimer、CFRunLoopObserver，主要的核心就是这三个。</p>
<p><img src="/assets/images/RL_consist.jpg" alt=""></p>
<h3 id="2、对CFRunLoopTimer的封装"><a href="#2、对CFRunLoopTimer的封装" class="headerlink" title="2、对CFRunLoopTimer的封装"></a>2、对CFRunLoopTimer的封装</h3><p>NSTimer、 performSelector:after 、 displayLink</p>
<h3 id="3、对CFRunLoopSurece的理解"><a href="#3、对CFRunLoopSurece的理解" class="headerlink" title="3、对CFRunLoopSurece的理解"></a>3、对CFRunLoopSurece的理解</h3><p>source是RL的数据源的抽象类，类似proctol，定义了两个version的source：</p>
<ul>
<li>source0：处理APP内部的世界、APP自己管理触发，比如UIEvent、CFSocket</li>
<li>source1: 又RL和内核管理，Mach port 驱动 ，进程兼通讯的方式，往某个进程方法可以发到这个port上，对面的进程监听这个port 就是可以获得消息。比如：CFMachPort，CFMessagePort</li>
</ul>
<p><img src="/assets/images/RL_Source0.jpg" alt=""></p>
<h3 id="4、对CFRunLoopServer对外报告状态"><a href="#4、对CFRunLoopServer对外报告状态" class="headerlink" title="4、对CFRunLoopServer对外报告状态"></a>4、对CFRunLoopServer对外报告状态</h3><p>比如我们在CAAnimation数组，多个动画，RL会通过判断依次的状态，将全部收集到一起后再开始执行。</p>
<p><img src="/assets/images/RL_Observer.jpg" alt=""></p>
<h3 id="5、CFRunLoopMode"><a href="#5、CFRunLoopMode" class="headerlink" title="5、CFRunLoopMode"></a>5、CFRunLoopMode</h3><p>RunLoop在同一时间段内，只能在唯一的特点的mode下Run。<br>更换Mode时，需要停止当前的Loop，然后重启动新的Loop。<br>Mode是个保证IOS滑动顺畅的关键，在这个mode下只执行滑动计算相关<br>可以创建自己的mode</p>
<p>NSDefaultRunLoopMode: 默认的<br>UITrackingRunLoopMode:scrollView滑动<br>UIInitializationRunLoopMode: 启动的时候，私有的<br>NSRunLoopCommomModes: 1和2都能执行，作为一个数组，并无优先级</p>
<blockquote>
<p>相关Topic：</p>
</blockquote>
<ul>
<li><p>NSTimer 默认被加入NSDefaultRunLoopMode中，如果不希望被SCrollView影响，让滑动的时候timer也依然进行运行，就需要添加到NSRunLoopCommomModes中。</p>
</li>
<li><p>RunLoopMode切换<br>都是重新起，不是切换回原来的</p>
</li>
</ul>
<p><img src="/assets/images/RL_Mode_Change.jpg" alt=""></p>
<ul>
<li>GCD和Run Loop的联系</li>
</ul>
<p>GCD的计时器是它自己的计时器，只有main queue的时候有关系。Run Loop 会问一下 GCD 你这边在搞事情吗？有的话就抛出来。</p>
<p><img src="/assets/images/RL_GCD.jpg" alt=""></p>
<ul>
<li>Auto Release<br>UIKit 通过的RunLoopServer在RunLoop两次Sleep间对Autorelease进行Pop和Push将这次Loop中产生的AutoRelease对象释放。两圈之间自动释放UI上自动释放池的东西，比如UITouch。</li>
</ul>
<h3 id="六、RunLoop的挂起和唤醒"><a href="#六、RunLoop的挂起和唤醒" class="headerlink" title="六、RunLoop的挂起和唤醒"></a>六、RunLoop的挂起和唤醒</h3><p>CGRunLoopServiceMachPort 的作用就是发送消息，表示暂停还是激活，与内核进行交互。</p>
<p><img src="/assets/images/RL_Port.jpg" alt=""></p>
<h3 id="七、RunLoop的实践"><a href="#七、RunLoop的实践" class="headerlink" title="七、RunLoop的实践"></a>七、RunLoop的实践</h3><p>1、AFNetworking<br>常驻线程，NSURLConnetion需要一个RL常驻，不然跑一次就没了。<br>比如有个需求需要一直在线程里面呆着。</p>
<pre><code>+ (void)networkRequestThreadEntryPoint:(id)__unused object {
@autoreleasepool {
    [[NSThread currentThread] setName:@&quot;AFNetworking&quot;];

    NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
    [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];
    [runLoop run];
}
}
+ (NSThread *)networkRequestThread {
static NSThread *_networkRequestThread = nil;
static dispatch_once_t oncePredicate;
dispatch_once(&amp;oncePredicate, ^{
    _networkRequestThread = [[NSThread alloc] initWithTarget:self selector:@selector(networkRequestThreadEntryPoint:) object:nil];
    [_networkRequestThread start];
});

return _networkRequestThread;
</code></pre><p>}</p>
<p>2、 延迟加载tableview的图片</p>
<pre><code>UIImage *downLoadImage = ...;  
[self.avatarImageView performSelector:@selector(setImage:)  
                    withObject:downloadImage  
                    afterDelay:0  
                    inModes:@[NSDefaultRunLoopMode]];
</code></pre><p>3、让Crash的APP回光返照</p>
<pre><code>// 创建RunLoop
CFRunLoopRef runLoop = CFRunLoopGetCurrent();
// 设置Mode
NSArray *allModes = CFBridgingRelease(CFRunLoopCopyAllModes(runLoop));
// 弹窗告知 程序挂了
UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@&quot;程序崩溃了&quot; message:@&quot;崩溃信息&quot; delegate:nil cancelButtonTitle:@&quot;取消&quot; otherButtonTitles:nil];
[alertView show];
while (1) {
for (NSString *mode in allModes) {
// 快速的切换 Mode  就能处理滚动、点击等事件
CFRunLoopRunInMode((CFStringRef)mode, 0.001, false);
}
}
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FE前端的修炼之道]]></title>
      <url>/2015/10/15/%E5%89%8D%E7%AB%AF%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>转移动端开发之前，曾是名呆萌的FE，在学校的时候还算勤劳，上线了大大小小的产品，冰岩作坊见证了我的成长，认识了很多朋友。如今回顾一下，整理一条前端之路。</p>
</blockquote>
<h2 id="知识谱图"><a href="#知识谱图" class="headerlink" title="知识谱图"></a>知识谱图</h2><p><img src="/assets/images/feTotal.png" alt=""></p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、语言"><a href="#一、语言" class="headerlink" title="一、语言"></a>一、语言</h3><h3 id="1、HTML"><a href="#1、HTML" class="headerlink" title="1、HTML"></a>1、HTML</h3><h4 id="1-1-理解"><a href="#1-1-理解" class="headerlink" title="1.1 理解"></a>1.1 理解</h4><ul>
<li><p><code>HyperText Markup Language</code>超文本标记语言。语言自不必说，超文本意味着『将网页彼此连接链接，超越了传统意义上的书本文字』，标记则说明了语言的特点是描述性的。比如可以通过标签来描述内容：<code>&lt;h1&gt;</code>是一个标题(headline)；<code>&lt;p&gt;</code>是一个段落(paragraph)；<code>&lt;code&gt;</code>是一段代码等等。还可以通过声明属性进一步描述如<code>&lt;input class=&quot;form-inline&quot; id=&quot;gender-input-female&quot; type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;female&quot;&gt;</code>。HTML是一门应当注重语义化的语言，尤其在HTML5的规范中更是强调此，如增加了<code>&lt;article&gt;``&lt;section&gt;</code>等标签。</p>
</li>
<li><p>标签有自闭和和成对闭合两种，具体规则要参考规范，注意自闭合标签结尾的反斜杠不是必须的。常见的自闭合标签是<code>&lt;img&gt;</code>，<code>&lt;input&gt;</code>。</p>
</li>
<li><p>HTML在被浏览器渲染时，会有两种元素，非替换元素指的是其内容无需被浏览器替换，直接显示即可。而替换原素则需要浏览器进行转换才能正常工作，如<code>&lt;img&gt;&lt;textarea&gt;&lt;canvas&gt;</code></p>
</li>
<li><p>HTML中也可以嵌入如SVG等其他语言内容。</p>
</li>
</ul>
<h3 id="2、CSS"><a href="#2、CSS" class="headerlink" title="2、CSS"></a>2、CSS</h3><h4 id="2-1-理解"><a href="#2-1-理解" class="headerlink" title="2.1 理解"></a>2.1 理解</h4><ul>
<li><code>Cascading Style Sheets</code>层叠样式表。表自不必说，样式也是顾名思义，关键点在于层叠。CSS的层叠体现在选择器的关系上：通过选择器的优先级来决定样式的使用与否，能够灵活的控制HTML元素的样式。</li>
<li>一个普通的『规则』由如下部分组成：选择器+声明块（声明由属性：值组成），此外还有@语句，可用于媒体查询、引入文件等，在此略过。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.class &#123;</div><div class="line">    color: rgba(0,0,0,.6);</div><div class="line">    transition: height .3s ease-in-out .5s;</div><div class="line">    -webkit-tap-highlight-color: transparent;</div><div class="line">&#125; </div><div class="line"></div><div class="line">.night .class &#123;</div><div class="line">    color: black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>由于浏览器纷争以及标准的制定落后于市场，CSS存在着很严重的兼容性问题。具体问题暂且不表，但为了解决这些问题，业界目前普遍使用『预处理器』和『后处理器』来增强CSS。</li>
</ul>
<p>a、 预处理器主要是通过对CSS进行改编或扩展行成一种新的语言，然后通过『预处理器』编译为可被浏览器使用的CSS。常见的就是LESS和SCSS。<br>b、 后处理器是指在生成一个标准的CSS后，进行一些列的优化的工具。如用于自动补充各浏览器前缀的autoprefixer；用于去除冗余css的CSSClean等。大都依赖于PostCSS这个工具。</p>
<h3 id="3、JavaScript"><a href="#3、JavaScript" class="headerlink" title="3、JavaScript"></a>3、JavaScript</h3><h4 id="3-1-理解"><a href="#3-1-理解" class="headerlink" title="3.1 理解"></a>3.1 理解</h4><p>这个没有一个明确的翻译，名字里有Java纯粹是为了蹭热度。广义上的JS由其语言核心+DOM+BOM组成。</p>
<ul>
<li>JavaScript有一个比较简单的出生，但有个比较折腾的成长。目前其标准属于EcmaScript（Flash使用的ActionScript也是这个标准下的产物），现在的版本是第7版，正式名是ES2017，前几天刚定稿，老浏览器都不支持，需要通过bable工具转换为第5版才能让绝大多数浏览器正常执行。</li>
<li>JS是弱类型语言，其基本数据类型有number/boolean/string/undefined/symbol/(null)、引用类型object，包括function和array。基本类型按值访问，引用类型按地址访问。基本数据类型用typeof区分，引用类型需要使用instanceof或其特殊的判断方法区分。</li>
<li>在ES5时代变量作用域仅限于函数内，ES6后通过let能指定块级作用于。var存在变量提升，是个bug隐患点。</li>
<li>ES5时代没有定义class，可以通过function+prototype的方式模拟一个类。JS的继承主要是通过原型链实现的：<code>instance.__proto__.....__proto__ === Class.prototype</code>。</li>
<li>DOM（文档对象模型）描述了处理网页内容的方法和接口。如document.getElementById。</li>
<li>BOM（浏览器对象模型）描述了与浏览器进行交互的方法和接口。如location.href。</li>
<li>通过XMLHttpRequest发送HTTP请求，可以通过指定异步的方式实现AJAX。异步请求存在同源限制。</li>
<li>ES6规范中明确了异步操作的推荐做法即Promise。<br>主要理解两点：异步与事件驱动。两者相互结合构成了现在的JS的运行逻辑。</li>
<li>TypeScript<br>微软推出谷歌力捧的JS超集，实现了强类型、类等诸多C++、Java功能，目前也需要通过编译才能执行，未有浏览器原生支持。</li>
</ul>
<h3 id="二、代码执行环境"><a href="#二、代码执行环境" class="headerlink" title="二、代码执行环境"></a>二、代码执行环境</h3><h3 id="1、浏览器"><a href="#1、浏览器" class="headerlink" title="1、浏览器"></a>1、浏览器</h3><ul>
<li>浏览器的历史不过多介绍，当前PC主流有Chrome和IE/Edge两个，其余的Firefox、safari都很小众。这三类都是独自研制开发。移动端上的主流几乎只有Safari和Chrome两种。</li>
<li>单独谈渲染引擎主流的有Webkit(Blink)、Trident、Gecko。单独谈JS引擎主要有V8、charkra等。</li>
</ul>
<h3 id="2、Node-js"><a href="#2、Node-js" class="headerlink" title="2、Node.js"></a>2、Node.js</h3><p>Node.js®是一个基于Chrome V8 引擎的 JavaScript 运行时。 Node.js 使用高效、轻量级的事件驱动、非阻塞 I/O 模型。Node.js 之生态系统是目前最大的开源包管理系统。</p>
<h3 id="三、代码执行流程"><a href="#三、代码执行流程" class="headerlink" title="三、代码执行流程"></a>三、代码执行流程</h3><h3 id="1、编译"><a href="#1、编译" class="headerlink" title="1、编译"></a>1、编译</h3><p>以现阶段的通常情况来看，我们采用超前的ES6、ES7来写JS，用Less写CSS，用React等来实现View，这些代码通过import/export引用和发布。然后通过webpack、fis等工具『编译』成能被浏览器执行的HTML/JS/CSS。</p>
<h3 id="2、部署："><a href="#2、部署：" class="headerlink" title="2、部署："></a>2、部署：</h3><p>其中HTML如果涉及到与后端数据的直接耦合，则被认为是『模板』，部署到相应的接入层逻辑指定的线上地址，而其他内容如.js/.css/.png/.svg等，则与服务端分离，部署在CDN上以提供更快的访问速度。这个过程主要的问题在于如何控制浏览器缓存（HTTP缓存）。</p>
<h3 id="3、访问："><a href="#3、访问：" class="headerlink" title="3、访问："></a>3、访问：</h3><p>从URL被请求到HTML被返回的逻辑就暂且略去，主要谈HTML返回后的过程。<br>这一部分以真实请求的Performance为例讲解吧。不赘述？？？？后续找几篇文章填补空白。</p>
<h3 id="4、JSBridge-链接跳转"><a href="#4、JSBridge-链接跳转" class="headerlink" title="4、JSBridge(链接跳转)"></a>4、JSBridge(链接跳转)</h3><ul>
<li>JS → Native：发特定规则的url，被native拦下来就好了。</li>
<li>Native → JS：Native可以在JSContext中注入代码，或者通过javascript:xxxx这种方式调用。</li>
</ul>
<h3 id="四、常见的问题与debug"><a href="#四、常见的问题与debug" class="headerlink" title="四、常见的问题与debug"></a>四、常见的问题与debug</h3><h3 id="1、如何获取与定位问题"><a href="#1、如何获取与定位问题" class="headerlink" title="1、如何获取与定位问题"></a>1、如何获取与定位问题</h3><ul>
<li>最好用的工具就是chrome的开发者工具了。<h3 id="2、为什么会白页"><a href="#2、为什么会白页" class="headerlink" title="2、为什么会白页"></a>2、为什么会白页</h3></li>
<li>一种是JS的BUG导致的，一般来说在相同文件内的JS会由于错误阻塞运行。也就是上文有错，下文直接挂。当渲染在下文时就容易出现这种问题。</li>
<li>另一种情况比较少见就是在load事件后调用document.write导致。</li>
</ul>
<h3 id="3、XSS与CSRF"><a href="#3、XSS与CSRF" class="headerlink" title="3、XSS与CSRF"></a>3、XSS与CSRF</h3><ul>
<li>XSS是老生常谈的话题了，主要是由于HTML语言的『保留字』（&lt; &gt; ‘ “ ）被直接使用导致，大部分能够通过HTML转义避免。<br>CSRF现在大都不常见了，基本通过加密token校验来避免。<h3 id="4、性能"><a href="#4、性能" class="headerlink" title="4、性能"></a>4、性能</h3></li>
<li>为何觉得卡，是因为人眼的构造决定的，实际上没有连续的动画，动画都是一帧一帧组成的。如果普通大众能接受60帧，那就意味着对HTML的相应操作要在1000/60m=16ms内执行完毕，才不会掉帧。</li>
<li>还是可以通过chrome的preformance工具来进行定位。</li>
</ul>
<h3 id="五、「框架」新时代"><a href="#五、「框架」新时代" class="headerlink" title="五、「框架」新时代"></a>五、「框架」新时代</h3><ul>
<li>jQurey、Bootstrap：这个时代的特点就是乱，文件瞎引用，样式瞎写，但干起活来就是快，维护体验很差。</li>
<li>backbone：开始有了一些思想，主要是类比了MVC，在前端也搞了全套的M-V-C，强调数据-模板（样式）-逻辑分离。</li>
<li>MVVM：再后来开始分化，一些人觉得C不足以表意，因为其实干来干去都是在操作M和V，不如就叫VM，所以是MVVM。另一些人觉得前端这么简单的事儿不要搞复杂留着V就足够了，也就出现了MVVM的代表Angular，和纯View层的代表React。</li>
<li>Vue.js:渐进式框架,Vue 从根本上采用最小成本、渐进增量的设计。Vue 的核心库只专注于视图层，并且很容易与其他第三方库或现有项目集成。</li>
</ul>
<h3 id="六、新技术"><a href="#六、新技术" class="headerlink" title="六、新技术"></a>六、新技术</h3><ul>
<li>PWA：（ Progressive Web Apps，渐进式网页应用）是由谷歌提出的新一代 Web 应用概念，旨在提供可靠、快速、类似 Native 应用的服务方案。</li>
<li>AMP：谷歌提倡的一些列『最佳实践』，通过实现这些最佳实践，大概率能让你的网站速度飙升。</li>
<li>reactNative、Weex：以虚拟DOM技术为核心，尝试将其用非Web技术渲染执行。</li>
<li>webSocket：在HTTP2出现以前，提供的一个基于TCP的socket应用接口，全双工、可二进制传输是其特点。</li>
<li>WebGL：基于canvas和OpenGL，使得web也能进行大型游戏和渲染场景的制作。</li>
<li>WASM：厉害了，所有能被JS实现的最终都会被JS实现。类似安卓的so。</li>
<li>微信小程序：个人理解是：对现有限制浏览器体验的内容删减，纯数据驱动以限制web能力，缓存模板甚至缓存运行时以提升性能，提供了一个本质还是浏览器的东西。</li>
<li>Electron： 打包一个浏览器，钉钉。</li>
</ul>
<h3 id="七、讨论"><a href="#七、讨论" class="headerlink" title="七、讨论"></a>七、讨论</h3><ul>
<li>对残障人士更友好的网页：这个话题里中国比较远，下一题。</li>
<li>HybridApp：这个题好，其实非核心功能和弱交互功能，完全可以交给web实现。而web主要性能受限的网络则可以通过Hybrid的方式预先集成到App内部，需要时就能立刻提供服务。类似PWA。</li>
<li>参考书籍与站点 ：<br>《JavaScript高级程序设计》、《深入理解ES6》、Google Developer Docs、Mozilla Web Docs</li>
<li>常用工具 ：caniuse 查兼容性的神器、tinypng 压缩图片好工具</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Native与Web的通信桥]]></title>
      <url>/2015/09/10/Native%E4%B8%8EWeb%E7%9A%84%E9%80%9A%E4%BF%A1%E6%A1%A5/</url>
      <content type="html"><![CDATA[<h2 id="一、Webview方式："><a href="#一、Webview方式：" class="headerlink" title="一、Webview方式："></a>一、Webview方式：</h2><h3 id="1、JS调用Native"><a href="#1、JS调用Native" class="headerlink" title="1、JS调用Native"></a>1、JS调用Native</h3><h3 id="1-1-webview加载流程"><a href="#1-1-webview加载流程" class="headerlink" title="1.1 webview加载流程"></a>1.1 webview加载流程</h3><ul>
<li>发起一个网页请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)loadRequest:(NSURLRequest *)request</div></pre></td></tr></table></figure>
<ul>
<li>代理回调判断是否加载当前请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (BOOL)webView:(UIWebView *)webView </div><div class="line">shouldStartLoadWithRequest:(NSURLRequest *)request </div><div class="line">navigationType:(UIWebViewNavigationType)navigationType;</div></pre></td></tr></table></figure>
<ul>
<li>开始请求的时机</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)webViewDidStartLoad:(UIWebView *)webView;</div></pre></td></tr></table></figure>
<ul>
<li>成功完成加载请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView;</div></pre></td></tr></table></figure>
<ul>
<li>请求失败</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error;</div></pre></td></tr></table></figure>
<h3 id="1-2-URL拦截"><a href="#1-2-URL拦截" class="headerlink" title="1.2 URL拦截"></a>1.2 URL拦截</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">- (BOOL)webView:(UIWebView *)webView </div><div class="line">shouldStartLoadWithRequest:(NSURLRequest *)request </div><div class="line">navigationType:(UIWebViewNavigationType)navigationType</div><div class="line">&#123;</div><div class="line">   //JS发起的nativePage调用</div><div class="line">	if ([request.URL.scheme isEqualToString:@&quot;SchemeName&quot;]) &#123;</div><div class="line">       </div><div class="line">       //这里是应用内部的schema跳转分发逻辑</div><div class="line">       [Router openNewPage:url];</div><div class="line">       //返回NO，不打开新网页</div><div class="line">       return NO; </div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   //JS发起的事件Bridge调用</div><div class="line">   if([request.URL.scheme isEqualToString:@&quot;JSBridgeName&quot;])</div><div class="line">   &#123;</div><div class="line">        //这里是应用内部的JS事件处理逻辑分发</div><div class="line">       [JSBridgeManager dealWithAction:url webView:webView];</div><div class="line">       //返回NO，不打开新网页</div><div class="line">       return NO; </div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   return YES;//默认打开请求</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-3-请求分发"><a href="#1-3-请求分发" class="headerlink" title="1.3 请求分发"></a>1.3 请求分发</h3><p>注意上面的Router，其实也可以用JSBridgeManager事件进行分发，跟进传入的参数来判定即可，这里单独提炼出去，可以更好使得业务功能拆分复用。</p>
<p>拦截下JS的请求后，我们开始构建自己的JSBridgeManager。</p>
<ul>
<li>定义我们执行JS事件的webview为JSWebView，包含对应执行JS的方法</li>
<li>和前端约定一个固定接口，当前webview执行JS事件的时候，暴露一个方法给Native，Native调用来获取执行事件的时候所需要的额外信息，此处定义为”JSBridgeManager._fetchInfo()”</li>
<li>获取完返回的信息后执行解析为一个数组，数组里面每一个对象都是一个可执行的命令体，通过转化我们定义命令体对象JSCommand</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//消息类型</div><div class="line">@property(nonatomic, copy) NSString *messageType;</div><div class="line">//事件ID</div><div class="line">@property(nonatomic, copy) NSString *eventID;</div><div class="line">//回调ID</div><div class="line">@property(nonatomic, copy) NSString *callbackID;</div><div class="line">//消息参数</div><div class="line">@property(nonatomic, copy) NSDictionary *params;</div><div class="line">//前端传过来的方法名</div><div class="line">@property(nonatomic, copy) NSString *fullName;</div><div class="line">//方法名</div><div class="line">@property(nonatomic, copy) NSString *methodName;</div></pre></td></tr></table></figure>
<ul>
<li>定义一个JSForwardManager对象,专门用于转发命令，根据native的本地协定好的方法名和格式，动态消息转发。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)dealWithAction:(NSURLRequest *)request withWebView:(JSWebView *)webView &#123;</div><div class="line">    NSURL *url = request.URL;</div><div class="line">    </div><div class="line">    if (![webView respondsToSelector:@selector(ttr_evaluateJavaScript:completionHandler:)]) &#123;</div><div class="line">        return NO;</div><div class="line">    &#125;</div><div class="line">    [webView evaluateJavaScript:@&quot;;window.JSBridgeManager &amp;&amp; JSBridgeManager._fetchInfo();&quot; completionHandler:^(id result, NSError *error) &#123;</div><div class="line">        NSArray *messagesData = [result JSONValue];</div><div class="line">        for(NSDictionary *messageData in messagesData) &#123;</div><div class="line">            JSCommand *command = [[JSCommand alloc] initWithDictonary:messageData];</div><div class="line">            [[JSForwardManager sharedInstance] forwardJSBWithCommand:command engine:webView completion:^(TTRJSBMsg msg, NSDictionary *response) &#123;</div><div class="line">                [self invokeJSBCallbackWithCommand:command msg:msg data:response webView:webView];</div><div class="line">            &#125;];;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>处理传入进来的命令，根据JSCommand查找本地规则对应的JSPlugin，JSPlugin则是各个JS事件对应调用的实际Native对象，该对象由业务方自己实习，继承自JSPlugin，最后通过NSInvocation直接调用对应的方法。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- (BOOL)forwardDynamicPluginWithCommand:(JSCommand *)command engine:(id&lt;JSEngine&gt;)engine completion:(JSResponse)completion &#123;</div><div class="line">    </div><div class="line">    NSString *selectorStr = [command.methodName stringByAppendingString:@&quot;WithParam:callback:webView:controller:&quot;];</div><div class="line">    SEL selector = NSSelectorFromString(selectorStr);</div><div class="line">    </div><div class="line">    JSPlugin *plugin = [self _generatePluginWithCommand:command engine:engine];</div><div class="line">    if (![plugin respondsToSelector:selector]) &#123;</div><div class="line">        return NO;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSMethodSignature *signature = [plugin methodSignatureForSelector:selector];</div><div class="line">    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];</div><div class="line">    invocation.target = plugin;</div><div class="line">    invocation.selector = selector;</div><div class="line">    </div><div class="line">    NSDictionary *params = command.params;</div><div class="line">    [invocation setArgument:&amp;params atIndex:2];</div><div class="line">    [invocation setArgument:&amp;completion atIndex:3];</div><div class="line">    [invocation setArgument:&amp;engine atIndex:4];</div><div class="line">    UIViewController *source = engine.ttr_sourceController;</div><div class="line">    [invocation setArgument:&amp;source atIndex:5];</div><div class="line">    </div><div class="line">    [invocation invoke];</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>注意此处的completion回调，会返回去执行原来传进来的block，这里的JSResponse类都由本地实现和定义，最后在原webview里面执行脚本JS方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[self invokeJSBCallbackWithCommand:command msg:msg data:response webView:webView];</div><div class="line"></div><div class="line">[self evaluateJavaScriptFromString:javaScriptString completionBlock:completionHandler];</div></pre></td></tr></table></figure>
<h3 id="2、Native调用JS"><a href="#2、Native调用JS" class="headerlink" title="2、Native调用JS"></a>2、Native调用JS</h3><p>与上述最后一步回调一样，实际就是webview的一个执行JS的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (nullable NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)script;</div></pre></td></tr></table></figure>
<h2 id="二-基于JavaScriptCore"><a href="#二-基于JavaScriptCore" class="headerlink" title="二. 基于JavaScriptCore"></a>二. 基于JavaScriptCore</h2><h3 id="1、JS调用Native-1"><a href="#1、JS调用Native-1" class="headerlink" title="1、JS调用Native"></a>1、JS调用Native</h3><h3 id="1-1-获取当前JS环境"><a href="#1-1-获取当前JS环境" class="headerlink" title="1.1 获取当前JS环境"></a>1.1 获取当前JS环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.JSContext = [self.baseWebView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</div></pre></td></tr></table></figure>
<h3 id="1-2-在Native定义JS环境对象"><a href="#1-2-在Native定义JS环境对象" class="headerlink" title="1.2 在Native定义JS环境对象"></a>1.2 在Native定义JS环境对象</h3><p>利用JSExport接口定义一套自己的业务接口协议，实现此协议的对象，可以放入JSContext环境中直接作为同名的JS方法调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#import &lt;JavaScriptCore/JavaScriptCore.h&gt;</div><div class="line">@protocol BaseWebObjProctol &lt;JSExport&gt;</div><div class="line"></div><div class="line">//网页打开本地</div><div class="line">- (void)openNativePage:(id)param;</div><div class="line"></div><div class="line">//登录</div><div class="line">- (void)login;</div><div class="line"></div><div class="line">//调用分享接口</div><div class="line">- (void)shareToOthers;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@interface BaseWebObj : NSObject&lt;BaseWebObjProctol&gt;</div><div class="line"></div><div class="line">@property (nonatomic,strong) BaseWebVC *webVC;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h3 id="1-3-注入JS对象"><a href="#1-3-注入JS对象" class="headerlink" title="1.3 注入JS对象"></a>1.3 注入JS对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</div><div class="line">&#123;</div><div class="line">    //初始化</div><div class="line">    BaseWebObj *webObj = [[BaseWebObj alloc] init];</div><div class="line">    webObj.webVC = self;</div><div class="line">    self.JSContext[@&quot;nativeApp&quot;] = webObj;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-4-JS调用示例"><a href="#1-4-JS调用示例" class="headerlink" title="1.4 JS调用示例"></a>1.4 JS调用示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.nativeApp.openUrlPage(dictionary)</div></pre></td></tr></table></figure>
<h3 id="2、Native调用JS-1"><a href="#2、Native调用JS-1" class="headerlink" title="2、Native调用JS"></a>2、Native调用JS</h3><p>与上述最后一步回调一样，实际就是webview的一个执行JS的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@interface JSContext : NSObject</div><div class="line">- (JSValue *)evaluateScript:(NSString *)script;</div></pre></td></tr></table></figure>
<h2 id="三、调试"><a href="#三、调试" class="headerlink" title="三、调试"></a>三、调试</h2><ul>
<li>手机: 设置-&gt;Safari-&gt;高级-&gt;打开web检查器</li>
<li>Safari: Safari-&gt;首选项-&gt;高级-&gt;打开 ‘在菜单中显示开发’ 选项</li>
<li>调试流程:Safari-&gt;开发-&gt;找到需要调试的设备-&gt;找到需要调试的页面</li>
<li>BTW: 可用于检测WebView实例的内存泄露</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自动布局 Masonry]]></title>
      <url>/2015/07/22/%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%20Masonry/</url>
      <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>苹果出了新机型后需要进行适配，同时也给开发者提供了一套自动布局方案NSLayoutConstraint,不仅可以代码中实现约束，还可以在Xib上实现直接的约束。不过说实在的，因为它那冗长而又丑爆的语法，写一个约束要写那么多行，几个视图下来的代码结构比较难看，因此我是拒绝使用的，好在Masonry对它进行了友好封装，所以我才没有放弃对它更上一层的使用。</p>
<h3 id="二、Masonry"><a href="#二、Masonry" class="headerlink" title="二、Masonry"></a>二、Masonry</h3><h3 id="1、常规用法"><a href="#1、常规用法" class="headerlink" title="1、常规用法"></a>1、常规用法</h3><p>比如我们要写一个视图，他距离父视图的上边77pt,距离左边4pt,超出右边10pt,距离下边20pt,使用如下写法比系统自带的语法简洁很多，由于masonry的链式语法使你能够连续调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">UIView *view = [[UIView alloc]init];</div><div class="line">    </div><div class="line">[self.view addSubview:view];</div><div class="line">    </div><div class="line">[view1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.top.equalTo(self.view.mas_top).with.offset(77);</div><div class="line">        make.left.equalTo(self.view.mas_left).with.offset(4);</div><div class="line">        make.bottom.equalTo(self.view.mas_bottom).with.offset(-10);</div><div class="line">        make.right.equalTo(self.view.mas_right).with.offset(20);</div><div class="line"> &#125;];</div></pre></td></tr></table></figure>
<h3 id="2、链式语法"><a href="#2、链式语法" class="headerlink" title="2、链式语法"></a>2、链式语法</h3><p>接下来我们分析下，是如何在OC的语法中实现链式调用的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *))block &#123;</div><div class="line">    self.translatesAutoresizingMaskIntoConstraints = NO;</div><div class="line">    MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:self];</div><div class="line">    block(constraintMaker);</div><div class="line">    return [constraintMaker install];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先第一个方法可以看到，我们将block实现，但是在方法内部就直接执行了block,其实就相当于调用了一次，进来先关闭了视图的系统默认约束，然后创建了一个MASConstraintMaker并将它传回，这样我们才能在block内部进行约束赋值。用于方法属于view的一个category分类，所以此处就将MASConstraintMaker与View进行了绑定。我看接着看.top方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint *)top &#123;</div><div class="line">    return [self addConstraintWithLayoutAttribute:NSLayoutAttributeTop];</div><div class="line">&#125;</div><div class="line">- (MASConstraint *)addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute &#123;</div><div class="line">    return [self constraint:nil addConstraintWithLayoutAttribute:layoutAttribute];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute &#123;</div><div class="line">    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:self.view layoutAttribute:layoutAttribute];</div><div class="line">    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</div><div class="line">    if ([constraint isKindOfClass:MASViewConstraint.class]) &#123;</div><div class="line">        //replace with composite constraint</div><div class="line">        NSArray *children = @[constraint, newConstraint];</div><div class="line">        MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] initWithChildren:children];</div><div class="line">        compositeConstraint.delegate = self;</div><div class="line">        [self constraint:constraint shouldBeReplacedWithConstraint:compositeConstraint];</div><div class="line">        return compositeConstraint;</div><div class="line">    &#125;</div><div class="line">    if (!constraint) &#123;</div><div class="line">        newConstraint.delegate = self;</div><div class="line">        [self.constraints addObject:newConstraint];</div><div class="line">    &#125;</div><div class="line">    return newConstraint;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到在赋值到最后的返回值是依旧是一个MASViewConstraint对象，所以top和left、right、bottom是一样的使用。我们再来看equal_To和with以及offset</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint * (^)(id))equalTo &#123;</div><div class="line">    return ^id(id attribute) &#123;</div><div class="line">        return self.equalToWithRelation(attribute, NSLayoutRelationEqual);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (MASConstraint *)with &#123;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (MASConstraint * (^)(CGFloat))offset &#123;</div><div class="line">    return ^id(CGFloat offset)&#123;</div><div class="line">        self.offset = offset;</div><div class="line">        return self;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到block的参数是需要赋的值，返回值则是可以进行下一轮赋值的MASConstraint，而这个block作为参数的时候,这个block是由外部来实现,内部调用的，当block作为返回值的时候,这个block是由内部来实现,外部调用的。通过将block作为参数和返回值，从而就实现了链式调用的语法。</p>
<p>3、使用注意</p>
<ul>
<li>约束视图对象只有在被addSubview之后，才能给视图添加约束</li>
<li>动画的使用是在更新约束之后调用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[view.superview layoutIfNeeded];//强制绘制</div></pre></td></tr></table></figure>
<ul>
<li>masony由于是对系统api的封装，在视图数量较多和列表复用的使用会有性能问题</li>
<li>masonry和其他frame约束同时使用会有不可控问题发生</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的博客诞生]]></title>
      <url>/2014/11/07/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AF%9E%E7%94%9F/</url>
      <content type="html"><![CDATA[<p>早在之前就尝试过自己搭建的个人博客，想积累写写技术知识点和生活上的见闻，希望它作为自己个人的回忆。通常我们会在一些博客网站注册，比如博客园，但界面设计和交互已经跟不上时代。后来出了一些品质比较高的静态博客等，也尝试去使用过，最后还是选择了使用博客组件去搭建，因为总觉得独立的才是自己的，大概程序员的内心都流淌着这样的独白。</p>
<p>博客搭建框架组件很多，从WordPress到FarBox、Jekyll、Octopress等等，他们基本都配合github使用,在网上各路大神的推荐之下，试过几款框架,基本都是在读完安装说明并开始有点小激动的时候，痛苦的安装过程让我放弃了这一方式，一方面是，当时正值自己大学的时候使用的电脑很挫，一个奔腾处理器转圈都要转半天，另一方面就是翻墙网络也不稳定，安装搭建环境的过程总是各种安装失败，算了，然后就GG了。</p>
<p>万万没想到，我还是搭建了自己的博客。没有使用上述的哪种框架,前面的过程学习也大概知道了博客的搭建方式，索性自己就用FW设计了个人博客的UI界面，正好也会前端FE，就手写了博客页面Css和JS，这样博客的结界面就出来了，自己动手丰衣足食。当然写出来的是个静态页面，通过JS去读TXT的字符串来收到添加到页面结构，我自定好规则，写好CSS选择器，整体来说是可以用的，但是对于文章发布始终是不方便的。于是搜索查找了一个python脚本，动态读取文件，只需要专心的写文字就好，随后可上传到github通过域名映射直接展示。这样，我就搭建好了自己的博客1.0，因为界面等从头到尾都是我自己设计后用代码自己一行一行写的，非常符合我自己的审美设计要求，所以很满意，简直高端大气上档次！</p>
<p>上个截图,看一看画风：</p>
<p><img src="/assets/images/blog1.0.jpg" alt=""></p>
<p>到后来，接触到Hexo,发现功能、模板、发布，都有很好的扩展。Hexo的使用上手也很快，几乎是1小时就搭建完成了博客，这速度让我为之欢呼，所以决定转到Hexo来写作，那么，这里就写个文章来推荐一下吧。</p>
<h2 id="正文使用"><a href="#正文使用" class="headerlink" title="正文使用"></a>正文使用</h2><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><ul>
<li><p>你得有自己的域名，买域名的地方比较多，有的坑有的好，我是在godaddy上买的。</p>
</li>
<li><p>买了之后到dnspod上建立自己的域名映射</p>
</li>
<li><p>注册github账号，你将会免费使用到它提供的各种便利而强大的功能，免费的存储空间，下载开源项目等等，重写CNAME，把你的域名映射到github默认的博客地址上</p>
</li>
<li><p>安装Node.js, npm</p>
</li>
<li><p>安装git,生成SSH-KEY管理权限，配置域名到github关联</p>
</li>
</ul>
<h3 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h3><p>1、hexo程序环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure>
<p>2、hexo工程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init 文件夹名称</div><div class="line">cd 文件夹名称</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>3、会得到文件夹目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├ ── _config.yml</div><div class="line">├ ── package.json</div><div class="line">├ ── scaffolds</div><div class="line">├ ── source</div><div class="line">├ ── _drafts</div><div class="line">├ ── _posts</div><div class="line">└ ── themes</div></pre></td></tr></table></figure>
<ul>
<li>_config.yml 文件是网站的配置文件，可以在其中配置网站的大部分参数。</li>
<li>package.json 文件是应用程序的信息。</li>
<li>source 是资源文件夹，是用来存放用户资源的地方。</li>
<li>themes 是主题文件夹，Hexo会根据主题来生成不同的静态页面。</li>
<li>scaffolds是模板件夹，当新建文章的时候，Hexo会根据模板来建立文件。</li>
</ul>
<h5 id="三、生成第一篇文章"><a href="#三、生成第一篇文章" class="headerlink" title="三、生成第一篇文章"></a>三、生成第一篇文章</h5><p>1、创建文章</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new 你的文章名称</div></pre></td></tr></table></figure>
<p>2、编辑你的文章</p>
<p>上面一步在你对应的文件夹下新建了一个Markdown文件，此时需要你使用对应的语法去编写文档，不知道的可以去学习下，用语言命令号来写Word文档，该有的有，不该有的没有，简直就是最爱</p>
<p>3、编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>此时打开你的浏览器，默认地址是（ <a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://0.0.0.0:4000/</a> ），你就可以看到你的文章了，就是你刚才编写的文章。  </p>
<h5 id="四、发布到github"><a href="#四、发布到github" class="headerlink" title="四、发布到github"></a>四、发布到github</h5><p>由于前面你做好了准备工作里面包含了使用github当做静态博客地址，<br>你有一个repository事对应自己的name.github.io，前面已经完成了域名的映射，所以这里只需要提交，和你在（ <a href="http://0.0.0.0:4000" target="_blank" rel="external">http://0.0.0.0:4000</a> ）看到的一毛一样了。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git commit -a -m &quot;***文章&quot;</div><div class="line">git push</div></pre></td></tr></table></figure>
<h5 id="五、关于主题"><a href="#五、关于主题" class="headerlink" title="五、关于主题"></a>五、关于主题</h5><p>已经用Hexo构建好了站点，但是使用的主题是hexo默认的landscape，这个风格确实不是我喜欢的，画风不是我的style。所以我们来看下如何变更主题。</p>
<p>1、查找喜欢的主题</p>
<ul>
<li>官网上 <a href="https://hexo.io/themes/" target="_blank" rel="external">查询</a> </li>
<li>github上 <a href="https://github.com/search?utf8=%E2%9C%93&amp;q=hexo&amp;type=" target="_blank" rel="external">搜索</a> </li>
</ul>
<p>2、下载主题包</p>
<ul>
<li>解压到前面theme文件夹下</li>
<li>在前面_config.yml文件里面，修改theme：your theme name</li>
</ul>
<p>3、安装依赖</p>
<p>默认主题已经包含了一些依赖包，但是hexo里每个不同的主题所依赖的包都不尽相同。比如有的主题示使用到Jade构建还需要执行下面的依赖安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</div><div class="line"></div><div class="line">npm install --save hexo-deployer-git hexo-generator-json-content hexo-generator-search</div></pre></td></tr></table></figure>
<p>安装完后，依旧走上面的两个编译命令即可。</p>
<p>4、前后主题对比</p>
<p><img src="/assets/images/blog2.0.jpg" alt=""></p>
<p><img src="/assets/images/blog3.0.jpg" alt=""></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>对于Hexo的使用，前后只介绍了关键的几个命令，可以快速搭建，都是基础入门很方便，麻烦的到是前面的准备工作，得一步步挨着来。Hexo的扩展功能强大且自由，直接浏览Hexo的官网可学习。</p>
<!--![](/assets/images/aoteman.png)-->
]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[引用计数MRC、ARC与属性修饰符]]></title>
      <url>/2014/11/02/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0MRC%E3%80%81ARC%E4%B8%8E%E5%B1%9E%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h2 id="一、MRC"><a href="#一、MRC" class="headerlink" title="一、MRC"></a>一、MRC</h2><h3 id="1、内存管理问题"><a href="#1、内存管理问题" class="headerlink" title="1、内存管理问题"></a>1、内存管理问题</h3><p>传统的内存管理方式都需要业务代码自己处理，比如C和C++,程序员自己控制对象的使用周期，进行生成和释放。随着代码越来越复杂和人员的流动，就会出现无法确定的代码，如果内存对象一直留在那里，没人敢释放，整个程序占用的空间越来越大；胆大的人释放了可能导致crash。尽管遵循一些“谁创建谁释放”、“谁持有谁释放” 的原则，但依旧导致存储空间的浪费：为了保留仅仅一个内存对象，却要将与它关联的一大堆对象保留住，然而其中大部分已经不再使用了。</p>
<h3 id="2、解决方式"><a href="#2、解决方式" class="headerlink" title="2、解决方式"></a>2、解决方式</h3><p>就是引用计数。所有使用到同一内存对象的地方，使用者只要保证自己 retain 一次，release 一次，不用管别人是否使用。这样就实现了内存管理的分离，这就是MRC。当你使用new、alloc、copy方法创建一个对象时，该对象的保留计数器值为1.当不再使用该对象时，你要负责向该对象发送一条release或autorelease消息。当这个对象本身的引用计数为0时，就会被系统销毁。如果还有别处对它的引用，它就还在继续存在。<br>所有的内存管理是需要程序员手写代码控制的，一般就是持有操作和释放操作。<br>原则：谁持有，谁释放，不持有，不能释放，不再需要时，主动释放。</p>
<h2 id="二、-ARC"><a href="#二、-ARC" class="headerlink" title="二、 ARC"></a>二、 ARC</h2><h3 id="1、本质"><a href="#1、本质" class="headerlink" title="1、本质"></a>1、本质</h3><p>ARC只是相对于MRC的一次改进，但它和之前的技术本质上没有区别。它会默认在程序代码合适的位置呗对象增加计数和释放计数对象，其实就是MRC那些繁琐的操作给默认自动化了。当然ARC本身的特性是有区别的。</p>
<p>ARC是编译器时特性，而不是运行时特性。系统在运行时统一管理所有内存对象的释放，会导致增加额外的内存和 CPU 开销，程序员们依然在努力降低内存和CPU消耗。</p>
<h3 id="2、开关切换"><a href="#2、开关切换" class="headerlink" title="2、开关切换"></a>2、开关切换</h3><p>在target中找到对应的文件可以进行配置。</p>
<p>打开ARC：-fobjc-arc<br>关闭ARC：-fno-objc-arc</p>
<h2 id="三、修饰符"><a href="#三、修饰符" class="headerlink" title="三、修饰符"></a>三、修饰符</h2><h3 id="1、属性修饰符"><a href="#1、属性修饰符" class="headerlink" title="1、属性修饰符"></a>1、属性修饰符</h3><h4 id="1-1-存取类型"><a href="#1-1-存取类型" class="headerlink" title="1.1 存取类型"></a>1.1 存取类型</h4><p>任何属性都可以声明为readwrite或readonly，且默认设置为readwrite。</p>
<p>readwrite：程序自动创建setter/getter方法。<br>readonly：程序之创建getter方法。<br>此外，还可以自定义setter/getter方法。</p>
<h4 id="1-2-原子性"><a href="#1-2-原子性" class="headerlink" title="1.2 原子性"></a>1.2 原子性</h4><p>atomic是Objc使用的一种线程保护技术，基本上来讲，是防止在写未完成的时候被另外一个线程读取，造成数据错误。而这种机制是耗费系统资源的，所以在iPhone这种小型设备上，如果没有使用多线程间的通讯编程，那么nonatomic是一个非常好的选择。</p>
<h4 id="1-3-生命周期管理"><a href="#1-3-生命周期管理" class="headerlink" title="1.3 生命周期管理"></a>1.3 生命周期管理</h4><blockquote>
<h3 id="MRC"><a href="#MRC" class="headerlink" title="MRC"></a>MRC</h3></blockquote>
<ul>
<li>assign:</li>
</ul>
<p>默认类型。简单赋值，不更改引用计数。unsafe_unretained 修饰“基础数据类型”并不会报错，在实际使用时，与 assign 是完全等价的。</p>
<ul>
<li>copy:</li>
</ul>
<p>会拷贝传入的对象（即创建一个引用计数为1的新对象，但是内容与传入对象相同），并把新对象赋值给实例变量。常用与NSString,NSArray,NSDictionary,NSSet等。</p>
<ul>
<li>retain: </li>
</ul>
<p>释放旧对象，并使传入的新对象引用计数+1。此属性只能用于NSObject及其子类，而不能用于Core Foundation。</p>
<blockquote>
<h3 id="ARC"><a href="#ARC" class="headerlink" title="ARC"></a>ARC</h3></blockquote>
<ul>
<li>strong: </li>
</ul>
<p>默认类型，强引用，类似于retain。要求保留传入的对象，并放弃原有对象。</p>
<ul>
<li>weak: </li>
</ul>
<p>弱引用，不会使传入的对象引用计数+1。类似于assign，但与assign不同的是，当它们指向的对象被释放后，weak会被自动置为nil，而assign则不会，所以assign会导致“野指针”的出现，weak可以避免悬空指针。使用附有 weak 修饰符的变量会自动注册到 autoreleasepool。如果大量使用 weak 修饰的变量，则会消耗相应的 CPU 资源。良策是只在需要避免循环引用时使用 weak。</p>
<ul>
<li>unsafe_unretained: </li>
</ul>
<p>其实质等同于assign。与weak的区别就是指向的对象如果被释放，其不会被置为nil，而导致悬空指针的出现。它是ARC模式下非对象属性的默认值。</p>
<blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3></blockquote>
<ul>
<li><p>strong/retain,两者等价。</p>
</li>
<li><p>assign/unsafe_unretained，两者修饰非对象属性等价。</p>
</li>
<li><p>默认属性：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MRC：(atomic, readwrite, assign)</div><div class="line">ARC下对象类型属性：(atomic, readwrite, strong)</div><div class="line">ARC下非对象类型：(atomic, readwrite, unsafe_unretained)</div></pre></td></tr></table></figure>
<h3 id="2、变量关键字修饰符"><a href="#2、变量关键字修饰符" class="headerlink" title="2、变量关键字修饰符"></a>2、变量关键字修饰符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">_string: 是默认引用类型的关键字。</div><div class="line">__weak: 声明一个可以自动置nil的弱引用。</div><div class="line">__unsafe_unretained: 弱引用，但是当指向对象被释放时，不会被置nil。所以会导致野指针的出现。</div><div class="line">__autoreleasing:用来修饰一个函数的参数，这个参数会在函数返回的时候被自动释放。</div></pre></td></tr></table></figure>
<ul>
<li>对应关系：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">strong：__strong修饰符</div><div class="line">retain：__strong修饰符</div><div class="line">assign：__unsafe_unretained修饰符</div><div class="line">unsafe_unretained：__unsafe_unretained修饰符</div><div class="line">weak：__weak修饰符</div><div class="line">copy：__strong修饰符(但是赋值的是被复制的对象)</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[懒散的中秋节]]></title>
      <url>/2014/09/08/%E6%87%92%E6%95%A3%E7%9A%84%E4%B8%AD%E7%A7%8B%E8%8A%82/</url>
      <content type="html"><![CDATA[<p>从7月到北京，忙忙碌碌的工作生活中已经度过两个月，在北京的生活轨迹也逐渐清晰起来，每天都那么的忙当然也很充实，我很喜欢这加互联网公司，也喜欢和一起入职的同事玩，大家都很奈斯。但有的时候，我会喜欢自己静静的呆着，即使什么也不做。昨天前天都出游了就没再打算出去，推掉了聚会活动，希望独自的过一个自由自在的周末，这些时间都是我自己的，而今天却恰好是中秋节，安静的睡下，安静的醒来.</p>
<p>早晨收到了中秋的祝福短信，我都一一的回复了，祝他们也中秋快乐。随后平兄打来电话说下午约一波，说希望和我吃个中饭，我随后起来洗漱。平兄来了一起做了一顿饭，他和我讲起宽宽的故事，故事是这样的—-小红说：长得就像大盘鸡……..故事很短，我俩笑得不行。饭后，平兄在我这睡了一觉，就回学校去了。</p>
<p>看着窗外蓝色的天空，温暖的阳光里，我决定出去走走，拿起相机，穿上背心，带双拖鞋，出门去。北京一直让人笼罩在阴霾里，而夏日的晴天却格外的美丽。心情很好，我走在街上，拍着路过的车辆和行人，走上天桥，仰望着天空，这里开始令我心生喜欢。走在人大的校园里，依旧能感受到学生时代的美好，拍了学校里的一些风景，慢悠悠的又回到家里。我翻阅拍摄的照片，发现自己在处理光线阴暗的条件下存在不足，相当老湿还是得加油学习啊。</p>
<p>躺在沙发上，给爸妈打通电话，也问候正在拍婚纱照的姐姐，家人隔得很远，意识到这点的时候却又是今天的中秋节。翻阅通讯录，尝试去问候许久未见的朋友，却又觉得依旧不过是太阳升起溪水长流，可能这就是我的性格吧。</p>
<p>电话响起，室友说今晚中秋一起做晚饭吃，我说，好。初到北京就和现在的室友相识合租在一起，兴趣相投性格随性，谈笑甚欢。</p>
]]></content>
      
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[毕业照]]></title>
      <url>/2014/06/26/%E6%AF%95%E4%B8%9A%E7%85%A7/</url>
      <content type="html"><![CDATA[<h2 id="冰岩作坊"><a href="#冰岩作坊" class="headerlink" title="冰岩作坊"></a>冰岩作坊</h2><p><img src="/assets/myPhoto/0.jpg" alt=""></p>
<h2 id="彩云之南"><a href="#彩云之南" class="headerlink" title="彩云之南"></a>彩云之南</h2><p><img src="/assets/myPhoto/2.jpg" alt=""></p>
<p><img src="/assets/myPhoto/3.jpg" alt=""></p>
<p><img src="/assets/myPhoto/4.jpg" alt=""></p>
<!--![](/assets/myPhoto/5.jpg)-->
<p><img src="/assets/myPhoto/6.jpg" alt=""></p>
<p><img src="/assets/myPhoto/7.jpg" alt=""></p>
<p><img src="/assets/myPhoto/8.jpg" alt=""></p>
<p><img src="/assets/myPhoto/9.jpg" alt=""></p>
<h2 id="校园毕业照"><a href="#校园毕业照" class="headerlink" title="校园毕业照"></a>校园毕业照</h2><p><img src="/assets/myPhoto/10.jpg" alt=""></p>
<p><img src="/assets/myPhoto/11.jpg" alt=""></p>
<p><img src="/assets/myPhoto/12.jpg" alt=""></p>
<p><img src="/assets/myPhoto/13.jpg" alt=""></p>
<p><img src="/assets/myPhoto/14.jpg" alt=""></p>
<p><img src="/assets/myPhoto/15.jpg" alt=""></p>
<p><img src="/assets/myPhoto/16.jpg" alt=""></p>
<p><img src="/assets/myPhoto/17.jpg" alt=""></p>
<p><img src="/assets/myPhoto/18.jpg" alt=""></p>
<p><img src="/assets/myPhoto/19.jpg" alt=""></p>
<p><img src="/assets/myPhoto/20.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> 照片 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我在武汉的四年]]></title>
      <url>/2014/06/22/%E6%88%91%E5%9C%A8%E6%AD%A6%E6%B1%89%E7%9A%84%E5%9B%9B%E5%B9%B4/</url>
      <content type="html"><![CDATA[<h3 id="四年"><a href="#四年" class="headerlink" title="四年"></a>四年</h3><p>过几天就走了，心里开始有些感慨，大家为了各自的梦想，要出发离开这里，四年的青春定格在了回忆。</p>
<p>想起当年入学的时候，既对新校园满怀期待和热情，也对自己高考不满意懊恼过，来到了一所自己从来没考虑过的学校，怀着复杂的心情开始了自己的大学生活。为人热情的我很快和班上的人打得一片火热，希望在大学里能做出的点事情，积极当了军训副排长，积极当了班级团支部书记，还组织了校园活动，取得了很好的校园成绩，获得了奖状奖章。不知不觉的就开心的度过了新生的一年，同时也结识了一群小伙伴，就是后来我们一起去的云南。必是玩的太嗨了，第一年个人专业课学习成绩中等。</p>
<p>大二的时候，我听学长的建议开始自主学习编程，并争取加入了学校的创新团队冰岩作坊，做web开发相关的。当时团队氛围比较和洽，一同进去的几位同学又都比较厌倦通信的课程，大家几个人一伙同啊，就放飞自己我了，在团队的工作玩和学习，做事情和效力，专业的上课就基本靠突击考试了。想想那时候意气风发，一方面web编程进步很大，可以算是同学里面比较突出的了，知道自己未来毕业完全有机会找一份很好的工作了，所以非常满意自己选择加入团队。但一方面专业学习大家都没在意，学得不扎实，专业课成绩惨淡。</p>
<p>这样的状态一直持续到大三下学期，在团队做了很多事情，把自己从一个软件编程小白变成了同学里面还算可以的小司机，为学校开发了多个网站，得到了老师的肯定，并有机会出去实习。到了这个时候，我开始想起了自己心中的遗憾，思考了很久，还是决定惜别团队，去完成了我从前的愿望，告别了指导老师。我加入了考研大军，设定了一个遥远的目标清华电子系，我相信自己努力就可以达到，考研不仅是一个艰苦的学习过程，更是一个对自己的认识和确认过程。从那之后，我开始坚持每日学习，并与一起准备考试的小伙伴奋战考试。考研复习期间，身边的同学找工作出国保研各自进行着，我不为所动，专心准备着。</p>
<p>3月份的时候出了成绩，考试数学的时候紧张了，想起了高考的时候，这半年压力也是确实大，选了一个最难考的学校，哈哈，还是没能如愿。不过我却不像之前高考那时候难过了，我认识到了自己的不足所在，坦然接受了这个结果，不是我不够聪明，是我内心不够平稳，心态不够自信。回想起来，高考的时候也是一样，虽然考的好的时候的确可以冲清北，但差的时候不就是华科水平吗，上课不专心听讲，天天打瞌睡，平常吊儿郎当嘻嘻哈哈，自然没能给我积攒足够的信心。类比这次考研也是一样，我前三年都没有太多用心在专业学习上，成绩普通，却定了一个一般人都不敢尝试的学校目标，虽然平常测验基本能够达到分数，但是校验会存在不准确，自己也还是那个问题，我内心的信心积累的不够，考试的时候容易紧张，就凉了。好吧，我表示并不难过，愉快的开始找起了工作。</p>
<p>错过了秋季招聘，各大互联网公司的校招都结束了，只有个别公司还有春季招聘的补招，哎呀到了关键时候了。当初选择来考研，大三的时候BAT实习一个都没去，冰岩的老大问我说要不要去微信实习，这个机会不错，我一点都没犹豫就说不去了，哈哈，还是年轻。一起和其他同学去面试了第一家公司，人生第一次参加校招面试，几轮面试下来，就我一个人过，这给了我不少信心，这样录取我的第一家公司叫做TPLink。回头一想，团队的同学都去的腾讯百度，你让我去这里，不太合适吧，于是拒绝了offer。然而啊春，招的机会实在是太少了，没啥大公司来了，根本没机会啊，天要亡我吗…等啊等，等来了一个搜狐，我跑去参加面试搜狐的研发职位，一看，产品岗位的面试官不就是我团队的学长吗，我擦嘞，好好表现，好好表现就问题不大了，哈哈，春季的补招相对会流程简化一些，经过两轮面试，看的出面试官对我比较满意，回头和学长聊了聊，咨询了面试情况和搜狐的工作待遇，比较放松的回去了。然后又是等啊等，等待到了最后一个上车机会，就是去哪儿网的春季补招。公司来面试的那一天是一个web前端开发的大佬面试我，我和盘托出大二大三写过的网站，回答了面试官的问题，一面都给我定了offer，很明显校招里面算可以的了，何况还是春季补招。哈哈，这样我就放了心，想起大二的时候曾经用过他们的手机端去哪儿旅行，体验很棒，买票很方便啊，改变了人们的旅行交通方式，当时想要是能去这家公司上班该多好啊，现在看来，一切有为法，都是缘分。所以我校招就拿了三个offer，一个TPLink在深圳，一个搜狐和一个去哪儿在北京。我欣然的选择了我喜欢的去哪儿，因为是个向往旅行的人。</p>
<p>到这里，我的四年就这样简略的写完了，当然还有那些的友情故事没写，谈妹子那段也跳过了，哈哈。我在大学里不断的尝试新东西，不停的突破自己，不断的寻求更好且更适合自己的道路，这就是我的大学经历。和同学说起我的心里想法，他们听到的都是，”我对大学的经历路程十分满意，不曾犹豫和后悔过一个选择”。</p>
<h3 id="致谢："><a href="#致谢：" class="headerlink" title="致谢："></a>致谢：</h3><p>感谢彩云之南多位同学一路陪伴成长</p>
<p>感谢冰岩作坊团队老师和同学给予我见识和机会</p>
<p>感谢我们巴蜀中学武汉联盟成员</p>
<p>感谢321寝室同学在生活中的包容</p>
<p>感谢通信1003班以及专业同学共同学习</p>
<p>感谢毕业设计的老师和同学照料</p>
<p>感谢我在学校认识的每一位有缘人</p>
]]></content>
      
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
