<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deadlock博客</title>
  <subtitle>华中科技大学毕业，今日头条在职</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuzichao.com/"/>
  <updated>2017-09-06T05:32:29.000Z</updated>
  <id>http://xuzichao.com/</id>
  
  <author>
    <name>Deadlock</name>
    <email>529841962@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>New一个golang爬虫</title>
    <link href="http://xuzichao.com/2017/09/01/New%E4%B8%80%E4%B8%AAgolang%E7%88%AC%E8%99%AB/"/>
    <id>http://xuzichao.com/2017/09/01/New一个golang爬虫/</id>
    <published>2017-09-01T10:22:41.000Z</published>
    <updated>2017-09-06T05:32:29.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;刚好七八双月结束，工作整理完毕，下个双月OKR还没开始。做久了IOS开发也来扩展下领域，抽空几天学了下Golang，实现一个爬虫。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、知识要点&quot;&gt;&lt;a href=&quot;#一、知识要点&quot; class=&quot;headerlink&quot; title=&quot;一、知识要点&quot;&gt;&lt;/a&gt;一、知识要点&lt;/h2&gt;&lt;h3 id=&quot;1、爬虫&quot;&gt;&lt;a href=&quot;#1、爬虫&quot; class=&quot;headerlink&quot; title=&quot;1、爬虫&quot;&gt;&lt;/a&gt;1、爬虫&lt;/h3&gt;&lt;h4 id=&quot;1-1-工作方式&quot;&gt;&lt;a href=&quot;#1-1-工作方式&quot; class=&quot;headerlink&quot; title=&quot;1.1 工作方式&quot;&gt;&lt;/a&gt;1.1 工作方式&lt;/h4&gt;&lt;p&gt;传统爬虫从一个或若干初始网页的URL开始，获得初始网页上的URL，在抓取网页的过程中，不断从当前页面上抽取新的URL放入队列,直到满足系统的一定停止条件。聚焦爬虫的工作流程较为复杂，需要根据一定的网页分析算法过滤与主题无关的链接，保留有用的链接并将其放入等待抓取的URL队列。然后，它将根据一定的搜索策略从队列中选择下一步要抓取的网页URL，并重复上述过程，直到达到系统的某一条件时停止。另外，所有被爬虫抓取的网页将会被系统存贮，进行一定的分析、过滤，并建立索引，以便之后的查询和检索；对于聚焦爬虫来说，这一过程所得到的分析结果还可能对以后的抓取过程给出反馈和指导。&lt;/p&gt;
&lt;h4 id=&quot;1-2-分类&quot;&gt;&lt;a href=&quot;#1-2-分类&quot; class=&quot;headerlink&quot; title=&quot;1.2 分类&quot;&gt;&lt;/a&gt;1.2 分类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;全网爬虫，爬行对象从一些种子 URL 扩充到整个 Web，主要为门户站点搜索引擎和大型 Web 服务提供商采集数据。&lt;/li&gt;
&lt;li&gt;聚焦网络爬虫，是指选择性地爬行那些与预先定义好的主题相关页面的网络爬虫。&lt;/li&gt;
&lt;li&gt;增量式网络爬虫，是指对已下载网页采取增量式更新和只爬行新产生的或者已经发生变化网页的爬虫，它能够在一定程度上保证所爬行的页面是尽可能新的页面。&lt;/li&gt;
&lt;li&gt;Deep Web 爬虫，表层网页是指传统搜索引擎可以索引的页面，以超链接可以到达的静态网页为主构成的Web页面。Deep Web 是那些大部分内容不能通过静态链接获取的、隐藏在搜索表单后的，只有用户提交一些关键词才能获得的 Web 页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-3爬虫算法&quot;&gt;&lt;a href=&quot;#1-3爬虫算法&quot; class=&quot;headerlink&quot; title=&quot;1.3爬虫算法&quot;&gt;&lt;/a&gt;1.3爬虫算法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;深度优先策略&lt;/p&gt;
&lt;p&gt;  其基本方法是按照深度由低到高的顺序，依次访问下一级网页链接，直到不能再深入为止。 爬虫在完成一个爬行分支后返回到上一链接节点进一步搜索其它链接。 当所有链接遍历完后，爬行任务结束。 这种策略比较适合垂直搜索或站内搜索， 但爬行页面内容层次较深的站点时会造成资源的巨大浪费。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;广度优先策略&lt;/p&gt;
&lt;p&gt;  此策略按照网页内容目录层次深浅来爬行页面，处于较浅目录层次的页面首先被爬行。 当同一层次中的页面爬行完毕后，爬虫再深入下一层继续爬行。 这种策略能够有效控制页面的爬行深度，避免遇到一个无穷深层分支时无法结束爬行的问题，实现方便，无需存储大量中间节点，不足之处在于需较长时间才能爬行到目录层次较深的页面&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2、golang&quot;&gt;&lt;a href=&quot;#2、golang&quot; class=&quot;headerlink&quot; title=&quot;2、golang&quot;&gt;&lt;/a&gt;2、golang&lt;/h3&gt;&lt;h4 id=&quot;2-1-语法学习&quot;&gt;&lt;a href=&quot;#2-1-语法学习&quot; class=&quot;headerlink&quot; title=&quot;2.1 语法学习&quot;&gt;&lt;/a&gt;2.1 语法学习&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为了让学习更加快速，想要优先上手，而不是沉浸在大量语法里面，找了一遍基础的语法文档，直接全读整体语法，先有个基础但是全面的认识。&lt;br&gt;&lt;a href=&quot;http://www.runoob.com/go/go-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;语法教程链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后直接手一本web教程书籍，此本书籍是开源的，在github上有1.78万star，5年前就开始书写，一直被追捧和使用。&lt;a href=&quot;https://github.com/astaxie/build-web-application-with-golang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;书籍链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-2-环境安装&quot;&gt;&lt;a href=&quot;#2-2-环境安装&quot; class=&quot;headerlink&quot; title=&quot;2.2 环境安装&quot;&gt;&lt;/a&gt;2.2 环境安装&lt;/h3&gt;&lt;h4 id=&quot;1-1-在MacOSX上安装&quot;&gt;&lt;a href=&quot;#1-1-在MacOSX上安装&quot; class=&quot;headerlink&quot; title=&quot;1.1 在MacOSX上安装&quot;&gt;&lt;/a&gt;1.1 在MacOSX上安装&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://golang.org/dl/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;源码包：go1.4.linux-amd64.tar.gz。&lt;/li&gt;
&lt;li&gt;将下载的源码包解压至 /usr/local目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar -C /usr/local -xzf go1.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.linux-amd64&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.gz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;将 /usr/local/go/bin 目录添加至PATH环境变量：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export PATH=&lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:/usr/local/go/bin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;注意：MAC 系统下你可以使用 .pkg 结尾的安装包直接双击来完成安装，安装目录在 /usr/local/go/ 下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-2-其他方式&quot;&gt;&lt;a href=&quot;#1-2-其他方式&quot; class=&quot;headerlink&quot; title=&quot;1.2 其他方式&quot;&gt;&lt;/a&gt;1.2 其他方式&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.1.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;二、代码实现&quot;&gt;&lt;a href=&quot;#二、代码实现&quot; class=&quot;headerlink&quot; title=&quot;二、代码实现&quot;&gt;&lt;/a&gt;二、代码实现&lt;/h2&gt;&lt;p&gt;先确立一个小目标，就是我们要爬取的网页的数据源是什么。一直觉得国内的大学排名争议比较有趣，TOP2的两所，但是TOP5的有8所，TOP10的有20所，哈哈，所以来爬个大学排行榜玩玩吧。&lt;/p&gt;
&lt;h3 id=&quot;1、网页抓取&quot;&gt;&lt;a href=&quot;#1、网页抓取&quot; class=&quot;headerlink&quot; title=&quot;1、网页抓取&quot;&gt;&lt;/a&gt;1、网页抓取&lt;/h3&gt;&lt;h3 id=&quot;1-1-定义一个学校&quot;&gt;&lt;a href=&quot;#1-1-定义一个学校&quot; class=&quot;headerlink&quot; title=&quot;1.1 定义一个学校&quot;&gt;&lt;/a&gt;1.1 定义一个学校&lt;/h3&gt;&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;SchoolObj&lt;/span&gt; struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rankTypeName string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;RankIndex&lt;/span&gt; int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;SchoolName&lt;/span&gt; string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;EnrollOrder&lt;/span&gt; string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;StarLevel&lt;/span&gt; string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;LocationName&lt;/span&gt; string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;SchoolType&lt;/span&gt;  string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;UrlAddress&lt;/span&gt; string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;SchoolTags&lt;/span&gt; []string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-2-单页面html解析&quot;&gt;&lt;a href=&quot;#1-2-单页面html解析&quot; class=&quot;headerlink&quot; title=&quot;1.2 单页面html解析&quot;&gt;&lt;/a&gt;1.2 单页面html解析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;引入go语言的http函数包和上面定义的学校结构题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;发起一个网页请求返回，go语言会返回网页的&lt;html&gt;以下全部的html格式字符串&lt;/html&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何从这些字符串中遍历查找和解析出我们需要的学校排名字段？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为有过前端开发的经验，我自然而然想到，使用CSS选择器会比直接使用遍历算法来得高效，有CSS的选择规则，我可以批量规律的获取和处理HTML的DOM结构数据。端开发中的jQuery提供了方便的操作 DOM 的 API。使用 Go 语言做服务器端开发，有时候需要解析 HTML 文件，比如抓取网站内容、写一个爬虫等。这时候如果有一个类似 jQuery 的库可以使用，操作 DOM 会很方便，而且，上手也会很快。果然，还真有这样的工具，此处推荐一个GitHub的开源框架 — Goquery 。&lt;/p&gt;
&lt;p&gt;A、使用介绍：&lt;/p&gt;
&lt;p&gt;goquery定义了一个Document结构，直接对应网页Javascript的Document节点，通过一个NewDocument方法，传入参数地址为网页的url地址，直接生产一个虚拟的go语言上的dom。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Document &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*Selection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Url      *url.URL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rootNode *html.Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewDocument&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(url &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(*Document, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Load the URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	res, e := http.Get(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; e != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NewDocumentFromResponse(res)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Document有定义find方法，方法的使用和JQuery里面一直，传入目标字符串的css选择器即可。通过对Document执行find查找方法，获得全部学校目标的字符串数组。&lt;/p&gt;
&lt;figure class=&quot;highlight ceylon&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;doc&lt;/span&gt;.Find(&lt;span class=&quot;string&quot;&gt;&quot;.bangTable table tr&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的选择器怎么来的呢，我们在chrome里面打开url地址，找到我们想要收集的数据排名，右键打开审查元素，可以看到HTML的选择器名称。这里需要有一点CSS基础，因为有的选择器不是直接唯一的，需要自己去判断，怎样的选择器组合才能准确的拿到想要的目标字符串。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/schoolDom.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Document有定义each方法，用于遍历数组，也就是各个大学所对应的dom节点。在each方法中继续使用查找方法，并最后获得想要的字符串。&lt;/p&gt;
&lt;p&gt;每一个dom对应一个SchoolStruct，新建并赋值，放入数组中返回。&lt;/p&gt;
&lt;p&gt;B、代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;github.com/PuerkitoBio/goquery&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;SchoolReptile/struct&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func GaokaoquanRank(urlAddress string) []SchoolStruct&lt;span class=&quot;selector-class&quot;&gt;.SchoolObj&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; array [] SchoolStruct&lt;span class=&quot;selector-class&quot;&gt;.SchoolObj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	doc, err := goquery.NewDocument(urlAddress)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Find the review items&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	doc.Find(&lt;span class=&quot;string&quot;&gt;&quot;.bangTable table tr&quot;&lt;/span&gt;).Each(func(&lt;span class=&quot;selector-tag&quot;&gt;i&lt;/span&gt; int, s *goquery.Selection) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// For each item found, get the band and title&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; obj SchoolStruct&lt;span class=&quot;selector-class&quot;&gt;.SchoolObj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		obj&lt;span class=&quot;selector-class&quot;&gt;.RankIndex&lt;/span&gt; = s.Find(&lt;span class=&quot;string&quot;&gt;&quot;.t1 span&quot;&lt;/span&gt;).Text()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		obj&lt;span class=&quot;selector-class&quot;&gt;.SchoolName&lt;/span&gt; = s.Find(&lt;span class=&quot;string&quot;&gt;&quot;.t2 a&quot;&lt;/span&gt;).Text()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		obj&lt;span class=&quot;selector-class&quot;&gt;.UrlAddress&lt;/span&gt; ,_ = s.Find(&lt;span class=&quot;string&quot;&gt;&quot;.t2 a&quot;&lt;/span&gt;).Attr(&lt;span class=&quot;string&quot;&gt;&quot;href&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		obj&lt;span class=&quot;selector-class&quot;&gt;.LocationName&lt;/span&gt; = s.Find(&lt;span class=&quot;string&quot;&gt;&quot;.t3&quot;&lt;/span&gt;).Text()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		obj&lt;span class=&quot;selector-class&quot;&gt;.SchoolType&lt;/span&gt; = s.Find(&lt;span class=&quot;string&quot;&gt;&quot;.t4&quot;&lt;/span&gt;).Text()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		obj&lt;span class=&quot;selector-class&quot;&gt;.StarLevel&lt;/span&gt; = s.Find(&lt;span class=&quot;string&quot;&gt;&quot;.t5&quot;&lt;/span&gt;).Text()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		obj&lt;span class=&quot;selector-class&quot;&gt;.EnrollOrder&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;本科第一批&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		array = append(array, obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、接口请求&quot;&gt;&lt;a href=&quot;#2、接口请求&quot; class=&quot;headerlink&quot; title=&quot;2、接口请求&quot;&gt;&lt;/a&gt;2、接口请求&lt;/h3&gt;&lt;p&gt;我们再爬去数据的时候，一般都能直接抓取网页数据，但是有的数据在第一页炳辉展示出来，需要有点击操作，比如加载更多。此处的大学排行有200位，第一页请求只有20位，这时候就会发现，接口请求的方便。&lt;br&gt;有的网页在接口上做了cookie校验，摸清别人的请求规则，才能正确模拟出请求获得返回数据。&lt;/p&gt;
&lt;p&gt;我们此处拿乐学高考作文例子，获取各个类型的大学排行榜。通过charles代理，我们获得请求的各类参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拼接请求url&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;url := LexueHost+&lt;span class=&quot;string&quot;&gt;&quot;/college/ranking?page=&quot;&lt;/span&gt;+pageStr+&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;rank_type=&quot;&lt;/span&gt;+rankObj.RankType+&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;page_size=15&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;发送HTTP请求，获取返回&lt;/p&gt;
&lt;p&gt;网络请求返回的是一个字符串结构的数据，我们需要把它映射成map结构好获取key对应的value值。&lt;/p&gt;
&lt;p&gt;这里推荐一个go语言在json解析上的一个开源库Simplejson，将返回的数据进行JSON结构化，然后通过get方法可以直接获得对应的参数值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;defer&lt;/span&gt; resp.&lt;span class=&quot;type&quot;&gt;Body&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Close&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;, err := ioutil.&lt;span class=&quot;type&quot;&gt;ReadAll&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;resp&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Body&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;jsonBody&lt;/span&gt;,err := simplejson.&lt;span class=&quot;type&quot;&gt;NewJson&lt;/span&gt;(&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;schoolJsonArray&lt;/span&gt;,err := jsonBody.&lt;span class=&quot;type&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;schools&quot;&lt;/span&gt;).&lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;多页请求使用递归的方式，不断改变get请求的pageStr参数，pageindex ++ ，当判断请求返回的json为空的时候，则说明接口请求已经到到了最后一页，跳出递归&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; nextArray [] SchoolStruct&lt;span class=&quot;selector-class&quot;&gt;.SchoolObj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nextArray = LexueRankEachList(rankObj,pageIndex)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;B、代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;SchoolReptile/struct&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;encoding/json&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;strings&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;github.com/bitly/go-simplejson&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;strconv&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func LexueRankEachList(rankObj SchoolStruct&lt;span class=&quot;selector-class&quot;&gt;.RankTypeObj&lt;/span&gt;,pageIndex int ) []SchoolStruct&lt;span class=&quot;selector-class&quot;&gt;.SchoolObj&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pageStr := strconv.Itoa(pageIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	url := LexueHost+&lt;span class=&quot;string&quot;&gt;&quot;/college/ranking?page=&quot;&lt;/span&gt;+pageStr+&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;rank_type=&quot;&lt;/span&gt;+rankObj.RankType+&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;page_size=15&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	resp, err := http.Get(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// handle error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	defer resp&lt;span class=&quot;selector-class&quot;&gt;.Body&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Close&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	data, err := ioutil.ReadAll(resp.Body)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	jsonBody,err := simplejson.NewJson(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	schoolJsonArray,err := jsonBody.Get(&lt;span class=&quot;string&quot;&gt;&quot;schools&quot;&lt;/span&gt;).Array()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; array [] SchoolStruct&lt;span class=&quot;selector-class&quot;&gt;.SchoolObj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(schoolJsonArray) &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		println(&lt;span class=&quot;string&quot;&gt;&quot;请求到头了&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;i&lt;/span&gt;,_ := range schoolJsonArray &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		schoolJson := jsonBody.Get(&lt;span class=&quot;string&quot;&gt;&quot;schools&quot;&lt;/span&gt;).GetIndex(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; obj SchoolStruct&lt;span class=&quot;selector-class&quot;&gt;.SchoolObj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		obj&lt;span class=&quot;selector-class&quot;&gt;.RankIndex&lt;/span&gt; = strconv.Itoa(schoolJson.Get(&lt;span class=&quot;string&quot;&gt;&quot;school_rank&quot;&lt;/span&gt;).MustInt())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		obj&lt;span class=&quot;selector-class&quot;&gt;.SchoolName&lt;/span&gt; = schoolJson.Get(&lt;span class=&quot;string&quot;&gt;&quot;school_name&quot;&lt;/span&gt;).MustString()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		obj&lt;span class=&quot;selector-class&quot;&gt;.SchoolTags&lt;/span&gt; = schoolJson.Get(&lt;span class=&quot;string&quot;&gt;&quot;school_tags&quot;&lt;/span&gt;).MustStringArray()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		array = append(array, obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		println(obj&lt;span class=&quot;selector-class&quot;&gt;.RankIndex&lt;/span&gt;,obj&lt;span class=&quot;selector-class&quot;&gt;.SchoolName&lt;/span&gt;,obj.SchoolTags)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pageIndex++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; nextArray [] SchoolStruct&lt;span class=&quot;selector-class&quot;&gt;.SchoolObj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nextArray = LexueRankEachList(rankObj,pageIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(nextArray) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _,obj := range nextArray &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			array = append(array,obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3、保存到Excel&quot;&gt;&lt;a href=&quot;#3、保存到Excel&quot; class=&quot;headerlink&quot; title=&quot;3、保存到Excel&quot;&gt;&lt;/a&gt;3、保存到Excel&lt;/h3&gt;&lt;p&gt;前两部获得了网络数据，并解析生成了对应的SchoolStruct数组，这个时候我们只需要创建excel边。遍历数组，把数组里面的数据字段都存入表格即可,git开源库xlsx能够让我们轻松的创建、查找、赋值Excel表。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func SaveSchoolRank(schoolArray [] SchoolStruct.SchoolObj,excelName string,sheetName string)  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; *xlsx.&lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sheet *xlsx.Sheet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; row *xlsx.Row&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cell *xlsx.Cell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; = xlsx.OpenFile(excelName + &lt;span class=&quot;string&quot;&gt;&quot;.xlsx&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; = xlsx.NewFile()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sheet,&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.AddSheet(sheetName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   sheet = &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.Sheet[sheetName]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; == nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := 0; i &amp;lt; len(schoolArray); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			obj := schoolArray[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			row = sheet.AddRow()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell = row.AddCell()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell.Value = obj.RankIndex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell = row.AddCell()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell.Value = obj.SchoolName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell = row.AddCell()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell.Value = obj.StarLevel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell = row.AddCell()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell.Value = obj.LocationName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell = row.AddCell()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell.Value = obj.EnrollOrder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell = row.AddCell()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell.Value = obj.SchoolType&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell = row.AddCell()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell.Value = obj.UrlAddress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tagStr &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _,value := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; obj.SchoolTags &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				tagStr += &lt;span class=&quot;string&quot;&gt;&quot;+&quot;&lt;/span&gt; + value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell = row.AddCell()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cell.Value = tagStr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				fmt.Printf(&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;Error&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;Save&lt;/span&gt;(excelName + &lt;span class=&quot;string&quot;&gt;&quot;.xlsx&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt; != nil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Printf(&lt;span class=&quot;keyword&quot;&gt;err&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;Error&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;刚好七八双月结束，工作整理完毕，下个双月OKR还没开始。做久了IOS开发也来扩展下领域，抽空几天学了下Golang，实现一个爬虫。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、知识要点&quot;&gt;&lt;a href=&quot;#一、知识要点&quot; class=
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何成功的交付产品</title>
    <link href="http://xuzichao.com/2017/08/03/%E5%A6%82%E4%BD%95%E6%88%90%E5%8A%9F%E7%9A%84%E4%BA%A4%E4%BB%98%E4%BA%A7%E5%93%81/"/>
    <id>http://xuzichao.com/2017/08/03/如何成功的交付产品/</id>
    <published>2017-08-03T03:21:45.000Z</published>
    <updated>2017-09-06T02:54:11.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;产品学习笔记&quot;&gt;&lt;a href=&quot;#产品学习笔记&quot; class=&quot;headerlink&quot; title=&quot;产品学习笔记&quot;&gt;&lt;/a&gt;产品学习笔记&lt;/h3&gt;&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt; 所有的流程和规范最终都是为了解决实际问题 的，不要贸然引入流程，除非已经碰到问题，否则尽量简化流程，提高效率。要交付 一个产品，其中最重要的只有 3 点:1)确定用户需求和预期指标;2)以最小成本实 现最主要的需求;3)发布并获得数据反馈，确定下一个迭代目标。&lt;/p&gt;
&lt;p&gt; 用用户能理解的语言 去描述你要交付的产品带给他们的价值和好处十分重要，如果写不出来，或者写出来 用户看了一点兴趣都没有，请尽快停止这个产品，因为即使整个产品开发和交付过程 极其完美，这也注定会是一个失败的产品。&lt;/p&gt;
&lt;p&gt; 在软件行业中，我们把设计、打造、发布一款符合市场需求的软件称为交付 (shipping)。&lt;/p&gt;
&lt;p&gt;尽管时日尚短，交付却已展现出非凡的价值。它简直是一剂灵丹妙药。它能解决 钱的问题，因为投资人给你追加投资的前提是你取得了好结果;它能解决客户的问题， 因为交付能力的强弱决定了你是否能推出客户需要的功能和补丁;它能解决团队的问 题，因为没有什么比取得进展更能让团队士气大振!所以，如果你想追逐名望、财 富、幸福感，那么，交付出卓越的软件，你将赢得一切。&lt;/p&gt;
&lt;p&gt;我只身前往达特茅斯学院的塞耶工程学院和 塔克商学院学习了一段时间，并取得了工程管理硕士学位。我花了 5 年多的时间研究可扩容性、商 业决策以及软件团队内部的人际动力学。&lt;/p&gt;
&lt;p&gt;快速迭代、部 署、互联网服务托管已经变成了主流。&lt;/p&gt;
&lt;p&gt;因为软件交付不只是如何管理项目，也不只是如何提升开发效率，你必须具备更 全面的技能。你既要加深对技术的理解，又要贡献更好的产品创意，更重要的是，整 个过程中，你需要展现出你强有力的商业洞察力。你也许要做所有工作，包括要求工 程师编写测试用例，或者用 Photoshop 绘制产品原型。这个工作要求你追求极致，只 要你不惧挑战，它终将成为你的舞台!&lt;/p&gt;
&lt;p&gt;让观点更犀利点儿！&lt;/p&gt;
&lt;h2 id=&quot;交付卓越产品，步步为赢&quot;&gt;&lt;a href=&quot;#交付卓越产品，步步为赢&quot; class=&quot;headerlink&quot; title=&quot;交付卓越产品，步步为赢&quot;&gt;&lt;/a&gt;交付卓越产品，步步为赢&lt;/h2&gt;&lt;h3 id=&quot;一、确定正确的产品方向&quot;&gt;&lt;a href=&quot;#一、确定正确的产品方向&quot; class=&quot;headerlink&quot; title=&quot;一、确定正确的产品方向&quot;&gt;&lt;/a&gt;一、确定正确的产品方向&lt;/h3&gt;&lt;p&gt;好的产品一定要满足众多客户所共有的某个真实的需求。你的使命就是 找到一种独特而有意义的方法去满足这一需求。&lt;/p&gt;
&lt;h4 id=&quot;1-1-如何找到正确需求&quot;&gt;&lt;a href=&quot;#1-1-如何找到正确需求&quot; class=&quot;headerlink&quot; title=&quot;1.1 如何找到正确需求&quot;&gt;&lt;/a&gt;1.1 如何找到正确需求&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;以客户为导向，而不是以竞争为导向&lt;/li&gt;
&lt;li&gt;在于它解决的问题比我们最初意识到的那个问题要难得多&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-2-如何构建卓越的使命&quot;&gt;&lt;a href=&quot;#1-2-如何构建卓越的使命&quot; class=&quot;headerlink&quot; title=&quot;1.2 如何构建卓越的使命&quot;&gt;&lt;/a&gt;1.2 如何构建卓越的使命&lt;/h4&gt;&lt;p&gt;团队一定要有自己的使命。如果你没有清晰地阐述使命则会导致失败，因为你的 团队、组织和投资人会根据自己对使命的不同理解而各自为战。你需要的是一个能够反映代表性产品或服务的使命，而不是一个 面面俱到的使命。举个例子。我在 Google Talk 时肩负的使命是“使人与人之间在任何地点均能通 过任何终端沟通”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;能够唤起人们的兴趣&lt;/p&gt;
&lt;p&gt;  长期吸引利益相关者的注意，你才有时间去挖掘产品细节。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提供言之有物且能指明方向的原则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;适合印在T桖上&lt;/p&gt;
&lt;p&gt;  不要以为有一个高智商天才组成 的团队就不必这样做，他们的天才能力可不一定表现在对这类事情的记忆上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-3-如何制定正确的策略&quot;&gt;&lt;a href=&quot;#1-3-如何制定正确的策略&quot; class=&quot;headerlink&quot; title=&quot;1.3 如何制定正确的策略&quot;&gt;&lt;/a&gt;1.3 如何制定正确的策略&lt;/h4&gt;&lt;p&gt;策略是指在竞争对手的压力下，利用公司独特的优 势来争取目标用户的粗略计划。它只是一段用于说明对目标客户来说你的产品将如何长期保持比 竞争对手更强的吸引力的话。简而言之，你需要阐明三件事:客户、公司和竞争。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;策略举例:&lt;br&gt;随着越来越多内容的产生，用户每天消费的内容也越来越多，但对于 20 ~ 40 岁的工薪一族来说，他们在海量的内容面前却不知道如何选择。我们需要 给这些用户以启发，帮助他们找到想看的视频，并让他们在看的过程中对内容有更 深的理解。&lt;br&gt;我们之所以首先选择工薪一族是因为，与有大把的时间耗在 Facebook 和 YouTube上的青年不同，工薪一族时间有限，但他们人际网络丰富、个人主见强烈， 还有可自由支配的收入，愿意在内容上消费。&lt;br&gt;我们有独特的方法来解决用户挑选视频的问题。通过整合 IMDb 独有的电影数 据集、亚马逊对数码内容分门别类的能力以及可靠的个性化推荐技术，我们可以构 建出有效的视频推荐算法。虽然其他竞争对手(如 Netflix)也有一套推荐引擎，但 我们覆盖的平台多，拥有的数据也更丰富，能够提供比竞争对手更有趣的观看体验 和更精准的推荐。&lt;br&gt;我们将把这种观看体验通过各种载体来传递给观看者，这些载体展现了与内容 相关的背景数据(如 YouTube 视频的演员阵容)，包括 YouTube 等网站的浏览器插件、 手机应用程序等。我们还会提供丰富的与内容相关的信息以启发观看者，并提示观 看者进行反馈——这就创建了一个良性循环并惠及所有用户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个策略满足了所有要求:阐述了 IMDb 应该提供什么产品以及为什么这家公司适 合提供这类产品，分析了竞争对手的情况以及 IMDb 应如何与之差异化竞争，还论证了 IMDb 为什么要针对这样一个特别的消费者群体。该策略不但简明扼要、详略得当，还 直接指明了我们的具体目标。&lt;/p&gt;
&lt;h3 id=&quot;二、尽可能清晰详细地定义产品&quot;&gt;&lt;a href=&quot;#二、尽可能清晰详细地定义产品&quot; class=&quot;headerlink&quot; title=&quot;二、尽可能清晰详细地定义产品&quot;&gt;&lt;/a&gt;二、尽可能清晰详细地定义产品&lt;/h3&gt;&lt;p&gt;交付的下一阶段是让你的产品方案具体且可理解。通过制订使命和策略，你知道 了你的客户是谁，他们的需求是什么。你也知道如何做才能比对手更出色、更具备差 异性。有了这些知识再加上一些头脑风暴，便可以得出一个大致的产品方案。&lt;/p&gt;
&lt;p&gt;当设法细化产品方案时，你会发现产品要解决的一些客户问题都是你主观臆断 的，，而证明的最好方法就是把产品提 供给客户使用，然后听听他们的意见。在《精益创业》一书 中充分论证了为什么该构建一个最小化可行产品。&lt;/p&gt;
&lt;p&gt;当迭代越小越快时，你甚至不需要花大力气去猜测客户的需求，而是 更多按照客户告诉你的去做，这样成功的可能性更大。&lt;/p&gt;
&lt;p&gt;产品定义过程主要分为 10 步，完成这些步骤后，工程团 队就会对项目形成统一的认识，管理层或投资者也会了解并认可产品的设计，包括：&lt;/p&gt;
&lt;h3 id=&quot;2-1-撰写-新闻稿&quot;&gt;&lt;a href=&quot;#2-1-撰写-新闻稿&quot; class=&quot;headerlink&quot; title=&quot;2.1 撰写 新闻稿&quot;&gt;&lt;/a&gt;2.1 撰写 新闻稿&lt;/h3&gt;&lt;p&gt;所谓新闻稿是指一篇向市场宣布将要推出新产品的通告。不管是新 闻稿还是博客文章，都应该简单明了地传达关于产品的关键信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产品命名&lt;/li&gt;
&lt;li&gt;发布时间&lt;/li&gt;
&lt;li&gt;目标客户&lt;/li&gt;
&lt;li&gt;解决了什么问题&lt;/li&gt;
&lt;li&gt;如何解决(务必简明扼要)&lt;/li&gt;
&lt;li&gt;CEO 的公开赞辞&lt;/li&gt;
&lt;li&gt;邀请设计团队和工程团队主管参与产品评审&lt;/li&gt;
&lt;li&gt;找客户测试产品概念&lt;/li&gt;
&lt;li&gt;命名、定价以及预测收益&lt;/li&gt;
&lt;li&gt;向管理层汇报&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-2-创建并不断更新-FAQ-文档&quot;&gt;&lt;a href=&quot;#2-2-创建并不断更新-FAQ-文档&quot; class=&quot;headerlink&quot; title=&quot;2.2 创建并不断更新 FAQ 文档&quot;&gt;&lt;/a&gt;2.2 创建并不断更新 FAQ 文档&lt;/h3&gt;&lt;p&gt;我喜欢那些愚蠢的问题，因为它们让我感觉好像没花多少精力就消灭了一个问 题，这真是一种少有的乐趣啊。&lt;/p&gt;
&lt;p&gt;遇到回答不上的问题时，我也会把它放入 FAQ 并期望有人能够回答它。最坏&lt;br&gt;情况下你也可以把这个 FAQ 当做个人的 Bug 列表或者团队讨论主题库.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它能节省你大量回复邮件的时间，还能抵御一些内部责难。&lt;/li&gt;
&lt;li&gt;当你的客户支持团队和科技写作团队开始整理所有面向公众的内容时， FAQ 将是一个很有价值的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-3-绘制线框流程图&quot;&gt;&lt;a href=&quot;#2-3-绘制线框流程图&quot; class=&quot;headerlink&quot; title=&quot;2.3 绘制线框流程图&quot;&gt;&lt;/a&gt;2.3 绘制线框流程图&lt;/h3&gt;&lt;p&gt;流程图可以帮助你准确地解释用户工作流和系统交互相关问题，简要线框图则可以帮助你 具象化产品各环节的用户体验。&lt;/p&gt;
&lt;h3 id=&quot;2-4-撰写产品单页或者演示文稿&quot;&gt;&lt;a href=&quot;#2-4-撰写产品单页或者演示文稿&quot; class=&quot;headerlink&quot; title=&quot;2.4 撰写产品单页或者演示文稿&quot;&gt;&lt;/a&gt;2.4 撰写产品单页或者演示文稿&lt;/h3&gt;&lt;p&gt;产品单页是一篇写给高管或多数风险投 资人看的产品介绍文章，你需要把控好介绍的详略程度。&lt;/p&gt;
&lt;p&gt;你需要去争取工程团队、管理层、VC(风险投资人)或其他利益相关方的初步支持。你需要弄清楚他们对产品的认可程度，否则等到第 7 步功能规格 文档都快完成了，而他们还对产品的价值存有疑义，你将面临不断的返工&lt;br&gt;。&lt;br&gt;你会发现产品单页和演示文稿实际上是新闻稿的延伸，它们增加了市场机会(用户量)、收益机会(解决方案的价值)和长期竞争优势(对手长时间内无法模仿)这 三方面内容。&lt;/p&gt;
&lt;p&gt;面对 VC 时，两样都需要准备，因为你既需要发邮件介绍你的产品，又需要面对面做产品演示。不过无论你在哪里工作，这两份文档的内容都是一样的，它们都是新 闻稿的延伸。&lt;/p&gt;
&lt;p&gt;下面介绍这两份文档所需包含的五个要素:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产品名称&lt;/li&gt;
&lt;li&gt;目标客户 + 数量有多少&lt;/li&gt;
&lt;li&gt;解决了什么问题 + 这个问题对于目标客户来说有多大价值&lt;/li&gt;
&lt;li&gt;解决方案 + 这个解决方案类似线上哪个产品，为什么你的方案能让竞争对手在&lt;/li&gt;
&lt;li&gt;长时间内都无法模仿&lt;/li&gt;
&lt;li&gt;何时交付 + 主要的里程碑有哪些?&lt;/li&gt;
&lt;li&gt;团队背景(仅针对 VC)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-5-FAQ中添加API文档&quot;&gt;&lt;a href=&quot;#2-5-FAQ中添加API文档&quot; class=&quot;headerlink&quot; title=&quot;2.5 FAQ中添加API文档&quot;&gt;&lt;/a&gt;2.5 FAQ中添加API文档&lt;/h3&gt;&lt;p&gt;API 文档可以说明你的团队如何与其他团队协作、外部开发者如何使用这套系统 以及你需要存储什么数据。预先定义清楚 API 还有个好处，它可以帮助你搭建由这些 API 构成的面向服务的体系架构。&lt;/p&gt;
&lt;h3 id=&quot;2-6-撰写功能呢规格文档&quot;&gt;&lt;a href=&quot;#2-6-撰写功能呢规格文档&quot; class=&quot;headerlink&quot; title=&quot;2.6 撰写功能呢规格文档&quot;&gt;&lt;/a&gt;2.6 撰写功能呢规格文档&lt;/h3&gt;&lt;p&gt;产品的规模以及成熟度决定了你需要几天还是几周才能写完功能规格文档。如果 产品尚不成熟，你应当尽可能缩小产品规模以快速验证客户需求的真实性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简介：&lt;br&gt;说明了为什么要做这个产品以及做些什么，每个新进入项目的成员 都可以从中了解到必要的背景信息。同时它还说明了文档中一些术语的含义，你可能 因为使用习惯了这些术语而忘记别人其实并不理解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目标与非目标：&lt;br&gt;需要将其细化成不同目标，每个目 标都应保持清晰简洁并将它们按优先级排列，这样工程团队就可以合理地进行设计 与开发。目标是告诉别人你要做什么，那么非目标则是告诉别人你不要做什么&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用例和用户场景：&lt;br&gt;用例是指用简要的语句来描述那些用户必须 执行的操作，用户场景则是指用叙述故事的方式来描述用户是如何体验产品的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原型图或线框图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;API&lt;/li&gt;
&lt;li&gt;负载规划：&lt;br&gt;负载规划是指对未来一段时间内用户的使用量进行粗略估计并制订应对计划，这 对工程团队来说非常重要。&lt;/li&gt;
&lt;li&gt;依赖：&lt;br&gt;你需要将全部依赖方及其负责人列出来，如果有应急方案也一并列出来。&lt;/li&gt;
&lt;li&gt;FAQ和开放问题&lt;/li&gt;
&lt;li&gt;关键事件：&lt;br&gt;最好能列出主要事件的达成时 间，如特性完成时间、可信测试者版发布时间，如果具体的工程量尚未评估出来，那 预计的时间应该保守一些。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-7-边界情况&quot;&gt;&lt;a href=&quot;#2-7-边界情况&quot; class=&quot;headerlink&quot; title=&quot;2.7 边界情况&quot;&gt;&lt;/a&gt;2.7 边界情况&lt;/h3&gt;&lt;p&gt;你需要时间 来仔细地、创造性地思考用户会如何弄坏你的软件或者在某种意义上没有按照你的预 期来使用软件。当你“漫步”时，请将想到的所有可能的边界情况以及应对策略写在 FAQ 或者产品需求文档中。&lt;/p&gt;
&lt;h3 id=&quot;2-8-客户测试&quot;&gt;&lt;a href=&quot;#2-8-客户测试&quot; class=&quot;headerlink&quot; title=&quot;2.8 客户测试&quot;&gt;&lt;/a&gt;2.8 客户测试&lt;/h3&gt;&lt;p&gt;团队会轻易陷入一场为莫须有的客户问题构建完美解 决方案的狂欢中，主张的是去找一 批现存的或潜在的客户，向他们介绍你的产品设想和原型，并听听他们的反馈 。&lt;/p&gt;
&lt;h3 id=&quot;2-9-基本商业要素——命名、定价和收益&quot;&gt;&lt;a href=&quot;#2-9-基本商业要素——命名、定价和收益&quot; class=&quot;headerlink&quot; title=&quot;2.9 基本商业要素——命名、定价和收益&quot;&gt;&lt;/a&gt;2.9 基本商业要素——命名、定价和收益&lt;/h3&gt;&lt;p&gt;命名：可以交给别人想想&lt;/p&gt;
&lt;p&gt;定价：看起来很科学，但最终大部分定价都是拍脑袋出来的。按成本定价、按价值定价以及对比定价。分析竞争对手、调研客户愿意支付、简化初始定价以降低用户理解成本、等产品正式推出后再想涨价就难了&lt;/p&gt;
&lt;p&gt;收益：制定收益模型。&lt;/p&gt;
&lt;p&gt;1、估算买家总体市场规模&lt;br&gt;2、预估市场规模的增速&lt;br&gt;3、估算你的目标市场占总体市场的比率&lt;br&gt;4、估算通过市场推广你能触碰到的用户规模&lt;br&gt;5、预估触碰产品的人中会有多少转化成产品用户&lt;br&gt;6、找到其他新用户增长渠道并加入到模型中&lt;br&gt;7、产品定价乘以每个时期增长的用户数便是收益&lt;/p&gt;
&lt;h3 id=&quot;2-10-取得上层认可&quot;&gt;&lt;a href=&quot;#2-10-取得上层认可&quot; class=&quot;headerlink&quot; title=&quot;2.10 取得上层认可&quot;&gt;&lt;/a&gt;2.10 取得上层认可&lt;/h3&gt;&lt;p&gt;议你先花点时间预售 产品。在谷歌，最优秀的主管都知道怎么做这件事情，因为预售可以让管理层在公开 回应你的产品方案之前先了解一些背景。&lt;/p&gt;
&lt;p&gt;种预售方式是“路过式”预售。趁着负责决策的高管站在走廊或者倒咖啡 的时候走到他身边和他聊一两分钟你想做的产品，这时候你追求的不是一个决策，而 仅仅是让他知道有这么一个事。&lt;/p&gt;
&lt;h3 id=&quot;2-11-产品准备就绪开始构建&quot;&gt;&lt;a href=&quot;#2-11-产品准备就绪开始构建&quot; class=&quot;headerlink&quot; title=&quot;2.11 产品准备就绪开始构建&quot;&gt;&lt;/a&gt;2.11 产品准备就绪开始构建&lt;/h3&gt;&lt;p&gt;阶段三，设计用户体验&lt;br&gt;你需要从用户的角度出发，和设计团队不断沟通、反复 迭代，最终构建出良好、直观、简洁的用户体验。&lt;/p&gt;
&lt;p&gt;阶段四，做一些基础的项目管理工作&lt;br&gt; 括跟踪交付物的进展、指出问题以及控制项目范围。&lt;/p&gt;
&lt;p&gt;阶段五，开始测试&lt;br&gt;作为团队主管，你需要主导 Bug 的处理并慎重决定哪些可以容忍出现在版本 1 而哪些又必须在发布之前修复掉。&lt;/p&gt;
&lt;p&gt;阶段六，你差不多可以准备发布了&lt;br&gt;要求你建立一套衡量产品成败的指标&lt;/p&gt;
&lt;p&gt;最后，正式发布产品&lt;br&gt;你需要制订市场营销和公关方案，并在发布前仔细核查清单中的每一项内 容。基本上每次发布都会有一些糟糕的事情发生，不过只要处理得好，大部分用户都 不会察觉到。&lt;/p&gt;
&lt;h3 id=&quot;三、赢在用户体验&quot;&gt;&lt;a href=&quot;#三、赢在用户体验&quot; class=&quot;headerlink&quot; title=&quot;三、赢在用户体验&quot;&gt;&lt;/a&gt;三、赢在用户体验&lt;/h3&gt;&lt;p&gt;用户体验不仅是产品的外观样式，它还是产品的使用方式,为了让设计团队发挥出最佳水平，你需要先理解设计，再让设计团队理解你,需要了解的东西便是如何和每种 设计角色有效地沟通，其中包括了解如何评论视觉稿以及如何向设计师提供反馈。最后一个了解设计的要点是学会使用线框图或原型图来辅助沟通，你可以通 过 Photoshop 或其他画图程序来绘制这些图形。&lt;/p&gt;
&lt;h3 id=&quot;3-1-各类角色&quot;&gt;&lt;a href=&quot;#3-1-各类角色&quot; class=&quot;headerlink&quot; title=&quot;3.1 各类角色&quot;&gt;&lt;/a&gt;3.1 各类角色&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用户体验(UX，User Experience)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关注的是用户如何完成任务以及该如何优化向 用户展现信息的方式。通常用户体验设计师会通过制作流程图或原型图来说明用户体 验，其中原型图是用来描述用户界面某一部分外观的图形，对信息架构(IA，Information Architecture)尤为关注。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户界面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它更关注单个页面或屏幕的 设计，是用户体验的组成部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视觉设计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何通过一种既赏心悦目、夺人眼球又清 晰明了的方式来展示内容的一门学问&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户体验研究&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是用户体验的一个特殊组成 部分，它专注于研究用户是如何看待你的产品的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;角色模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你的设计和业务团队将创 建一组虚拟角色来代表目标客户，这些角色模型拥有姓名、薪水和目标，你还可以赋 予他们任何你知道的目标客户的特征，然后利用这些角色模型来评估设计的效果。&lt;/p&gt;
&lt;h3 id=&quot;3-2-如何评估设计&quot;&gt;&lt;a href=&quot;#3-2-如何评估设计&quot; class=&quot;headerlink&quot; title=&quot;3.2 如何评估设计&quot;&gt;&lt;/a&gt;3.2 如何评估设计&lt;/h3&gt;&lt;p&gt;■该用户界面要求用户完成的最重要的任务是什么?&lt;br&gt;■这是最简单的解决方案吗?&lt;br&gt;■信息是否组织得当?&lt;br&gt;■设计是否易用且一目了然?&lt;br&gt;■标准是否一致?&lt;br&gt;■能否减少用户点击次数?&lt;/p&gt;
&lt;h3 id=&quot;3-3-如何与设计师沟通&quot;&gt;&lt;a href=&quot;#3-3-如何与设计师沟通&quot; class=&quot;headerlink&quot; title=&quot;3.3 如何与设计师沟通&quot;&gt;&lt;/a&gt;3.3 如何与设计师沟通&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;以用户的口吻说话&lt;/li&gt;
&lt;li&gt;以提问的方式建立共识&lt;/li&gt;
&lt;li&gt;讲述业务目标的相对优先级&lt;/li&gt;
&lt;li&gt;用数据说话&lt;/li&gt;
&lt;li&gt;提供竞争对手的运作良好的案例&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-4-借助图画进行沟通&quot;&gt;&lt;a href=&quot;#3-4-借助图画进行沟通&quot; class=&quot;headerlink&quot; title=&quot;3.4 借助图画进行沟通&quot;&gt;&lt;/a&gt;3.4 借助图画进行沟通&lt;/h3&gt;&lt;p&gt;■只制作用户界面中相关部分的原型。&lt;br&gt;■总是使用完整的、经过适当编辑的文本。&lt;br&gt;■控制花在视觉设计上的时间。&lt;br&gt;■使用灰度色，不要使用其他颜色。&lt;br&gt;■预期你的线框图会发生很大改动。&lt;br&gt;■当心视觉花招。&lt;/p&gt;
&lt;h3 id=&quot;四、赢在项目管理&quot;&gt;&lt;a href=&quot;#四、赢在项目管理&quot; class=&quot;headerlink&quot; title=&quot;四、赢在项目管理&quot;&gt;&lt;/a&gt;四、赢在项目管理&lt;/h3&gt;&lt;h3 id=&quot;4-1-创建一张简单的计划表并持续维护。&quot;&gt;&lt;a href=&quot;#4-1-创建一张简单的计划表并持续维护。&quot; class=&quot;headerlink&quot; title=&quot;4.1 创建一张简单的计划表并持续维护。&quot;&gt;&lt;/a&gt;4.1 创建一张简单的计划表并持续维护。&lt;/h3&gt;&lt;p&gt;■它是我制作的。永远不要低估这种自豪感……&lt;br&gt;■它便于你的团队更新剩余时间以及查看项目进展。&lt;br&gt;■它便于发现长杆工程师。&lt;br&gt;■它便于配置或自定义。&lt;br&gt;■它便于跟踪假期，因为假期在这里也是一个任务。&lt;br&gt;■它便于挪动任务至后续版本。如果发现版本发布时间不满足要求，你可以将该&lt;br&gt;版本中一些任务的“目标版本值”改成后续的版本号。你也能使用这个模型来&lt;br&gt;跟踪里程碑。&lt;br&gt;■它还适用于管理项目最后 30 天的冲刺。&lt;br&gt;■它便于平衡团队内的任务分配。如果不想让克里斯在 V1 版本的关键路径上，&lt;br&gt;可以将他的任务重新分配给维奇。&lt;br&gt;■它便于预测项目各时间节点，包括编码完成时间、测试完成时间以及发布完成&lt;br&gt;时间。现在你的测试团队知道什么时候可以开始新一轮的测试，你的市场部门&lt;br&gt;也知道这款产品什么时候可以面世。&lt;br&gt;■它预先将你的假设传达给了你的团队。&lt;br&gt;■“天”是一个很好的用于跟踪任务的度量单位。你也许常用“0.2 天”来描述那些&lt;br&gt;非常小的任务，但我发现跟踪这些任务的最佳办法是放到 Bug 列表中。&lt;/p&gt;
&lt;h3 id=&quot;4-2-如何评估工作量&quot;&gt;&lt;a href=&quot;#4-2-如何评估工作量&quot; class=&quot;headerlink&quot; title=&quot;4.2 如何评估工作量&quot;&gt;&lt;/a&gt;4.2 如何评估工作量&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;如果你不是工程经理，那么让你的工程经理去要评估量。&lt;/li&gt;
&lt;li&gt;表面上接受评估结果&lt;/li&gt;
&lt;li&gt;认识到你的权力&lt;/li&gt;
&lt;li&gt;只跟踪剩余时间&lt;/li&gt;
&lt;li&gt;要求不考虑余量的评估&lt;/li&gt;
&lt;li&gt;每周一次在团队会议上评估各任务的剩余时间&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;4-3-跟踪Bug并创建Bug燃尽图&quot;&gt;&lt;a href=&quot;#4-3-跟踪Bug并创建Bug燃尽图&quot; class=&quot;headerlink&quot; title=&quot;4.3 跟踪Bug并创建Bug燃尽图&quot;&gt;&lt;/a&gt;4.3 跟踪Bug并创建Bug燃尽图&lt;/h3&gt;&lt;h3 id=&quot;4-4-管理依赖&quot;&gt;&lt;a href=&quot;#4-4-管理依赖&quot; class=&quot;headerlink&quot; title=&quot;4.4 管理依赖&quot;&gt;&lt;/a&gt;4.4 管理依赖&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;如果去除它也可以运转，那就去除它。&lt;/li&gt;
&lt;li&gt;如果内部能构建，那就内部构建。&lt;/li&gt;
&lt;li&gt;如果必须添加一个依赖，那就趁早添加。&lt;/li&gt;
&lt;li&gt;如果必须添加一些依赖，那就依靠它上一个已构建的版本。&lt;/li&gt;
&lt;li&gt;如果交付得早，被依赖伤害的可能性就小。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;五、赢在测试&quot;&gt;&lt;a href=&quot;#五、赢在测试&quot; class=&quot;headerlink&quot; title=&quot;五、赢在测试&quot;&gt;&lt;/a&gt;五、赢在测试&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;坚持测试驱动开发。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;围绕优秀的测试主管组建测试团队。&lt;/p&gt;
&lt;p&gt;选择一:降低标准雇佣测试人员并聘请管理者去管理他们&lt;/p&gt;
&lt;p&gt;选择二:按高标准雇佣外包团队&lt;/p&gt;
&lt;p&gt;选择三:按高标准雇佣测试人员，不使用外包团队&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;亲自评审测试计划和测试用例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;自动化测试。&lt;/li&gt;
&lt;li&gt;虔诚地推行内部试用(Dogfood)。&lt;/li&gt;
&lt;li&gt;开展找虫总动员。&lt;/li&gt;
&lt;li&gt;勤勉且有条理地处理 Bug。&lt;/li&gt;
&lt;li&gt;任命可信测试者以构建最后一道防线。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可信测试者是指在保密协议的约束下，在产品发布前使用产品内部试用版的用户。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;思想火花:以新用户的方式来使用整个产品&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;六、赢在量化&quot;&gt;&lt;a href=&quot;#六、赢在量化&quot; class=&quot;headerlink&quot; title=&quot;六、赢在量化&quot;&gt;&lt;/a&gt;六、赢在量化&lt;/h3&gt;&lt;p&gt;量化数据是团 队主管的命根子，作为团队主管你全部的工作都是说服别人或被别人说服，各种量化 数据为这样的讨论提供了理性基础。&lt;/p&gt;
&lt;h3 id=&quot;6-1-如何采集正确的量化数据且只采集正确的量化数据&quot;&gt;&lt;a href=&quot;#6-1-如何采集正确的量化数据且只采集正确的量化数据&quot; class=&quot;headerlink&quot; title=&quot;6.1 如何采集正确的量化数据且只采集正确的量化数据&quot;&gt;&lt;/a&gt;6.1 如何采集正确的量化数据且只采集正确的量化数据&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;测量成本低廉&lt;/li&gt;
&lt;li&gt;测量可靠且可重复检验&lt;/li&gt;
&lt;li&gt;最好能实时测量&lt;/li&gt;
&lt;li&gt;团队能够根据它做出明智的改变&lt;/li&gt;
&lt;li&gt;专注于客户&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;6-2-你需要采集的三类量化数据&quot;&gt;&lt;a href=&quot;#6-2-你需要采集的三类量化数据&quot; class=&quot;headerlink&quot; title=&quot;6.2 你需要采集的三类量化数据&quot;&gt;&lt;/a&gt;6.2 你需要采集的三类量化数据&lt;/h3&gt;&lt;h4 id=&quot;1-目标进度&quot;&gt;&lt;a href=&quot;#1-目标进度&quot; class=&quot;headerlink&quot; title=&quot;1.  目标进度&quot;&gt;&lt;/a&gt;1.  目标进度&lt;/h4&gt;&lt;p&gt;目标指标会告诉你目标的完成进度。在谷歌一个重要的目标指标是“7 天活跃用 户数”。没有人会看不懂使用精确增量表达法来描述的目标，而且这样的描述基本符合 SMART 的定义.&lt;/p&gt;
&lt;h4 id=&quot;2-经营绩效&quot;&gt;&lt;a href=&quot;#2-经营绩效&quot; class=&quot;headerlink&quot; title=&quot;2.  经营绩效&quot;&gt;&lt;/a&gt;2.  经营绩效&lt;/h4&gt;&lt;p&gt;经营绩效指标会告诉你产品的问题在哪里以及如何提升用户体验。这些指标通常 是用比率表示，比如从点击购买按钮到付款成功的转化率。和目标指标一样，选择合 适的经营绩效指标至关重要。比如说你想做一个优秀的社交产品，监控好友数量是没 有用的，不同类型的用户有不同的好友数。你应该去监控用户参与度，这样你才能回 答“用户会花费时间在网站上吗”、“用户会发信息吗”这类问题。反映这些行为的相 关指标可能包括 7 天活跃用户平均 7 天发帖量、7 天活跃用户平均停留时间等。&lt;/p&gt;
&lt;h4 id=&quot;3-系统性能&quot;&gt;&lt;a href=&quot;#3-系统性能&quot; class=&quot;headerlink&quot; title=&quot;3. 系统性能&quot;&gt;&lt;/a&gt;3. 系统性能&lt;/h4&gt;&lt;p&gt;系统性能指标能说明你产品的实时健康度。这类指标包括 99.9% 平均延迟、每 秒请求数、并发用户数、每秒下单数以及其他基于时间的指标。&lt;/p&gt;
&lt;h3 id=&quot;6-3-专注于目标本身，忽略细枝末节&quot;&gt;&lt;a href=&quot;#6-3-专注于目标本身，忽略细枝末节&quot; class=&quot;headerlink&quot; title=&quot;6.3 专注于目标本身，忽略细枝末节&quot;&gt;&lt;/a&gt;6.3 专注于目标本身，忽略细枝末节&lt;/h3&gt;&lt;p&gt;但是核心指标是不可能被糊弄过去的。&lt;/p&gt;
&lt;h3 id=&quot;七、赢在发布&quot;&gt;&lt;a href=&quot;#七、赢在发布&quot; class=&quot;headerlink&quot; title=&quot;七、赢在发布&quot;&gt;&lt;/a&gt;七、赢在发布&lt;/h3&gt;&lt;h4 id=&quot;7-1-对改动说不。&quot;&gt;&lt;a href=&quot;#7-1-对改动说不。&quot; class=&quot;headerlink&quot; title=&quot;7.1. 对改动说不。&quot;&gt;&lt;/a&gt;7.1. 对改动说不。&lt;/h4&gt;&lt;h4 id=&quot;7-2-开启作战室。&quot;&gt;&lt;a href=&quot;#7-2-开启作战室。&quot; class=&quot;headerlink&quot; title=&quot;7.2. 开启作战室。&quot;&gt;&lt;/a&gt;7.2. 开启作战室。&lt;/h4&gt;&lt;h4 id=&quot;7-3-营造紧迫的气氛。&quot;&gt;&lt;a href=&quot;#7-3-营造紧迫的气氛。&quot; class=&quot;headerlink&quot; title=&quot;7.3. 营造紧迫的气氛。&quot;&gt;&lt;/a&gt;7.3. 营造紧迫的气氛。&lt;/h4&gt;&lt;h4 id=&quot;7-4-核查发布清单。&quot;&gt;&lt;a href=&quot;#7-4-核查发布清单。&quot; class=&quot;headerlink&quot; title=&quot;7.4. 核查发布清单。&quot;&gt;&lt;/a&gt;7.4. 核查发布清单。&lt;/h4&gt;&lt;h4 id=&quot;7-5-撰写博文。&quot;&gt;&lt;a href=&quot;#7-5-撰写博文。&quot; class=&quot;headerlink&quot; title=&quot;7.5. 撰写博文。&quot;&gt;&lt;/a&gt;7.5. 撰写博文。&lt;/h4&gt;&lt;p&gt;如果你是完全按照产品开发过程行事的，那么你应该已经写过一篇博文了，或者 至少写过相同主题的产品预告。那篇博文的目的在于阐述你的使命、你的目标客户以及你能解决的问题。从传统新闻的角度来看它就是你的“导语”。&lt;/p&gt;
&lt;h4 id=&quot;7-6-发布软件。&quot;&gt;&lt;a href=&quot;#7-6-发布软件。&quot; class=&quot;headerlink&quot; title=&quot;7.6. 发布软件。&quot;&gt;&lt;/a&gt;7.6. 发布软件。&lt;/h4&gt;&lt;h4 id=&quot;7-7-亲自验证软件。&quot;&gt;&lt;a href=&quot;#7-7-亲自验证软件。&quot; class=&quot;headerlink&quot; title=&quot;7.7. 亲自验证软件。&quot;&gt;&lt;/a&gt;7.7. 亲自验证软件。&lt;/h4&gt;&lt;h4 id=&quot;7-8-应对发布带来的各种影响。【重点查看】&quot;&gt;&lt;a href=&quot;#7-8-应对发布带来的各种影响。【重点查看】&quot; class=&quot;headerlink&quot; title=&quot;7.8. 应对发布带来的各种影响。【重点查看】&quot;&gt;&lt;/a&gt;7.8. 应对发布带来的各种影响。【重点查看】&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;应对回滚。&lt;/li&gt;
&lt;li&gt;处理产品危机。 &lt;/li&gt;
&lt;li&gt;演示产品。&lt;/li&gt;
&lt;li&gt;应对媒体。&lt;/li&gt;
&lt;li&gt;庆祝发布。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;八、赢在团队&quot;&gt;&lt;a href=&quot;#八、赢在团队&quot; class=&quot;headerlink&quot; title=&quot;八、赢在团队&quot;&gt;&lt;/a&gt;八、赢在团队&lt;/h3&gt;&lt;h3 id=&quot;8-1-如何组建一支团队&quot;&gt;&lt;a href=&quot;#8-1-如何组建一支团队&quot; class=&quot;headerlink&quot; title=&quot;8.1 如何组建一支团队&quot;&gt;&lt;/a&gt;8.1 如何组建一支团队&lt;/h3&gt;&lt;p&gt;为了组建一支高效的团队，你必须找到能默契配合的工程主管、产品主管和设计 主管。当发现这些人时，你要巴结好他们，哪怕给他们写赞美诗、买糖果甚至洗车都 行。纵观整个行业，你会发现不管 是在业务中还是在项目中，优秀的人总是聚在一起工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;项目集经理&lt;/p&gt;
&lt;p&gt;PM负责交付软件，项目集经理的职责重点在于整合不同团队和不同工作职能。一种看待项目集经理的方式是把它看做是一个比产品经理更少关注业务、比项 目经理更少关注项目的技术角色。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产品经理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常产品经理的职责更偏重软件的业务方面。甚至有些产品经理不负责软件，他 们是典型的 MBA 出身，专注于品牌管理、定价、市场进入策略等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目经理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目经理的主要职责在于排定项目计划和协调团队工作，在谷歌这个职位也被 称作技术项目经理。他们负责向工程师要评估值，辨识从属关系以及弄清楚如何在 更短的时间内做更多事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工程经理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;工程经理常常是由老牌的程序员担任的。最佳的工程经理是那些由于热爱团队、 善解人意、精通交付并乐于构建卓越产品而晋升到该职位的人。产品经理、项目集经理或者项目经理，甚至是技术项目经理都可以是工程经理的 属下，但也可以是合作伙伴。&lt;/p&gt;
&lt;h3 id=&quot;8-2-雇佣原则&quot;&gt;&lt;a href=&quot;#8-2-雇佣原则&quot; class=&quot;headerlink&quot; title=&quot;8.2 雇佣原则&quot;&gt;&lt;/a&gt;8.2 雇佣原则&lt;/h3&gt;&lt;p&gt;■雇佣比你聪明的人。&lt;br&gt;■雇佣懂得自己不是来当老板的人。&lt;br&gt;■雇佣表达清晰、言之有物的人。&lt;br&gt;■雇佣用数据说话的人。&lt;br&gt;■雇佣充满活力的人。&lt;/p&gt;
&lt;h3 id=&quot;8-3-如何收购一家公司&quot;&gt;&lt;a href=&quot;#8-3-如何收购一家公司&quot; class=&quot;headerlink&quot; title=&quot;8.3 如何收购一家公司&quot;&gt;&lt;/a&gt;8.3 如何收购一家公司&lt;/h3&gt;&lt;h4 id=&quot;8-3-1-知识产权&quot;&gt;&lt;a href=&quot;#8-3-1-知识产权&quot; class=&quot;headerlink&quot; title=&quot;8.3.1 知识产权&quot;&gt;&lt;/a&gt;8.3.1 知识产权&lt;/h4&gt;&lt;p&gt;你能使用这家公司构建的技术、内容和专利。&lt;/p&gt;
&lt;h4 id=&quot;8-3-2-人才&quot;&gt;&lt;a href=&quot;#8-3-2-人才&quot; class=&quot;headerlink&quot; title=&quot;8.3.2 人才&quot;&gt;&lt;/a&gt;8.3.2 人才&lt;/h4&gt;&lt;p&gt;你能使用这家公司雇佣的人才。关键人物、好的雇员、多余人才&lt;/p&gt;
&lt;h4 id=&quot;8-3-3-客户&quot;&gt;&lt;a href=&quot;#8-3-3-客户&quot; class=&quot;headerlink&quot; title=&quot;8.3.3 客户&quot;&gt;&lt;/a&gt;8.3.3 客户&lt;/h4&gt;&lt;p&gt;你能凭借这家公司的客户来加快业务增长。&lt;/p&gt;
&lt;h4 id=&quot;8-3-4-防御&quot;&gt;&lt;a href=&quot;#8-3-4-防御&quot; class=&quot;headerlink&quot; title=&quot;8.3.4 防御&quot;&gt;&lt;/a&gt;8.3.4 防御&lt;/h4&gt;&lt;p&gt;你买这家公司是为了让别人没法买它。&lt;/p&gt;
&lt;h4 id=&quot;8-3-5-收购的陷阱和最佳实践&quot;&gt;&lt;a href=&quot;#8-3-5-收购的陷阱和最佳实践&quot; class=&quot;headerlink&quot; title=&quot;8.3.5 收购的陷阱和最佳实践&quot;&gt;&lt;/a&gt;8.3.5 收购的陷阱和最佳实践&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;计划将你团队的部分人员调入他们团队&lt;/li&gt;
&lt;li&gt;计划整合产品&lt;/li&gt;
&lt;li&gt;了解之前所有的交易和负债&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;8-4-如何远程团队合作&quot;&gt;&lt;a href=&quot;#8-4-如何远程团队合作&quot; class=&quot;headerlink&quot; title=&quot;8.4 如何远程团队合作&quot;&gt;&lt;/a&gt;8.4 如何远程团队合作&lt;/h3&gt;&lt;p&gt;■组建一支工程师团队&lt;br&gt;■充分沟通&lt;br&gt;■不要外包设计或 PM 角色&lt;br&gt;■适应文化差异&lt;br&gt;■构建清晰的需求&lt;br&gt; ■忍受时差，通过任何方式会面&lt;br&gt; ■委任得力的主管。&lt;br&gt; ■大量出差，或者完全不出差&lt;br&gt; ■与远程团队共饮&lt;/p&gt;
&lt;h3 id=&quot;8-5-如何加入一个新团队&quot;&gt;&lt;a href=&quot;#8-5-如何加入一个新团队&quot; class=&quot;headerlink&quot; title=&quot;8.5 如何加入一个新团队&quot;&gt;&lt;/a&gt;8.5 如何加入一个新团队&lt;/h3&gt;&lt;p&gt;弄清楚在这个特殊团队中你的理想角色应该是什么很关键。&lt;/p&gt;
&lt;p&gt;你必须敏感地意识到团队需要什么。&lt;/p&gt;
&lt;p&gt;第一件事，不要和团队说你们的产品一团糟这种话。后来我才认识到在大多数情况下你 都应该尽量先将事情本身搞清楚，而不是张口就说产品一团糟这种话。&lt;/p&gt;
&lt;p&gt;必须做的第二件事情是做一个选择:你是打算延期交付以解决这种 混乱状况，还是承认它的存在然后正常交付。做出延期决定的最佳时间点是你刚加入 团队的时候。&lt;/p&gt;
&lt;h3 id=&quot;九、胜在技术&quot;&gt;&lt;a href=&quot;#九、胜在技术&quot; class=&quot;headerlink&quot; title=&quot;九、胜在技术&quot;&gt;&lt;/a&gt;九、胜在技术&lt;/h3&gt;&lt;p&gt;如果想快速交付一款卓越的产品，你必须会询问富有洞见的问题，会正确地引 导方向，并明智地决定哪些事必须现在做，哪些事可以之后再做。你还要会评估和雇 佣工程经理。因此，你对技术的了解程度最不济也要与对你车里的汽油的了解程度相 当。。如果你想顺利地通过面试或者从容地 掌控产品开发过程，你需要了解四个S:服务器(server)、服务(service)、速度&lt;br&gt;(speed)和扩容(scaling)。一旦理解了这四个基本元素，你就能够向团队询问恰当 的问题了。&lt;/p&gt;
&lt;h3 id=&quot;9-1-服务器&quot;&gt;&lt;a href=&quot;#9-1-服务器&quot; class=&quot;headerlink&quot; title=&quot;9.1 服务器&quot;&gt;&lt;/a&gt;9.1 服务器&lt;/h3&gt;&lt;p&gt;尽量不要买服务器自己搭建。优秀的工程师会尝试学习如何避免去做运维的琐事。&lt;br&gt;展现层、业务逻辑层、数据库&lt;/p&gt;
&lt;h3 id=&quot;9-2-服务&quot;&gt;&lt;a href=&quot;#9-2-服务&quot; class=&quot;headerlink&quot; title=&quot;9.2 服务&quot;&gt;&lt;/a&gt;9.2 服务&lt;/h3&gt;&lt;p&gt;SOA面向服务的架构(SOA，Service-Oriented Architecture），SOA 将包含业务逻辑的中间层分解成一系列独立的服务。这些服务 可能运行在相同的服务器上，但它们的构建、版本管理和运行都是独立的。他们相互调用和返回，从而形成了服务链，产生耗时。&lt;/p&gt;
&lt;h3 id=&quot;9-3-速度&quot;&gt;&lt;a href=&quot;#9-3-速度&quot; class=&quot;headerlink&quot; title=&quot;9.3 速度&quot;&gt;&lt;/a&gt;9.3 速度&lt;/h3&gt;&lt;p&gt;缓存策略&lt;/p&gt;
&lt;h3 id=&quot;9-4-扩容&quot;&gt;&lt;a href=&quot;#9-4-扩容&quot; class=&quot;headerlink&quot; title=&quot;9.4 扩容&quot;&gt;&lt;/a&gt;9.4 扩容&lt;/h3&gt;&lt;p&gt;你能通过增加服务器来增加容量，且增加的每个服务器都能带来接 近完整服务器的容量。不过在许多系统中你依然会遇到瓶颈，如在 VIP 这块，一个 VIP 只支持那么多连接。这时面向服务的架构的一个好处是你可以独立为每个服务扩 容，当决策服务需要更多马力，回应服务需要更多空间时，你可以通过合理分配相应 类型的硬件给他们扩容。&lt;/p&gt;
&lt;h3 id=&quot;9-5-如何询问正确的技术问题&quot;&gt;&lt;a href=&quot;#9-5-如何询问正确的技术问题&quot; class=&quot;headerlink&quot; title=&quot;9.5 如何询问正确的技术问题&quot;&gt;&lt;/a&gt;9.5 如何询问正确的技术问题&lt;/h3&gt;&lt;p&gt;你现在的知识已经足够 向工程团队询问一些重要的问题并听懂他们大部分的回答了。你必须询问一些这类问题，它们会揭示出一些潜藏的问题 并帮助你的团队想清楚他们的设计。&lt;/p&gt;
&lt;h3 id=&quot;十、胜在沟通&quot;&gt;&lt;a href=&quot;#十、胜在沟通&quot; class=&quot;headerlink&quot; title=&quot;十、胜在沟通&quot;&gt;&lt;/a&gt;十、胜在沟通&lt;/h3&gt;&lt;h3 id=&quot;10-1-如何写好邮件&quot;&gt;&lt;a href=&quot;#10-1-如何写好邮件&quot; class=&quot;headerlink&quot; title=&quot;10.1 如何写好邮件&quot;&gt;&lt;/a&gt;10.1 如何写好邮件&lt;/h3&gt;&lt;p&gt;你要向比你更忙的、有更多邮件需要处理的人们传达与决策或进展相 关的大小事项。因此写好邮件对你能否成功至关重要。写邮件最主要的目标应该是清 晰、简要地传递单个信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;像记者写新闻一样写邮件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用了精确增量表达法、用了 20 秒时间来为邮件加上称呼、敬 语和署名，这样可以帮助信息传递给正确的受众&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用精确增量表达法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;见差值、见开始值、见结束值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分点阐释原因&lt;/li&gt;
&lt;li&gt;立即停笔，你已经写完了这封邮件&lt;/li&gt;
&lt;li&gt;设法用建议取代质疑&lt;/li&gt;
&lt;li&gt;考虑受众的感受&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;10-2-如何应对五种类型的会议&quot;&gt;&lt;a href=&quot;#10-2-如何应对五种类型的会议&quot; class=&quot;headerlink&quot; title=&quot;10.2 如何应对五种类型的会议&quot;&gt;&lt;/a&gt;10.2 如何应对五种类型的会议&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;团队会议&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;了解近况以及利用团队合力来深入讨论和解决特定问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;站会&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一种超级简短的会议，它只用来交流近况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1对1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;产品 / 工程 / 用户体验评审&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;头脑风暴会&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;10-3-如何组织好会议&quot;&gt;&lt;a href=&quot;#10-3-如何组织好会议&quot; class=&quot;headerlink&quot; title=&quot;10.3 如何组织好会议&quot;&gt;&lt;/a&gt;10.3 如何组织好会议&lt;/h3&gt;&lt;p&gt;■会后立即发出主题纪要&lt;br&gt;■允许改变开会的目的&lt;br&gt;■拒绝在团队会议中发泄负面情绪，但允许在 1 对 1 会议中发泄&lt;br&gt;■使用鱼骨图等辅助工具解决问题&lt;/p&gt;
&lt;h3 id=&quot;10-4-如何做好演示&quot;&gt;&lt;a href=&quot;#10-4-如何做好演示&quot; class=&quot;headerlink&quot; title=&quot;10.4 如何做好演示&quot;&gt;&lt;/a&gt;10.4 如何做好演示&lt;/h3&gt;&lt;p&gt;■将演示时间控制在 15 分钟内&lt;br&gt;■永远传达且只传达一个信息&lt;br&gt;■讲故事&lt;br&gt;■制作“综述单页”&lt;br&gt;■重点演示用户体验&lt;br&gt;■极度专注倾听&lt;/p&gt;
&lt;h3 id=&quot;十一、胜在决策&quot;&gt;&lt;a href=&quot;#十一、胜在决策&quot; class=&quot;headerlink&quot; title=&quot;十一、胜在决策&quot;&gt;&lt;/a&gt;十一、胜在决策&lt;/h3&gt;&lt;h3 id=&quot;11-1-推后-我们明天再完成。&quot;&gt;&lt;a href=&quot;#11-1-推后-我们明天再完成。&quot; class=&quot;headerlink&quot; title=&quot;11.1 推后:我们明天再完成。&quot;&gt;&lt;/a&gt;11.1 推后:我们明天再完成。&lt;/h3&gt;&lt;h3 id=&quot;11-2-谈判-“行，再给你10分钟。”&quot;&gt;&lt;a href=&quot;#11-2-谈判-“行，再给你10分钟。”&quot; class=&quot;headerlink&quot; title=&quot;11.2 谈判:“行，再给你10分钟。”&quot;&gt;&lt;/a&gt;11.2 谈判:“行，再给你10分钟。”&lt;/h3&gt;&lt;p&gt;■聚焦于促进。&lt;br&gt;■“先寻求理解，再寻求被理解。”&lt;br&gt;■如果你已经有了倾向性的判断，不妨先说出来，然后让其他人继续发表观点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阶段1:这不是你的错&lt;/li&gt;
&lt;li&gt;阶段2:公平谈判并使用数据支持&lt;/li&gt;
&lt;li&gt;阶段3:那个数据没谈成……我们编个新数据吧!&lt;/li&gt;
&lt;li&gt;阶段4:寻找可免费提供的东西&lt;/li&gt;
&lt;li&gt;阶段5:转身离开并安静思考 &lt;/li&gt;
&lt;li&gt;阶段6:协议、文书工作、以及互相指责&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;11-3-处理冲突&quot;&gt;&lt;a href=&quot;#11-3-处理冲突&quot; class=&quot;headerlink&quot; title=&quot;11.3 处理冲突&quot;&gt;&lt;/a&gt;11.3 处理冲突&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不说“你”或“我”&lt;/li&gt;
&lt;li&gt;聚焦在角色模型上，而不是人上&lt;/li&gt;
&lt;li&gt;使用客观指标&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;十二、胜在从容&quot;&gt;&lt;a href=&quot;#十二、胜在从容&quot; class=&quot;headerlink&quot; title=&quot;十二、胜在从容&quot;&gt;&lt;/a&gt;十二、胜在从容&lt;/h3&gt;&lt;p&gt;■如何平衡交付、质量和影响、团队这三者的关系，你才能交付一款卓越的软件。&lt;br&gt;■如何应对随机情况，你才能继续按原定节奏交付一款卓越的软件。随机情况是 指当你的管理层掷给你一个弧线球或者你的团队脱离正轨时出现的情况。随机 情况是每个在谷歌或亚马逊工作的人都理解的词之一，因为它是与帮助团队专 注于交付相对立的。&lt;br&gt;■如何妥善地管好你的精力，你才能 1 个顶 3 个。 ■如何找人以及在什么时候找人，你才能让合适的人做合适的事。 ■如何咽下狗屎三明治，因为有时候你的确得咽下去。&lt;/p&gt;
&lt;h3 id=&quot;十三、再度起航&quot;&gt;&lt;a href=&quot;#十三、再度起航&quot; class=&quot;headerlink&quot; title=&quot;十三、再度起航&quot;&gt;&lt;/a&gt;十三、再度起航&lt;/h3&gt;&lt;p&gt;先回过头来审视一下周边的环境。软件从来没有做完一说。 你需要问问自己是应该开始做软件的第二版，还是开始做些新的东西。某些情况下你 会发现对产品的投入所带来的回报正在递减。我所说的投入是指你的时间。时间构成 的风险资本是最具利用价值的资产之一。&lt;/p&gt;
&lt;p&gt;如果你各方面都表现不凡——按照本书的指导来做事你就能变成这样，就永远可 以选择下一个项目。考虑每种选择对你的业务或个人意味着什么。或许是时候换一个 团队或换一个产品了，或许你因为理解错了客户的需求而需要重构刚刚交付的产品， 或许你只是简单地喜欢和那个工程经理小伙伴一起工作。评估维度有很多，你需要花 些时间来考虑。&lt;/p&gt;
&lt;p&gt;项目过渡之所以具有挑战性，是因为它就像铁人三项赛一样，你必须中断之前的&lt;/p&gt;
&lt;p&gt;192  第二部分 掌握卓越技能，更胜一筹&lt;br&gt;做事方式(如专注于细节、预发布)然后开始新的做事方式(如参与头脑风暴和策略 游戏)。它的另一个挑战性还在于你需要设法做好两份工作。第一份工作是维护已经 在生产环境中的软件，它几乎肯定会遇到一些早期发展过程中的困难。第二份工作是 启动新项目。大部分新项目在启动时都需要巨大的精力去推动，并在推动不利时需要 以坚韧的精神去承受不可避免的迎头痛击。&lt;/p&gt;
&lt;h2 id=&quot;十大交付原则&quot;&gt;&lt;a href=&quot;#十大交付原则&quot; class=&quot;headerlink&quot; title=&quot;十大交付原则&quot;&gt;&lt;/a&gt;十大交付原则&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;你不是来当老板的——团队主管是仆人，他们存在的目的就是为了伺候工程团队。 2. 从用户角度出发。&lt;/li&gt;
&lt;li&gt;用独特的方法解决很多人都有的大问题。&lt;/li&gt;
&lt;li&gt;坏的消息就是好的消息。——杰克·韦尔奇&lt;/li&gt;
&lt;li&gt;先寻求理解，再寻求被理解。——史蒂芬·柯维&lt;/li&gt;
&lt;li&gt;构建最简洁的可用的产品。&lt;/li&gt;
&lt;li&gt;交付手中有的，而非脑中想的。&lt;/li&gt;
&lt;li&gt;无法测量的东西也就无法提升。——开尔文勋爵&lt;/li&gt;
&lt;li&gt;你不可能做完所有工作，所以你应首先做那些只有你能做的工作。 10. 永远走在交付的康庄大道上。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;团队不可或缺的工件&quot;&gt;&lt;a href=&quot;#团队不可或缺的工件&quot; class=&quot;headerlink&quot; title=&quot;团队不可或缺的工件&quot;&gt;&lt;/a&gt;团队不可或缺的工件&lt;/h2&gt;&lt;p&gt;在管理产品开发的过程中，你会创建很多文档、指南、核查清单以及其他工件。 下面这张列表是贯穿产品生命周期中你可能期望创建的工件的略述。你很可能需要创 建以下所有工件，所以它们没有按照特别的顺序排列。你能从 www.shippinggreatness. com 上下载到其中一些工件的模板。&lt;/p&gt;
&lt;p&gt;■轮值表——将寻呼器号码和手机号码的清单复制到一张钱包大小的纸上。 &lt;/p&gt;
&lt;p&gt;■使用 Wiki 搭建的“联络簿”，用于遇到故障、突发事件或问题时寻找相关负责 人。这个列表应该包括法务、公关、市场、产品团队、工程团队和网络运维(或者任何负责生产基础设施的部门)的负责人和联系信息。&lt;br&gt;■描述使命的语句。&lt;/p&gt;
&lt;p&gt;■关于未来两年的清晰策略。&lt;/p&gt;
&lt;p&gt;■一页简要说明产品的人物 / 事件 / 原因 / 时间 / 方法的文档。 ■产品需求文档，或者叫功能规格说明。&lt;/p&gt;
&lt;p&gt;■新闻稿。&lt;/p&gt;
&lt;p&gt;■线框原型图或者餐巾纸草图。&lt;/p&gt;
&lt;p&gt;■内部 FAQ 文档，其中部分问答打上外部 FAQ 标签以作为客户支持内容的原始&lt;br&gt;素材。 ■沟通文档，包括关键信息、有潜在危险的问题和对这些问题的回应。 ■发布时穿的 T 恤衫。&lt;/p&gt;
&lt;p&gt;■包含测试时间的开发计划表。&lt;/p&gt;
&lt;p&gt;■未来两年的路线图。&lt;/p&gt;
&lt;p&gt;■内部用户列表和迁移时间表(适用于基础设施项目)。&lt;/p&gt;
&lt;p&gt;■可信测试者列表(适用于面向外部的产品)。&lt;/p&gt;
&lt;p&gt; ■特性需求列表，并将内部和外部客户中呼声最高的三个特性需求高亮。 &lt;/p&gt;
&lt;p&gt; ■开放问题列表，并清晰标记这些问题的状态。 &lt;/p&gt;
&lt;p&gt; ■进行中的会议纪要。最好建一个文档保存项目所有的历史会议纪要。 &lt;/p&gt;
&lt;p&gt; ■发布计划或发布规程。 &lt;/p&gt;
&lt;p&gt; ■记录什么特性在什么时间发布的生成变更列表。在排查客户问题时特别有用。 &lt;/p&gt;
&lt;p&gt; ■对增长预测和硬件配置需求提前进行计划的生产设计文档。&lt;/p&gt;
&lt;p&gt;  ■专利注册文件、商标注册文件和版权申明文件。&lt;/p&gt;
&lt;p&gt;■隐私说明。 &lt;/p&gt;
&lt;p&gt;■出色的数据指标——包含内部的状态面板和一些供外部消费的清洗过的数据指标。 &lt;/p&gt;
&lt;p&gt;■为幻灯片、演示、评审、发布准备的产品截图。&lt;/p&gt;
&lt;p&gt; ■团队本季度目标以及上季度目标完成情况。&lt;/p&gt;
&lt;p&gt;■Bug 状态面板和阻碍每个发布的 Bug 列表。&lt;/p&gt;
&lt;p&gt;■错误原因报告或事后调查报告。&lt;/p&gt;
&lt;p&gt; ■会议纪要和团队周会、用户界面评审、产品评审、工程评审、Bug 处理、法务&lt;br&gt;评审、业务拓展周会以及客户支持碰头会的时间计划表。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;产品学习笔记&quot;&gt;&lt;a href=&quot;#产品学习笔记&quot; class=&quot;headerlink&quot; title=&quot;产品学习笔记&quot;&gt;&lt;/a&gt;产品学习笔记&lt;/h3&gt;&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="随笔小结" scheme="http://xuzichao.com/tags/%E9%9A%8F%E7%AC%94%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>机器学习在IOS中的应用 Core ML</title>
    <link href="http://xuzichao.com/2017/06/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8IOS%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%20Core%20ML/"/>
    <id>http://xuzichao.com/2017/06/22/机器学习在IOS中的应用 Core ML/</id>
    <published>2017-06-22T11:42:52.000Z</published>
    <updated>2017-06-22T12:45:22.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;机器学习在IOS中的应用-Core-ML&quot;&gt;&lt;a href=&quot;#机器学习在IOS中的应用-Core-ML&quot; class=&quot;headerlink&quot; title=&quot;机器学习在IOS中的应用 Core ML&quot;&gt;&lt;/a&gt;机器学习在IOS中的应用 Core ML&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;2017年的WWDC大会苹果赋予了开发者们新能力，能够将机器学习应用在移动端上，着实是一次让人感到兴奋的事情，一颗赛艇！！积极开展的Session学习活动，在第一节和第二节引用了一些概念和背景来帮助理解，熟练工请忽略，跳至第三节直接开始操作,第五节开始有图片学习的demo可查看。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;本篇相关文档和Session有：&quot;&gt;&lt;a href=&quot;#本篇相关文档和Session有：&quot; class=&quot;headerlink&quot; title=&quot;本篇相关文档和Session有：&quot;&gt;&lt;/a&gt;本篇相关文档和Session有：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;document: &lt;a href=&quot;https://developer.apple.com/documentation/coreml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Ml FrameWork&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Session: &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2017/703/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WWDC 2017 Session 703 Introducing Core ML&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Session: &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2017/710/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WWDC 2017 Session 710 Core ML in depth&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一、AI-ML-DL&quot;&gt;&lt;a href=&quot;#一、AI-ML-DL&quot; class=&quot;headerlink&quot; title=&quot;一、AI.ML.DL&quot;&gt;&lt;/a&gt;一、AI.ML.DL&lt;/h2&gt;&lt;h3 id=&quot;1、-人工智能&quot;&gt;&lt;a href=&quot;#1、-人工智能&quot; class=&quot;headerlink&quot; title=&quot;1、 人工智能&quot;&gt;&lt;/a&gt;1、 人工智能&lt;/h3&gt;&lt;h4 id=&quot;1-1-定义：&quot;&gt;&lt;a href=&quot;#1-1-定义：&quot; class=&quot;headerlink&quot; title=&quot;1.1 定义：&quot;&gt;&lt;/a&gt;1.1 定义：&lt;/h4&gt;&lt;p&gt;让人工制造出来的系统或者机器，其运作行为看起来就像是人所表现出的智能行为一样，即机器“像人一样思考”、“像人一样行动”、“理性地思考”和“理性地行动”。人工智能的研究是高度技术性和专业的，比如机器学习就是属于学习方向的课题，让机器具有人一样的学习行为。&lt;/p&gt;
&lt;h4 id=&quot;1-2-研究课题：&quot;&gt;&lt;a href=&quot;#1-2-研究课题：&quot; class=&quot;headerlink&quot; title=&quot;1.2 研究课题：&quot;&gt;&lt;/a&gt;1.2 研究课题：&lt;/h4&gt;&lt;p&gt;演绎推理和解决问题、知识表示法、规划、学习、自然语言处理、运动和控制、知觉、社交、创造力、多元智能、伦理管理、经济冲击&lt;/p&gt;
&lt;h3 id=&quot;2、机器学习&quot;&gt;&lt;a href=&quot;#2、机器学习&quot; class=&quot;headerlink&quot; title=&quot;2、机器学习&quot;&gt;&lt;/a&gt;2、机器学习&lt;/h3&gt;&lt;h4 id=&quot;2-1-定义：&quot;&gt;&lt;a href=&quot;#2-1-定义：&quot; class=&quot;headerlink&quot; title=&quot;2.1 定义：&quot;&gt;&lt;/a&gt;2.1 定义：&lt;/h4&gt;&lt;p&gt;通过在大量数据中寻找模式,从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法.因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论，涵盖一切有关数据训练的学习算法。&lt;/p&gt;
&lt;h4 id=&quot;2-2-方式分类：&quot;&gt;&lt;a href=&quot;#2-2-方式分类：&quot; class=&quot;headerlink&quot; title=&quot;2.2 方式分类：&quot;&gt;&lt;/a&gt;2.2 方式分类：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;监督学习：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。训练集中的目标是由人标注的。类似概念还有半监督学习和无监督学习。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增强学习：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过观察来学习做成如何的动作。每个动作都会对环境有所影响，学习对象根据观察到的周围环境的反馈来做出判断。&lt;/p&gt;
&lt;h4 id=&quot;2-3-使用算法：&quot;&gt;&lt;a href=&quot;#2-3-使用算法：&quot; class=&quot;headerlink&quot; title=&quot;2.3 使用算法：&quot;&gt;&lt;/a&gt;2.3 使用算法：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;构造间隔理论分布，聚类分析和模式识别：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人工神经网络、决策树、感知器、支持向量机、集成学习AdaBoost、降维与度量学习、聚类贝叶斯分类器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;构造条件概率，回归分析和统计分类：    &lt;/p&gt;
&lt;p&gt;高斯过程回归、线性判别分析、最近邻居法、径向基函数核&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过再生模型构造概率密度函数，最大期望算法概率图模型：&lt;/p&gt;
&lt;p&gt;  贝叶斯网、Markov随机场、Generative Topographic Mapping&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;近似推断技术：&lt;br&gt;  马尔可夫链、蒙特卡罗方法、变分法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3、深度学习&quot;&gt;&lt;a href=&quot;#3、深度学习&quot; class=&quot;headerlink&quot; title=&quot;3、深度学习&quot;&gt;&lt;/a&gt;3、深度学习&lt;/h3&gt;&lt;h4 id=&quot;3-1-定义：&quot;&gt;&lt;a href=&quot;#3-1-定义：&quot; class=&quot;headerlink&quot; title=&quot;3.1 定义：&quot;&gt;&lt;/a&gt;3.1 定义：&lt;/h4&gt;&lt;p&gt;深度学习是机器学习中一种基于对数据进行表征学习的方法，起源于人工神经网络，在前期机器学习并没有深度学习这样的学习模型。所以我们现在也认为它是属于深度学习属于机器学习范畴内。它试图使用包含复杂结构或由多重非线性变换构成的多个处理层对数据进行高层抽象的算法。&lt;/p&gt;
&lt;h4 id=&quot;3-2-关系图：&quot;&gt;&lt;a href=&quot;#3-2-关系图：&quot; class=&quot;headerlink&quot; title=&quot;3.2 关系图：&quot;&gt;&lt;/a&gt;3.2 关系图：&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/assets/images/AIMLDL.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;二、机器学习的应用发展：&quot;&gt;&lt;a href=&quot;#二、机器学习的应用发展：&quot; class=&quot;headerlink&quot; title=&quot;二、机器学习的应用发展：&quot;&gt;&lt;/a&gt;二、机器学习的应用发展：&lt;/h2&gt;&lt;h3 id=&quot;2-1-发展：&quot;&gt;&lt;a href=&quot;#2-1-发展：&quot; class=&quot;headerlink&quot; title=&quot;2.1 发展：&quot;&gt;&lt;/a&gt;2.1 发展：&lt;/h3&gt;&lt;p&gt;1956年，达特茅斯会议提出了“人工智能”的概念。其后，人工智能就一直萦绕于人们的脑海之中，并在科研实验室中慢慢孵化。之后的几十年，人工智能一直在两极反转，或被称作人类文明耀眼未来的预言；或者被当成技术疯子的狂想扔到垃圾堆里，直到2012年之前，这两种声音还在同时存在。主要问题来自于运算需求难以得到满足，即使是最基本的神经网络，也需要大量的运算。过去几年，尤其是2015年以来，人工智能开始大爆发，很大一部分是由于GPU的广泛应用，使得并行计算变得更快、更便宜、更有效。当然，无限拓展的存储能力和骤然爆发的数据洪流（大数据）的组合拳，也使得图像数据、文本数据、交易数据、映射数据全面海量爆发。&lt;/p&gt;
&lt;h3 id=&quot;2-2-应用：&quot;&gt;&lt;a href=&quot;#2-2-应用：&quot; class=&quot;headerlink&quot; title=&quot;2.2 应用：&quot;&gt;&lt;/a&gt;2.2 应用：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;领域列举&lt;br&gt;机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人等等&lt;/li&gt;
&lt;li&gt;场景举例&lt;br&gt;句子翻译、动态手势识别、个人化推荐、美化的图像处理、云歌曲推荐、无人机航拍的视频实时分类路况信息等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-3-大公司&quot;&gt;&lt;a href=&quot;#2-3-大公司&quot; class=&quot;headerlink&quot; title=&quot;2.3 大公司&quot;&gt;&lt;/a&gt;2.3 大公司&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;FaceBook&lt;br&gt;Facebook AI研究项目（FAIR）专注于基础科学以及长期研究,另外一个叫应用机器学习部门（AML）,将技术用于现有Facebook产品。&lt;/li&gt;
&lt;li&gt;Microsoft&lt;br&gt;微软1991年就已经开始涉足机器学习，有数百名科学家和工程师。&lt;/li&gt;
&lt;li&gt;Google&lt;br&gt;Google Assistant是谷歌深度学习研究的集大成者。&lt;/li&gt;
&lt;li&gt;Amazon&lt;br&gt;其CEO贝索斯称，已经悄悄研究了AI四年，目前在其语音识别生态系统上投入的人力有1000人。&lt;/li&gt;
&lt;li&gt;Baidu&lt;br&gt;2014年，百度重金挖来谷歌深度学习项目负责人Andrew Ng，发力AI研究。&lt;/li&gt;
&lt;li&gt;Apple&lt;br&gt;WWDC2017，苹果宣布面向开发者的机器学习框架Core ML ，加速在 iPhone、iPad、Apple Watch 上的人工智能任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;三、在IOS中使用机器学习&quot;&gt;&lt;a href=&quot;#三、在IOS中使用机器学习&quot; class=&quot;headerlink&quot; title=&quot;三、在IOS中使用机器学习&quot;&gt;&lt;/a&gt;三、在IOS中使用机器学习&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用Core ML，你可以将训练好的机器学习模型整合到你的应用中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-1-Core-ML简介&quot;&gt;&lt;a href=&quot;#3-1-Core-ML简介&quot; class=&quot;headerlink&quot; title=&quot;3.1 Core ML简介&quot;&gt;&lt;/a&gt;3.1 Core ML简介&lt;/h3&gt;&lt;p&gt;Core ML是一个训练好的模型Model，一个机器学习算法应用到一个训练数据集之后所得到的结果。利用该模型可以基于新的输入数据而进行预测，也就是利用了机器学习的结果。比如，如果一个模型在一个地区的历史房价数据上进行了训练，那么它就可能能够根据房子的卧室和浴室数量来预测房价。&lt;br&gt;Core ML 为设备性能进行了优化，从而减少了内存占用和功耗。严格在设备上运行能够确保用户数据的隐私，并且能保证你的应用在没有网络连接时也能够工作和响应。&lt;br&gt;Core ML 框架本身构建于低层面的原语（primitives）之上，比如 Accelerate、BNNS 和 Metal Performance Shaders；&lt;br&gt;构建完成的Core Ml又作为其他更高级框架的基础，比如支持用于图像分析的 Vision 框架，用于自然语言处理的 Foundation类，以及用于评估已经学习到的决策树的 GameplayKit。结构图如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/CoreMl.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-2-支持的系统&quot;&gt;&lt;a href=&quot;#3-2-支持的系统&quot; class=&quot;headerlink&quot; title=&quot;3.2 支持的系统&quot;&gt;&lt;/a&gt;3.2 支持的系统&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;iOS 11.0+Beta&lt;/li&gt;
&lt;li&gt;macOS 10.13+Beta&lt;/li&gt;
&lt;li&gt;tvOS 11.0+Beta&lt;/li&gt;
&lt;li&gt;watchOS 4.0+Beta&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-3-如何获得CoreMl-Model&quot;&gt;&lt;a href=&quot;#3-3-如何获得CoreMl-Model&quot; class=&quot;headerlink&quot; title=&quot;3.3 如何获得CoreMl Model&quot;&gt;&lt;/a&gt;3.3 如何获得CoreMl Model&lt;/h3&gt;&lt;p&gt;从如上定义看出，CoreMl框架只是将机器学习后的成果拿来应用，本身并不涉及机器学习的运行环境和过程。获得这些结果的方式有两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;苹果爸爸为你提供的现在model&lt;br&gt;根据自己的需要下载：&lt;a href=&quot;https://developer.apple.com/machine-learning&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/machine-learning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自己创建model&lt;br&gt;苹果爸爸为开发者提供了生成方法，不满意官方或者使用不足的时候，可以自己去机器学习完成，在创建应用，即第四节的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-4-将CoreML模型用在你的应用中&quot;&gt;&lt;a href=&quot;#3-4-将CoreML模型用在你的应用中&quot; class=&quot;headerlink&quot; title=&quot;3.4 将CoreML模型用在你的应用中&quot;&gt;&lt;/a&gt;3.4 将CoreML模型用在你的应用中&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;新建demo工程，在工程target中在Build Phase的Link Binary With Libraries里，加上CoreML.framework系统框架。&lt;/li&gt;
&lt;li&gt;将获得的 CoreMl Model 添加至工程中，我们以GoogLeNetPlaces.mlmodel为例:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/CoreMLXcode.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意中间有个Model Class ，点击查看api调用，有两点注意，输入参数为 CVPixelBufferRef 格式,图片需要是224X224像素的大小，所以需要自己写方法去转化为合适的参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/GoogleAPI.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;调用示例&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GoogLeNetPlaces *model = [[GoogLeNetPlaces alloc] init]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIImage *&lt;span class=&quot;keyword&quot;&gt;scaledImage &lt;/span&gt;= [self imageScaleToSize224:CGSizeMake(&lt;span class=&quot;number&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;224&lt;/span&gt;)]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CVPixelBufferRef &lt;span class=&quot;keyword&quot;&gt;buffer &lt;/span&gt;= [self pixelBufferFromImage:&lt;span class=&quot;keyword&quot;&gt;scaledImage];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;GoogLeNetPlacesInput *input = [[GoogLeNetPlacesInput alloc] initWithSceneImage:&lt;span class=&quot;keyword&quot;&gt;buffer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;GoogLeNetPlacesOutput *output = [model predictionFromFeatures:input error:nil]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;Scene label is: %@&quot;&lt;/span&gt;, output.&lt;span class=&quot;keyword&quot;&gt;sceneLabel);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;结论&lt;br&gt;百度搜索图片，下载常规的桌子、卧室图片，利用google此个model进行判断输出，正确。输入健身房的图片，判断输出为博物馆。由此可以看出，训练样本过少，当输入数据变复杂的时候就不能判断正确，侧面激励开发者们自己开展训练模型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;四、创建自己的Core-Ml-Model&quot;&gt;&lt;a href=&quot;#四、创建自己的Core-Ml-Model&quot; class=&quot;headerlink&quot; title=&quot;四、创建自己的Core Ml Model&quot;&gt;&lt;/a&gt;四、创建自己的Core Ml Model&lt;/h2&gt;&lt;h3 id=&quot;4-1-Apple支持的模型&quot;&gt;&lt;a href=&quot;#4-1-Apple支持的模型&quot; class=&quot;headerlink&quot; title=&quot;4.1 Apple支持的模型&quot;&gt;&lt;/a&gt;4.1 Apple支持的模型&lt;/h3&gt;&lt;p&gt;苹果支持由第三方工具和框架训练出来的机器学习模型转化，我们可以只用苹果提供的转化工具,将个人已经训练好的数据模型转化为CoreML进行支持。工具为 Core ML Tools ，是基于Python开发的工具，需要自己安装配置，到这里，上面一二节的概念理解就有作用了，前面提到了机器学习所使用到的思想算法，这里工具有对应的类型支持转化。我从官网对照理解过来如下图：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;学习模型&lt;/th&gt;
&lt;th&gt;子算法类型&lt;/th&gt;
&lt;th&gt;工具框架&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;人工神经网络&lt;/td&gt;
&lt;td&gt;多层向前反馈网络（Multilayer Feedforward Network）、CNN卷积神经网络（Convolution Neural Network、RNN递归神经网络（Recurrent Neural Networks）&lt;/td&gt;
&lt;td&gt;Caffe、Keras 1.2.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;集成算法&lt;/td&gt;
&lt;td&gt;随机森林（Random forests）、迭代树（boosted trees）、决策树（decision trees）&lt;/td&gt;
&lt;td&gt;scikit-learn 0.18、XGBoost 0.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;支持向量机&lt;/td&gt;
&lt;td&gt;线性回归（Scalar regression）、多分类器（multiclass classification）&lt;/td&gt;
&lt;td&gt;scikit-learn 0.18、LIBSVM 3.22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;广义线性模型&lt;/td&gt;
&lt;td&gt;线性回归（Linear regression）、多分类器（multiclass classification）、标量回归（Scalar regression）&lt;/td&gt;
&lt;td&gt;scikit-learn 0.18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;特征工程&lt;/td&gt;
&lt;td&gt;稀疏向量化（Sparse vectorization）、密集向量化（ dense vectorization）、分类处理（categorical processing）&lt;/td&gt;
&lt;td&gt;scikit-learn 0.18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机器学习流&lt;/td&gt;
&lt;td&gt;马尔可夫链（Sequentially chained models）&lt;/td&gt;
&lt;td&gt;scikit-learn 0.18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;4-2-转换你的学习模型&quot;&gt;&lt;a href=&quot;#4-2-转换你的学习模型&quot; class=&quot;headerlink&quot; title=&quot;4.2 转换你的学习模型&quot;&gt;&lt;/a&gt;4.2 转换你的学习模型&lt;/h3&gt;&lt;p&gt;微信朋友圈常常被一些风格奇异的图片刷屏，app里上传自己的照片就能变成特定风格的画像，有油画、漫画等等，这些都是机器学习的结果，Neural Transfer Style。一般有两种实现：第一种是快速渲染，输入一张原图+一个某种固定画风的模型 = 输出结果，这个你只需要模型就OK；第二种方法是，输入一张原图+一张风格图 + 在线渲染 = 输出结果，需要一个原始模型就行。搜索查询都是基于python的训练实现，有基于tensorflow,也有基于torch的，没到已生成的model，因而这里还是拿一个已有的图像识别的例子来讲。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;已下载材料&lt;br&gt;   &lt;a href=&quot;http://dl.caffe.berkeleyvision.org/bvlc_alexnet.caffemodel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bvlc_alexnet.caffemodel&lt;/a&gt;、&lt;br&gt;   &lt;a href=&quot;https://raw.githubusercontent.com/BVLC/caffe/master/models/bvlc_alexnet/deploy.prototxt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;deploy.prototxt&lt;/a&gt;、&lt;br&gt;   &lt;a href=&quot;https://raw.githubusercontent.com/torch/tutorials/master/7_imagenet_classification/synset_words.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;class_labels.txt&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他参考Caffe Model：&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;https://github.com/BVLC/caffe/wiki/Model-Zoo#models-for-age-and-gender-classification&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Caffe model&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;4-2-1-pip安装Coremltools&quot;&gt;&lt;a href=&quot;#4-2-1-pip安装Coremltools&quot; class=&quot;headerlink&quot; title=&quot;4.2.1 pip安装Coremltools&quot;&gt;&lt;/a&gt;4.2.1 pip安装Coremltools&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; sudo easy_install pip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; pip install -U coremltools&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4-2-2-打开mac终端&quot;&gt;&lt;a href=&quot;#4-2-2-打开mac终端&quot; class=&quot;headerlink&quot; title=&quot;4.2.2 打开mac终端&quot;&gt;&lt;/a&gt;4.2.2 打开mac终端&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; import coremltools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; coreml_model = coremltools.converters.caffe.convert((&lt;span class=&quot;string&quot;&gt;&#39;bvlc_alexnet.caffemodel&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;deploy.prototxt&#39;&lt;/span&gt;),predicted_feature_name=&lt;span class=&quot;string&quot;&gt;&#39;class_labels.txt&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; coreml_model.author = &lt;span class=&quot;string&quot;&gt;&#39;徐子超&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; coreml_model.license = &lt;span class=&quot;string&quot;&gt;&#39;字节跳动&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; coreml_model.short_description = &lt;span class=&quot;string&quot;&gt;&#39;Predicts the price of a house in the Seattle area.&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; coreml_model.save(&lt;span class=&quot;string&quot;&gt;&#39;BVLCObjectClassifier.mlmodel&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4-2-3-得到model结果&quot;&gt;&lt;a href=&quot;#4-2-3-得到model结果&quot; class=&quot;headerlink&quot; title=&quot;4.2.3 得到model结果&quot;&gt;&lt;/a&gt;4.2.3 得到model结果&lt;/h4&gt;&lt;p&gt;我下载的bvlc_alexnet.caffemodel大小有244M左右，在终端中转化为CoreMl却基本没有转化耗时，可见苹果在开发工具的创造上下了功夫。我们得到了CoreML的模型如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/CoreMLFile.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;直接在工程文件中，加入model,添加到对应的target&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/CoreMLXcode.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击中间Model Class即可查看对应的定义，Model依旧244M大小，我在打开定义的过程中感受到了Xcode的明显延迟卡顿。&lt;/p&gt;
&lt;p&gt;到这里，我们的model转化就完成了，在WWDC上也介绍了别的python工具，我这里没有使用，直接在终端里面完成即可。接下来，做个实测demo跑一下效果，本次转化的model过大，此处我们还是继续拿第三节的model来做。&lt;/p&gt;
&lt;h2 id=&quot;五、相机即时画面的图像解析Demo&quot;&gt;&lt;a href=&quot;#五、相机即时画面的图像解析Demo&quot; class=&quot;headerlink&quot; title=&quot;五、相机即时画面的图像解析Demo&quot;&gt;&lt;/a&gt;五、相机即时画面的图像解析Demo&lt;/h2&gt;&lt;h4 id=&quot;4-1-新建一个相机demo&quot;&gt;&lt;a href=&quot;#4-1-新建一个相机demo&quot; class=&quot;headerlink&quot; title=&quot;4.1 新建一个相机demo&quot;&gt;&lt;/a&gt;4.1 新建一个相机demo&lt;/h4&gt;&lt;p&gt;即时的图像识别，需要在摄像头打开后，实时的获取手机屏幕上展示的每一帧图像，所以通常的UIimageViewPicker是无法做到的，我们需要自己搭建UI并手写捕捉相机视图的代码来构建一个自己的相机，通过AVFoundationKit,我们可以拿到相机里面图像流动的每一帧，从而可以将图像传递给GoogleNet进行识别。来，继续改造第三节的demo工程，将viewController变成一个简化版本的相机。&lt;/p&gt;
&lt;p&gt;相机启动在三个时机，viewDidLoad的时候直接建立好组件，主要涉及AVFoundationKit的类有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AVCaptureDevice：获取手机功能里的相机设备&lt;/li&gt;
&lt;li&gt;AVCaptureSession：连接相机device到输出数据流的会话层&lt;/li&gt;
&lt;li&gt;AVCaptureVideoPreviewLayer：用于展示图片的画布，也是我们常见的相机窗口&lt;/li&gt;
&lt;li&gt;AVCaptureVideoDataOutput：数据流&lt;/li&gt;
&lt;li&gt;AVCaptureConnection ：数据连接&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)initAVCapturWritterConfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.session = [[&lt;span class=&quot;built_in&quot;&gt;AVCaptureSession&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//视频&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;AVCaptureDevice&lt;/span&gt; *videoDevice = [&lt;span class=&quot;built_in&quot;&gt;AVCaptureDevice&lt;/span&gt; defaultDeviceWithMediaType:&lt;span class=&quot;built_in&quot;&gt;AVMediaTypeVideo&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (videoDevice.isFocusPointOfInterestSupported &amp;amp;&amp;amp; [videoDevice isFocusModeSupported:&lt;span class=&quot;built_in&quot;&gt;AVCaptureFocusModeContinuousAutoFocus&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [videoDevice lockForConfiguration:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [videoDevice setFocusMode:&lt;span class=&quot;built_in&quot;&gt;AVCaptureFocusModeContinuousAutoFocus&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [videoDevice unlockForConfiguration];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;AVCaptureDeviceInput&lt;/span&gt; *cameraDeviceInput = [[&lt;span class=&quot;built_in&quot;&gt;AVCaptureDeviceInput&lt;/span&gt; alloc] initWithDevice:videoDevice error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.session canAddInput:cameraDeviceInput]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.session addInput:cameraDeviceInput];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//视频&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.videoOutPut = [[&lt;span class=&quot;built_in&quot;&gt;AVCaptureVideoDataOutput&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; * outputSettings = [[&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; alloc] initWithObjectsAndKeys:[&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; numberWithInt:kCVPixelFormatType_32BGRA],(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)kCVPixelBufferPixelFormatTypeKey, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.videoOutPut setVideoSettings:outputSettings];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.session canAddOutput:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.videoOutPut]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.session addOutput:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.videoOutPut];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.videoConnection = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.videoOutPut connectionWithMediaType:&lt;span class=&quot;built_in&quot;&gt;AVMediaTypeVideo&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.videoConnection.enabled = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.videoConnection setVideoOrientation:&lt;span class=&quot;built_in&quot;&gt;AVCaptureVideoOrientationPortrait&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//初始化预览图层&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.previewLayer = [[&lt;span class=&quot;built_in&quot;&gt;AVCaptureVideoPreviewLayer&lt;/span&gt; alloc] initWithSession:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.session];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.previewLayer setVideoGravity:&lt;span class=&quot;built_in&quot;&gt;AVLayerVideoGravityResizeAspectFill&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，在viewDidAppear的开始捕捉画面，viewWillDisappear停止相机捕捉。在viewDidAppear的时候我们开始相机的录制，代码会在videooutput的协议里回调给我们相机设备录制到的每一帧图像，这个时候我们就可以开始处理了。关键代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)startVideoCapture&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.session startRunning];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.videoConnection.enabled = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.videoQueue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;videoQueue&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.videoOutPut setSampleBufferDelegate:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; queue:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.videoQueue];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark --AVCaptureVideoDataOutputSampleBufferDelegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)captureOutput:(&lt;span class=&quot;built_in&quot;&gt;AVCaptureOutput&lt;/span&gt; *)captureOutput didOutputSampleBuffer:(CMSampleBufferRef)sampleBuffer fromConnection:(&lt;span class=&quot;built_in&quot;&gt;AVCaptureConnection&lt;/span&gt; *)connection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;CMSampleBufferRef&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_sync&lt;/span&gt;(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CGImageRef&lt;/span&gt; cgImage = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageFromSampleBuffer:sampleBuffer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *text = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; predictImageScene:[&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageWithCGImage:cgImage]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.googleLabel.text = text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意此处，相机给我们回传的是CMSampleBufferRef格式的数据，而我们在第三节需要传入的是CVPixelBufferRef，所以会有一步在UIImage+Utils里的转化,最后附上代码地址。&lt;/p&gt;
&lt;h4 id=&quot;4-2-实时显示效果&quot;&gt;&lt;a href=&quot;#4-2-实时显示效果&quot; class=&quot;headerlink&quot; title=&quot;4.2 实时显示效果&quot;&gt;&lt;/a&gt;4.2 实时显示效果&lt;/h4&gt;&lt;p&gt;到官网下载安装配置，把手机升级到IOS11的beta版本后，将相机demo连上手机真机调试得到实时显示,当我移动手机对准不同画面时，相机底部会对应解析出识别结果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/coremlgif.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;六、小结&quot;&gt;&lt;a href=&quot;#六、小结&quot; class=&quot;headerlink&quot; title=&quot;六、小结&quot;&gt;&lt;/a&gt;六、小结&lt;/h2&gt;&lt;p&gt;从本次实践上，还是可以看出一些问题：&lt;/p&gt;
&lt;p&gt;1、Core ML 框架只在IOS11以上才开始支持，现状是很多APP还在支持低版本。比如目前微信支持IOS8以上。&lt;/p&gt;
&lt;p&gt;2、每一个机器学习模型引入的model都是很大，我们的demo使用偏小的model，但是数据却又不准确，model的引入会给IOS安装包带来包体积很大的增加。&lt;/p&gt;
&lt;p&gt;3、机器学习的结果分析大量的运算，虽然目前iphone在不断的升级硬件GPUCPU，但是我测试过程中还是发现计算的延迟，就异步计算返回的。&lt;/p&gt;
&lt;p&gt;4、对于非专业的机器学习人士来讲，IOS开发能拿到现在的model来使用，很多酷炫的效果都没有现成的model,这里也是一个门槛。&lt;/p&gt;
&lt;p&gt;随着Core ML技术的引入，移动端上实现机器学习开始变得可能，这也让IOS开发者为之兴奋，然而在IOS上实践机器学习还是有较长的路要走，当然apple本身的布局正在推动这一发展，保持期待。本文不仅仅是对WWDC新技术的探索和分享，也是对机器学习的兴趣认识。&lt;/p&gt;
&lt;h4 id=&quot;github代码-IOS-Core-ML，有兴趣的同学可以下载在IOS11的设备上跑起来。&quot;&gt;&lt;a href=&quot;#github代码-IOS-Core-ML，有兴趣的同学可以下载在IOS11的设备上跑起来。&quot; class=&quot;headerlink&quot; title=&quot;github代码:IOS-Core ML，有兴趣的同学可以下载在IOS11的设备上跑起来。&quot;&gt;&lt;/a&gt;github代码:&lt;a href=&quot;https://github.com/xuzichao/IOS-Core-ML&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IOS-Core ML&lt;/a&gt;，有兴趣的同学可以下载在IOS11的设备上跑起来。&lt;/h4&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;机器学习在IOS中的应用-Core-ML&quot;&gt;&lt;a href=&quot;#机器学习在IOS中的应用-Core-ML&quot; class=&quot;headerlink&quot; title=&quot;机器学习在IOS中的应用 Core ML&quot;&gt;&lt;/a&gt;机器学习在IOS中的应用 Core ML&lt;/h3&gt;&lt;
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用CocoaPods创建私有仓库</title>
    <link href="http://xuzichao.com/2016/11/22/%E4%BD%BF%E7%94%A8CocoaPods%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <id>http://xuzichao.com/2016/11/22/使用CocoaPods创建私有仓库/</id>
    <published>2016-11-22T11:09:59.000Z</published>
    <updated>2017-06-04T07:12:13.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;CocoaPods创建私有仓库&quot;&gt;&lt;a href=&quot;#CocoaPods创建私有仓库&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods创建私有仓库&quot;&gt;&lt;/a&gt;CocoaPods创建私有仓库&lt;/h1&gt;&lt;h2 id=&quot;一、两个概念：&quot;&gt;&lt;a href=&quot;#一、两个概念：&quot; class=&quot;headerlink&quot; title=&quot;一、两个概念：&quot;&gt;&lt;/a&gt;一、两个概念：&lt;/h2&gt;&lt;h3 id=&quot;1、XXX-podspec-配置文件&quot;&gt;&lt;a href=&quot;#1、XXX-podspec-配置文件&quot; class=&quot;headerlink&quot; title=&quot;1、XXX.podspec   配置文件&quot;&gt;&lt;/a&gt;1、XXX.podspec   配置文件&lt;/h3&gt;&lt;p&gt;spec 配置文件是cocoapods的每一个代码仓库所对应的信息管理文件，主要是对仓库的行为进行配置，每一个版本的代码仓库都对应有一个配置文件。&lt;/p&gt;
&lt;p&gt;包括仓库的名称、版本号、描述、主页地址、证书说明、作者、版本指定方式、工程的目标版本号、文件和资源的路径、依赖的库关系等。举例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Be sure to run `pod lib lint ios-category.podspec&#39; to ensure this is a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# valid spec before submitting.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Any lines starting with a # are optional, but their use is encouraged&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pod::Spec.&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |s|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.name             = &lt;span class=&quot;string&quot;&gt;&#39;ios-category&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.version          = &lt;span class=&quot;string&quot;&gt;&#39;0.0.2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.summary          = &lt;span class=&quot;string&quot;&gt;&#39;ios-category is used for ios-network&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# This description is used to generate tags and improve search results.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   * Think: What does it do? Why did you write it? What is the focus?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   * Try to keep it short, snappy and to the point.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   * Write the description between the DESC delimiters below.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   * Finally, don&#39;t worry about the indent, CocoaPods strips it!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.description      = &amp;lt;&amp;lt;-DESC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.homepage         = &lt;span class=&quot;string&quot;&gt;&#39;http://www.example.com&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.screenshots     = &#39;www.example.com/screenshots_1&#39;, &#39;www.example.com/screenshots_2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.license          = &amp;#123; :type =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;MIT&#39;&lt;/span&gt;, :file =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;LICENSE&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.author           = &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;xuzichao&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;xuzichao03@gmail.com&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.source           = &amp;#123; :git =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;git@code.xuzichao.org:tt_pods_ios-category.git&#39;&lt;/span&gt;, :tag =&amp;gt; s.version.to_s  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.social_media_url = &#39;https://twitter.com/&amp;lt;TWITTER_USERNAME&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.ios.deployment_target = &lt;span class=&quot;string&quot;&gt;&#39;6.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.source_files = &lt;span class=&quot;string&quot;&gt;&#39;ios-category/Classes/**/*&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.resource_bundles = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;ios-category&#39;&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;string&quot;&gt;&#39;ios-category/Resources/*&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.public_header_files = &#39;Pod/Classes/**/*.h&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.frameworks = &#39;UIKit&#39;, &#39;MapKit&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.dependency &#39;ios-categorying&#39;, &#39;~&amp;gt; 2.3&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、Spec-repo&quot;&gt;&lt;a href=&quot;#2、Spec-repo&quot; class=&quot;headerlink&quot; title=&quot;2、Spec repo&quot;&gt;&lt;/a&gt;2、Spec repo&lt;/h3&gt;&lt;p&gt;组合词，表示仓库的概念，主要是用于存储pod代码库对应的podspec文件，管理各个仓库的各个版本的代码，它其实就是一个容器。Cocoapods会默认在本地建立一个容器，包含了你各个工程对应的代码仓库，当你使用了Cocoapods后，它们就会被clone到本地的~/.cocoapods/repos目录下。这里指代的是Cocoapods默认创建的仓库，其实我们不需要关心。&lt;/p&gt;
&lt;p&gt;当我们创建私有库的时候，我们需要有自己的容器，用于存放自己的各个代码库，和上面的Cocoapods创建的是区别开的。我们自己创建的容器，其实就是一个远端的git仓库，我们把代码库对应的各个版本配置文件提交上去。&lt;/p&gt;
&lt;h2 id=&quot;二、创建的操作：&quot;&gt;&lt;a href=&quot;#二、创建的操作：&quot; class=&quot;headerlink&quot; title=&quot;二、创建的操作：&quot;&gt;&lt;/a&gt;二、创建的操作：&lt;/h2&gt;&lt;h3 id=&quot;1、使用cocoapods：&quot;&gt;&lt;a href=&quot;#1、使用cocoapods：&quot; class=&quot;headerlink&quot; title=&quot;1、使用cocoapods：&quot;&gt;&lt;/a&gt;1、使用cocoapods：&lt;/h3&gt;&lt;p&gt;1.1 命令&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo gem &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; cocoapods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch podfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;1.2 pod install 、 pod update&lt;/p&gt;
&lt;p&gt;pod install 将pod的版本写入Podfile.lock文件中.对于已经在Podfile.lock中有记录的Pod下载对应的版本，即便有新的版本，也不会去更新.对于没有记录的，根据Podfile中的约定，下载版本，并把版本信息写入Podfile.lock中.&lt;/p&gt;
&lt;p&gt;只有当需要更新pod版本时，才用pod update,其余时间都用pod install&lt;/p&gt;
&lt;h3 id=&quot;2、私有库&quot;&gt;&lt;a href=&quot;#2、私有库&quot; class=&quot;headerlink&quot; title=&quot;2、私有库&quot;&gt;&lt;/a&gt;2、私有库&lt;/h3&gt;&lt;p&gt;2.1 创建并设置一个私有的Spec Repo。&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;pod repo add TestSpecs &lt;span class=&quot;symbol&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;regexp&quot;&gt;/coding.net/test&lt;/span&gt;.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.2 创建Pod的所需要的项目工程文件，并且有可访问的项目版本控制地址。&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;git commit -s -m &lt;span class=&quot;string&quot;&gt;&quot;我的工程代码文件&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;git remote add origin git&lt;span class=&quot;variable&quot;&gt;@coding&lt;/span&gt;.&lt;span class=&quot;symbol&quot;&gt;net:&lt;/span&gt;ios-category.git     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;git push origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.3 创建Pod所对应的podspec文件。&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pod &lt;span class=&quot;keyword&quot;&gt;spec&lt;/span&gt; create ios-category.podspec&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.4 本地测试配置好的podspec文件是否可用。&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pod &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lint&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pod &lt;span class=&quot;string&quot;&gt;&#39;ios-category&#39;&lt;/span&gt;, :podspec =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;~/Users/ios-category.podspec&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#指定podspec文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.5 向私有的Spec Repo中提交podspec。&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;pod&lt;/span&gt; repo &lt;span class=&quot;keyword&quot;&gt;push &lt;/span&gt;TestSpecs ios-category.podspec&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.6 在个人项目中的Podfile中增加刚刚制作的好的Pod并使用。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# private&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;https://coding.net/test.git&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# public&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;https://github.com/CocoaPods/Specs.git&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target &lt;span class=&quot;string&quot;&gt;&#39;ReactiveCocoaDemo&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&quot;ios-category&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;三、其他说明&quot;&gt;&lt;a href=&quot;#三、其他说明&quot; class=&quot;headerlink&quot; title=&quot;三、其他说明&quot;&gt;&lt;/a&gt;三、其他说明&lt;/h2&gt;&lt;p&gt;按照阶段二进行操作，即可顺利完成pod工程的引用，其他介绍说明文档中可能出现的，testpod 工程，其实可以不用管。比如：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod spec create PodTestLibrary git&lt;span class=&quot;meta&quot;&gt;@coding&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;net:&lt;/span&gt;test.gitt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以及由于pod的各个版本变化，spec文件有可能本来是正确的，但是pod lib lint这一步始终不能通过，这样pod repo push这一步就无法完成。可以直接将spec文件通过git 提交的方式放进远端的Spec Repo中，依然可以正常运行。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CocoaPods创建私有仓库&quot;&gt;&lt;a href=&quot;#CocoaPods创建私有仓库&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods创建私有仓库&quot;&gt;&lt;/a&gt;CocoaPods创建私有仓库&lt;/h1&gt;&lt;h2 id=&quot;一、两个概念：&quot;&gt;&lt;a h
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>头条热补丁方案</title>
    <link href="http://xuzichao.com/2016/09/11/%E5%A4%B4%E6%9D%A1%E7%83%AD%E8%A1%A5%E4%B8%81%E6%96%B9%E6%A1%88/"/>
    <id>http://xuzichao.com/2016/09/11/头条热补丁方案/</id>
    <published>2016-09-11T14:59:12.000Z</published>
    <updated>2017-09-05T07:09:51.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;TTSparkRescue&quot;&gt;&lt;a href=&quot;#TTSparkRescue&quot; class=&quot;headerlink&quot; title=&quot;TTSparkRescue&quot;&gt;&lt;/a&gt;TTSparkRescue&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;备注：2017年4月开始出现使用热修复审核不通过的情况，经过混淆的方式后，绕过了苹果的检测，但是到5月初的时候，苹果全方面严打IOS热修复策略，各方APP包括头条在内的方案被迫下架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;p&gt;TTSparkRescue是头条公司层面的通用的热修复库，同时提供给其他产品线使用。设计包括如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动崩溃计数修改为3秒后清除&lt;/li&gt;
&lt;li&gt;启动初始化的预清理&lt;/li&gt;
&lt;li&gt;启动崩溃本地有缓存预先执行&lt;/li&gt;
&lt;li&gt;启动崩溃第二次，启动上报逻辑和预处理&lt;/li&gt;
&lt;li&gt;启动崩溃第三次，开始启动修复逻辑&lt;/li&gt;
&lt;li&gt;启动后修复&lt;/li&gt;
&lt;li&gt;补丁下发更新机制&lt;/li&gt;
&lt;li&gt;客户端本地处理下发的patch错误&lt;/li&gt;
&lt;li&gt;下发JS空白&lt;/li&gt;
&lt;li&gt;下发前，本地预先运行，验证JS脚本&lt;/li&gt;
&lt;li&gt;本地模拟crash&lt;/li&gt;
&lt;li&gt;管理的系统版本号粒度更精细&lt;/li&gt;
&lt;li&gt;增加端监控，传出参数，由TTMonitor在外部配合调到 &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-快速集成&quot;&gt;&lt;a href=&quot;#2-快速集成&quot; class=&quot;headerlink&quot; title=&quot;2. 快速集成&quot;&gt;&lt;/a&gt;2. 快速集成&lt;/h1&gt;&lt;h2 id=&quot;2-1-Podfile引用&quot;&gt;&lt;a href=&quot;#2-1-Podfile引用&quot; class=&quot;headerlink&quot; title=&quot;2.1 Podfile引用&quot;&gt;&lt;/a&gt;2.1 Podfile引用&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;头条内部的git地址&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;TTSparkRescue&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2.3&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-2-代码块替换&quot;&gt;&lt;a href=&quot;#2-2-代码块替换&quot; class=&quot;headerlink&quot; title=&quot;2.2 代码块替换&quot;&gt;&lt;/a&gt;2.2 代码块替换&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;方法A: &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;APP原本的didFinishLaunchingWithOptions的全部逻辑didFinishLaunchingWithOptions&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;方法B :&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;新建并复制，参数和函数体与方法A保持一致&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(BOOL)&lt;/span&gt;application:&lt;span class=&quot;params&quot;&gt;(UIApplication *)&lt;/span&gt;application&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; normalLaunchProcessWithOptions:&lt;span class=&quot;params&quot;&gt;(NSDictionary *)&lt;/span&gt;launchOptions&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用TTJSPatch结构替换方法A，下面部分可以直接复制即可用：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)application:(&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; *)application didFinishLaunchingWithOptions:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)launchOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) wself = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#if DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//默认注释关闭&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//    [[TTSparkRescue shareInstance] setTestPatch:YES simulationCrash:YES];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//内部监控上报&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[TTSparkRescue shareInstance] setReportBlock:^(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *key, &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *info) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//crash的预处理逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([key isEqualToString:TTJSPatchLaunchCrash]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//优先清理coredata缓存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//解决可能造成的crash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//连续崩溃第四次才启用安全模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[TTMonitor shareManager] trackService:key status:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; extra:info];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//运行错误处理，内部已加监控, type == 1 for JS, type == 2 for OC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[TTSparkRescue shareInstance] setJSCrashHanlder:^(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; type, &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//CompletionBlock:头条正常启动逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[TTSparkRescue shareInstance] setBoolCompletionBlock:^&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#if DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//本地测试的时候模拟crash，不必注释，由前面的开关控制即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[TTSparkRescue shareInstance] simulationLauchCrash];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[TTSparkRescue shareInstance] simulationLauchDelayCrash];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[TTSparkRescue shareInstance] simulationActiveCrash];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [wself application:application normalLaunchProcessWithOptions:launchOptions];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//启动执行逻辑，完成后调用CompletionBlock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [[TTSparkRescue shareInstance] launchContinuousCrashProcess];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;3-功能设计&quot;&gt;&lt;a href=&quot;#3-功能设计&quot; class=&quot;headerlink&quot; title=&quot;3. 功能设计&quot;&gt;&lt;/a&gt;3. 功能设计&lt;/h1&gt;&lt;h2 id=&quot;3-1、说明：&quot;&gt;&lt;a href=&quot;#3-1、说明：&quot; class=&quot;headerlink&quot; title=&quot;3.1、说明：&quot;&gt;&lt;/a&gt;3.1、说明：&lt;/h2&gt;&lt;h4 id=&quot;1、启动崩溃计数修改为12秒后清除&quot;&gt;&lt;a href=&quot;#1、启动崩溃计数修改为12秒后清除&quot; class=&quot;headerlink&quot; title=&quot;1、启动崩溃计数修改为12秒后清除&quot;&gt;&lt;/a&gt;1、启动崩溃计数修改为12秒后清除&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;如果启动过程中，出现延迟操作，操作时间在原先的5秒之外，那么这次操作如果出现崩溃将无法被记录下。也就无法再启动中修复。&lt;br&gt;     将清除时间调大，设置为一个网络请求的返回时间，覆盖了延迟造作造成的crash。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;2、启动初始化的预清理&quot;&gt;&lt;a href=&quot;#2、启动初始化的预清理&quot; class=&quot;headerlink&quot; title=&quot;2、启动初始化的预清理&quot;&gt;&lt;/a&gt;2、启动初始化的预清理&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;当我们判断当前版本号发生变化时，直接清除本地的patch文件，避免升级覆盖安装后，还持有原先逻辑或者错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;3、启动崩溃本地有缓存预先执行&quot;&gt;&lt;a href=&quot;#3、启动崩溃本地有缓存预先执行&quot; class=&quot;headerlink&quot; title=&quot;3、启动崩溃本地有缓存预先执行&quot;&gt;&lt;/a&gt;3、启动崩溃本地有缓存预先执行&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;因为是修复崩溃的逻辑，之前需要达到崩溃条件后才开始请求下发，原本就体验差了，如果再遇上网络缓慢的时候，启动会很慢，&lt;br&gt;  体验更差。并且每次都会崩溃后重新启动。此次修改后，出现一次之后同步请求返回patch,正常启动，下次进入，判断有缓存就直接执行，&lt;br&gt;  执行异步的请求更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;4、启动崩溃第二次，启动上报逻辑和预处理&quot;&gt;&lt;a href=&quot;#4、启动崩溃第二次，启动上报逻辑和预处理&quot; class=&quot;headerlink&quot; title=&quot;4、启动崩溃第二次，启动上报逻辑和预处理&quot;&gt;&lt;/a&gt;4、启动崩溃第二次，启动上报逻辑和预处理&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;APPDelegate 上报和预处理逻辑 ReportBlock，当出现第二次崩溃的时候，可以删除本地的一些可能会导致crash的东西，&lt;br&gt;比如本地的数据库可以先清理掉，等等。然后统计上报。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;5、启动崩溃第三次，开始启动修复逻辑&quot;&gt;&lt;a href=&quot;#5、启动崩溃第三次，开始启动修复逻辑&quot; class=&quot;headerlink&quot; title=&quot;5、启动崩溃第三次，开始启动修复逻辑&quot;&gt;&lt;/a&gt;5、启动崩溃第三次，开始启动修复逻辑&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;如果本地有缓存，则网络异步更新，因为后面的逻辑保证本地已有的缓存patchJS执行没错，所以可以先执行。&lt;br&gt;如果本地无缓存，则网络同步请求，返回补丁，运行成功后再启动APP正常流程。&lt;br&gt;不会再出现再次崩溃3此的情况。&lt;br&gt;只要出现3次崩溃，忽略本地缓存，直接请求更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;6、启动后修复&quot;&gt;&lt;a href=&quot;#6、启动后修复&quot; class=&quot;headerlink&quot; title=&quot;6、启动后修复&quot;&gt;&lt;/a&gt;6、启动后修复&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;启动中的时候，判断本地有缓存文件，预先执行，之后，每次active就会请求更新文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;7、补丁下发更新机制&quot;&gt;&lt;a href=&quot;#7、补丁下发更新机制&quot; class=&quot;headerlink&quot; title=&quot;7、补丁下发更新机制&quot;&gt;&lt;/a&gt;7、补丁下发更新机制&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;本地无缓存，直接存储，有缓存，判断版本号。&lt;br&gt; 我们在后台下发补丁的时候，目前依旧保持，升级版本号，全量覆盖。也就是说，app每个版本，在客户端里依旧保持唯一一个补丁，启动前和启动后各自有对应的唯一一个。&lt;br&gt;此处，服务端也有策略，我们上传的参数包含当前，版本，如果服务端有更高版本，就会升级。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;8、客户端本地处理下发的patch错误&quot;&gt;&lt;a href=&quot;#8、客户端本地处理下发的patch错误&quot; class=&quot;headerlink&quot; title=&quot;8、客户端本地处理下发的patch错误&quot;&gt;&lt;/a&gt;8、客户端本地处理下发的patch错误&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;(void)handleException:(void (^)(NSInteger crashType,NSString *msg))exceptionBlock;&lt;br&gt;crashType == 1 的时候是 JS环境 运行的Crash&lt;br&gt;crashType == 2 的时候是  OC环境 运行的Crash&lt;br&gt;当我们下发的脚本有问题的时候，客户端本地直接删除全部补丁文件，包括启动前和启动后。&lt;br&gt;APPDelegate 中 JSCrashHanlder 被调用，可以填写上报逻辑和反馈运行的错误原因。&lt;br&gt;在此条件下，当用户退到后台之后，自动崩溃，重新打开客户端没有patch，这个留出来及时下发修正后Patch的时机。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;9、下发JS空白&quot;&gt;&lt;a href=&quot;#9、下发JS空白&quot; class=&quot;headerlink&quot; title=&quot;9、下发JS空白&quot;&gt;&lt;/a&gt;9、下发JS空白&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;直接删除本地补丁文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;10、下发前，本地预先运行，验证JS脚本&quot;&gt;&lt;a href=&quot;#10、下发前，本地预先运行，验证JS脚本&quot; class=&quot;headerlink&quot; title=&quot;10、下发前，本地预先运行，验证JS脚本&quot;&gt;&lt;/a&gt;10、下发前，本地预先运行，验证JS脚本&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;直接将要在后台要下发的JS代码，非BASE64编码，贴到工程里的test.js 文件里，此处文件名固定。&lt;br&gt;并在APPDelegate 打开测试运行的开关，然后直接运行即可，测试完毕，防止错误，必须关闭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;11、本地模拟crash&quot;&gt;&lt;a href=&quot;#11、本地模拟crash&quot; class=&quot;headerlink&quot; title=&quot;11、本地模拟crash&quot;&gt;&lt;/a&gt;11、本地模拟crash&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;增加错误的OC代码导致crash，用于模拟各种情况，包括启动中，启动中延时，启动后。&lt;br&gt;并设置了开关，默认都是关闭的，随测试方法的开关一起，正式提交时，必须关闭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;2、管理的系统版本号粒度更精细&quot;&gt;&lt;a href=&quot;#2、管理的系统版本号粒度更精细&quot; class=&quot;headerlink&quot; title=&quot;2、管理的系统版本号粒度更精细&quot;&gt;&lt;/a&gt;2、管理的系统版本号粒度更精细&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;整数示例：8，9，10   —-   后台命中：8.x,9.x,10.x   IOS系统版本&lt;br&gt;精确示例：9.1.2 — 后台命中：9.1.2 IOS系统版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;13、下发补丁一并写注释&quot;&gt;&lt;a href=&quot;#13、下发补丁一并写注释&quot; class=&quot;headerlink&quot; title=&quot;13、下发补丁一并写注释&quot;&gt;&lt;/a&gt;13、下发补丁一并写注释&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;每次下发补丁，需要填写说明，包括：【事故原因】【下发人】【下发日期】&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;14、启动后的下发调用改为通知&quot;&gt;&lt;a href=&quot;#14、启动后的下发调用改为通知&quot; class=&quot;headerlink&quot; title=&quot;14、启动后的下发调用改为通知&quot;&gt;&lt;/a&gt;14、启动后的下发调用改为通知&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;不需要在applicationDidBecomeActive中再显示调用原来的makePatchRequestAfterLaunch，manager内部监听通知即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;15、增加端监控，传出参数，由TTMonitor在外部配合调到&quot;&gt;&lt;a href=&quot;#15、增加端监控，传出参数，由TTMonitor在外部配合调到&quot; class=&quot;headerlink&quot; title=&quot;15、增加端监控，传出参数，由TTMonitor在外部配合调到&quot;&gt;&lt;/a&gt;15、增加端监控，传出参数，由TTMonitor在外部配合调到&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;监控请求成功和失败、下发更新、版本升级删除的等等用于统计patch的使用情况，后期有利于生成分布和图形。&lt;br&gt;TTSparkRescueLaunchCrash&lt;br&gt;APPDelegate 上报和预处理逻辑 ReportBlock，当出现第二次崩溃的时候，可以删除本地的一些可能会导致crash的东西，&lt;br&gt;比如本地的数据库可以先清理掉，等等。然后统计上报。&lt;br&gt;TTSparkRescueServerCloseCrash&lt;br&gt;服务器端下发关闭运行JSPatch的统计&lt;br&gt;TTSparkRescueDeleteFile&lt;br&gt;删除清空本地文件的统计，下发空白、错误、运行错误、升级都会删除之前的缓存文件，用action字段区分。&lt;br&gt;TTSparkRescueError&lt;br&gt;内部运行的错误报告，文件请求失败和运行失败等。&lt;br&gt;TTSparkRescueUpdateFile&lt;br&gt;统计更新成功的事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;3-2、测试Case&quot;&gt;&lt;a href=&quot;#3-2、测试Case&quot; class=&quot;headerlink&quot; title=&quot;3.2、测试Case&quot;&gt;&lt;/a&gt;3.2、测试Case&lt;/h2&gt;&lt;p&gt;1、启动中，有崩溃，包括延时崩溃，无缓存文件。正常同步请求返回，APP启动完成。&lt;/p&gt;
&lt;p&gt;2、启动中，有崩溃，包括延时崩溃，有缓存文件。&lt;br&gt;直接读取本地文件，APP启动完成。&lt;/p&gt;
&lt;p&gt;3、启动中，有崩溃，包括延时崩溃，下发JS语法的patch文件。&lt;br&gt;无法正常启动，连续crash3次后走同步请求。&lt;/p&gt;
&lt;p&gt;4、启动后，有崩溃，无缓存文件。正常异步请求返回，APP正常运行。&lt;/p&gt;
&lt;p&gt;5、启动后，有崩溃，有缓存文件。直接读取本地文件，正常同步请求返回更新文件，APP正常运行。&lt;/p&gt;
&lt;p&gt;6、启动后，下发错误JS语法的patch文件。客户端判断文件出错，删除全部补丁缓存文件，清零，开始重新请求更新。&lt;/p&gt;
&lt;p&gt;7、以上case通过线上下发运行一次，再本地测试开关运行一次。testPatch.js 在主工程被正确添加后，都可以正确执行。&lt;/p&gt;
&lt;p&gt;8、升级版本号，覆盖安装。删除本地原有的补丁文件，清零。&lt;/p&gt;
&lt;p&gt;9、监控点事件上报。正常对外输出事件和外带信息到APPDelegate中&lt;/p&gt;
&lt;h1 id=&quot;4-使用说明&quot;&gt;&lt;a href=&quot;#4-使用说明&quot; class=&quot;headerlink&quot; title=&quot;4. 使用说明&quot;&gt;&lt;/a&gt;4. 使用说明&lt;/h1&gt;&lt;h2 id=&quot;4-1-补丁后台管理&quot;&gt;&lt;a href=&quot;#4-1-补丁后台管理&quot; class=&quot;headerlink&quot; title=&quot;4.1 补丁后台管理&quot;&gt;&lt;/a&gt;4.1 补丁后台管理&lt;/h2&gt;&lt;p&gt;客户端的修复需要后端的支持，提供接口和后端管理平台，用于托管修复文件，控制版本和保证传输安全。客户端根据反馈的崩溃信息(版本、名称、设备、用户)，针对某一批用户或者某一个版本号，在后台进行选择对应的版本JS文件，进行下发即可。&lt;/p&gt;
&lt;h3 id=&quot;4-1-1-热修复接口定义&quot;&gt;&lt;a href=&quot;#4-1-1-热修复接口定义&quot; class=&quot;headerlink&quot; title=&quot;4.1.1 热修复接口定义&quot;&gt;&lt;/a&gt;4.1.1 热修复接口定义&lt;/h3&gt;&lt;p&gt;应用名称和应用ID作用一致，为了兼容老的已经发出去的版本，我们保留app_name，之后的都是用app_id，两者等效力，&lt;br&gt;参数命中其中一个，至少有一个就行，就可以返回值。  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数ID&lt;/th&gt;
&lt;th&gt;举例说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用版本号&lt;/td&gt;
&lt;td&gt;app_version&lt;/td&gt;
&lt;td&gt;5.6.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用名称&lt;/td&gt;
&lt;td&gt;app_name&lt;/td&gt;
&lt;td&gt;今日头条&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用ID&lt;/td&gt;
&lt;td&gt;app_id&lt;/td&gt;
&lt;td&gt;com.iphone.text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;启动前后&lt;/td&gt;
&lt;td&gt;app_launch&lt;/td&gt;
&lt;td&gt;0前1后&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;设备ID&lt;/td&gt;
&lt;td&gt;device_id&lt;/td&gt;
&lt;td&gt;用户的手机设备ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;编号&lt;/td&gt;
&lt;td&gt;无，客户端不作请求参数&lt;/td&gt;
&lt;td&gt;服务端后台的文件号，随意定，不重复即可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;百分比&lt;/td&gt;
&lt;td&gt;无，客户端不作请求参数&lt;/td&gt;
&lt;td&gt;服务端后台按量下发补丁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ON/OFF&lt;/td&gt;
&lt;td&gt;无，客户端不作请求参数&lt;/td&gt;
&lt;td&gt;服务端后台控制补丁开关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逗号分隔&lt;/td&gt;
&lt;td&gt;无，客户端不作请求参数&lt;/td&gt;
&lt;td&gt;服务端后台下发补丁，支持不同的版本，逗号分隔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用版本号扩展&lt;/td&gt;
&lt;td&gt;无，客户端不作请求参数&lt;/td&gt;
&lt;td&gt;服务端后台下发的补丁，补丁本身的版本号，格式约定：应用版本号整数数字.补丁版本号整数数字，比如：570.1，591.21&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;4-1-2-数据格式&quot;&gt;&lt;a href=&quot;#4-1-2-数据格式&quot; class=&quot;headerlink&quot; title=&quot;4.1.2 数据格式&quot;&gt;&lt;/a&gt;4.1.2 数据格式&lt;/h3&gt;&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;status:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;message:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;data:&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;     js_crash:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;//修复代码本身出错的时候打开&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;     js_version:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;560.4&lt;/span&gt;,         &lt;span class=&quot;comment&quot;&gt;//5.6.0版本的第四个JS版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;     js_value:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot; sfkdsfnldjgdfnkgndkfngdsfgmdfngfjshdbfkhrwnf&quot;&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;//js的BASE64编码值，客户端直接解码运行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-2-客户端运行：&quot;&gt;&lt;a href=&quot;#4-2-客户端运行：&quot; class=&quot;headerlink&quot; title=&quot;4.2 客户端运行：&quot;&gt;&lt;/a&gt;4.2 客户端运行：&lt;/h2&gt;&lt;p&gt;补丁分为启动前和启动后，和前面快速集成代码块一样，只需要这里，就已经是全部，启动前后的划分在内部执行，通知监听，不需要手动再调用。&lt;/p&gt;
&lt;h2 id=&quot;4-3、具体案例：&quot;&gt;&lt;a href=&quot;#4-3、具体案例：&quot; class=&quot;headerlink&quot; title=&quot;4.3、具体案例：&quot;&gt;&lt;/a&gt;4.3、具体案例：&lt;/h2&gt;&lt;p&gt;案例：5.7.0版本上bug修复&lt;/p&gt;
&lt;p&gt;当我们需要完全替换方法的时候，我们需要注意替换原则，就是尽量使用原生的Native方法，这样JSpatch在转化的过程中可以遵循原生方法规则，生成对应代码，在解析的时候可以还原。&lt;br&gt;比如：&lt;/p&gt;
&lt;h3 id=&quot;4-3-1-使用注意&quot;&gt;&lt;a href=&quot;#4-3-1-使用注意&quot; class=&quot;headerlink&quot; title=&quot;4.3.1 使用注意&quot;&gt;&lt;/a&gt;4.3.1 使用注意&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; setAutoresizingMaskFlexibleWidthAndHeight(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *view)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    view.autoresizingMask = &lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleWidth&lt;/span&gt;|&lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleHeight&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;setAutoresizingMaskFlexibleWidthAndHeight(self.footerView);&lt;br&gt;我们在写的时候得写成：&lt;br&gt;self.footerView.autoresizingMask = 2|16;&lt;br&gt;系统自定义的常量，比如：UIViewAutoresizingFlexibleWidth,在JSPtatch中将被转化为同名的变量，然而这个变量，却在JS环境中没有定义，从而会报错。&lt;br&gt;所以我们直接使用对应的常量数字 2.&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[[self.footerView footerScrollView]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;tt_addDelegate&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:self&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;asMainDelegate&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:NO&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用于JSPatch自定义的语法为使用下划线区分方法名称，所以当转化为的JS再次被转回来OC方法的时候，会出现[[self.footerView footerScrollView] tt:addDelegate:self asMainDelegate:NO];&lt;br&gt;这样就崩溃了。&lt;/p&gt;
&lt;h3 id=&quot;4-3-2-示例&quot;&gt;&lt;a href=&quot;#4-3-2-示例&quot; class=&quot;headerlink&quot; title=&quot;4.3.2  示例&quot;&gt;&lt;/a&gt;4.3.2  示例&lt;/h3&gt;&lt;p&gt;Native源代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TTDetailWebviewContainer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addFooterView:(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt;&amp;lt;TTDetailFooterViewProtocol&amp;gt; *)footerView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  detailFooterAddType:(TTDetailNatantStyle)natantStyle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.natantStyle = natantStyle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerView = footerView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerView addObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; forKeyPath:&lt;span class=&quot;string&quot;&gt;@&quot;footerScrollView&quot;&lt;/span&gt; options:&lt;span class=&quot;built_in&quot;&gt;NSKeyValueObservingOptionOld&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;NSKeyValueObservingOptionNew&lt;/span&gt; context:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerView footerScrollView] tt_addDelegate:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; asMainDelegate:&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footScrollView = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerView.footerScrollView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerView.frame = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bounds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//footerScrollView被赋值后，刷新scrollEnable和scrollToTop的状态；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerStatus = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerStatus;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setAutoresizingMaskFlexibleWidthAndHeight(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; shouldOpenInsertionOptimization]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addFooterView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addFooterView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;目标JS代码：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;defineClass&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;TTDetailWebviewContainer&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;addFooterView_detailFooterAddType&lt;/span&gt;: function(footerView, natantStyle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.setNatantStyle(natantStyle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.setFooterView&lt;/span&gt;(footerView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.footerView&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.addObserver_forKeyPath_options_context&lt;/span&gt;(self, &lt;span class=&quot;string&quot;&gt;&quot;footerScrollView&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;|&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.footerView&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.footerScrollView&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.tt__addDelegate_asMainDelegate&lt;/span&gt;(self, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.setFootScrollView&lt;/span&gt;(self.footerView().footerScrollView());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.footerView&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.setFrame&lt;/span&gt;(self.bounds());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.setFooterStatus&lt;/span&gt;(self.footerStatus());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.footerView&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.setAutoresizingMask&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; | &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt; (self.shouldOpenInsertionOptimization()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.addFooterView&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.addFooterView&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;5-原理介绍&quot;&gt;&lt;a href=&quot;#5-原理介绍&quot; class=&quot;headerlink&quot; title=&quot;5. 原理介绍&quot;&gt;&lt;/a&gt;5. 原理介绍&lt;/h1&gt;&lt;h2 id=&quot;5-1-三方库&quot;&gt;&lt;a href=&quot;#5-1-三方库&quot; class=&quot;headerlink&quot; title=&quot;5.1 三方库&quot;&gt;&lt;/a&gt;5.1 三方库&lt;/h2&gt;&lt;p&gt;JSPatch(Github链接)诞生于2015年5月，最初是腾讯广研高级iOS开发@bang的个人项目。在Github.com上开源后获得了几千个star和几百个fork，广受关注，目前已被应用在大量腾讯/阿里/百度的App中。只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。所以我们通过下发 JS 脚本替换原生 Objective-C 代码，就可以实时修复线上 bug。针对头条客户端用于解决客户端发布后的崩溃修复问题，尤其是解决客户端的启动崩溃问题。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;objc/runtime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;objc/message.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-2-TTSparkRescue&quot;&gt;&lt;a href=&quot;#5-2-TTSparkRescue&quot; class=&quot;headerlink&quot; title=&quot;5.2 TTSparkRescue&quot;&gt;&lt;/a&gt;5.2 TTSparkRescue&lt;/h2&gt;&lt;h3 id=&quot;5-2-1-修复类型&quot;&gt;&lt;a href=&quot;#5-2-1-修复类型&quot; class=&quot;headerlink&quot; title=&quot;5.2.1 修复类型&quot;&gt;&lt;/a&gt;5.2.1 修复类型&lt;/h3&gt;&lt;h4 id=&quot;5-2-1-1-启动进行中&quot;&gt;&lt;a href=&quot;#5-2-1-1-启动进行中&quot; class=&quot;headerlink&quot; title=&quot;5.2.1.1 启动进行中&quot;&gt;&lt;/a&gt;5.2.1.1 启动进行中&lt;/h4&gt;&lt;p&gt;当发生启动崩溃的时候，通过同步的网络请求，下发JS脚本执行修复。下发的条件由本地的崩溃计数决定，应用每次启动都会在本地增加一次崩溃计数，并在3秒之后将计数清理，如果3秒内崩溃，则判定为一次真实的崩溃。当崩溃次数达到设置的条件的时候，比如连续崩溃3次，客户端就开始执行修复的逻辑过程，向后端发起对此接口的同步请求，由接口信息告知是否需要使用JS修复，是否需要更新JS文件，文件版本号以及JS文件内容的加密值。请求返回后，由客户端本地判断更新文件，下载，并执行。如果本地之前没有修复的JS 文件，默认需要请求更新。更新文件成功后，对应更新本地的文件版本号和MD5值。&lt;/p&gt;
&lt;p&gt;同步请求：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_semaphore_t &lt;/span&gt;semaphore = &lt;span class=&quot;keyword&quot;&gt;dispatch_semaphore_create(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t &lt;/span&gt;queue = &lt;span class=&quot;keyword&quot;&gt;dispatch_queue_create(&quot;queue&quot;, &lt;/span&gt;NULL)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_async(queue, &lt;/span&gt;^(void) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HandlerBlock semaphoreBlock = ^(TTSparkRescueCrashType type,NSString *msg)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;dispatch_semaphore_signal(semaphore);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &amp;#125;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self getLaunchRequestBlock:semaphoreBlock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_semaphore_wait(semaphore, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;DISPATCH_TIME_FOREVER);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请求返回保存本地&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;updateLaunchLocalJS:&lt;span class=&quot;params&quot;&gt;(NSString *)&lt;/span&gt;launchJS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                versionCode:&lt;span class=&quot;params&quot;&gt;(NSNumber *)&lt;/span&gt;versionCode&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行本地JS代码&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;exvalueBase64Script:&lt;span class=&quot;params&quot;&gt;(NSString *)&lt;/span&gt;base64Script;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;exvalueRescueScript:&lt;span class=&quot;params&quot;&gt;(NSString *)&lt;/span&gt;jsScript;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;监听是否有执行错误&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;setJSCrashHanlder:&lt;span class=&quot;params&quot;&gt;(HandlerBlock)&lt;/span&gt;handlerBlock;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;5-2-1-2-启动完成后，使用中&quot;&gt;&lt;a href=&quot;#5-2-1-2-启动完成后，使用中&quot; class=&quot;headerlink&quot; title=&quot;5.2.1.2 启动完成后，使用中&quot;&gt;&lt;/a&gt;5.2.1.2 启动完成后，使用中&lt;/h4&gt;&lt;p&gt;当到达启动崩溃条件的时候，我们直接执行启动热修复逻辑。启动的时间稍微加长，遇见网络慢的情况用户需要等待的时间就会更久，当然为了避免崩溃这都是必要的。还有，另外的情况是，当用户使用我们的应用的时候，在一个层级比较深的地方操作并出现崩溃，当用户用到这里之前才会崩溃都不会有，这种情况我们依然需要进行热修复。流程类似，为异步。&lt;/p&gt;
&lt;h3 id=&quot;5-2-2-补丁模拟自测&quot;&gt;&lt;a href=&quot;#5-2-2-补丁模拟自测&quot; class=&quot;headerlink&quot; title=&quot;5.2.2 补丁模拟自测&quot;&gt;&lt;/a&gt;5.2.2 补丁模拟自测&lt;/h3&gt;&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  测试环节，用一个方法控制开关&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  执行测试的testPatch.js,固定命名，测试完毕提交的时候必须关闭&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  模拟启动中崩溃,立刻&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  模拟启动中延迟崩溃，延迟启动中网络请求返回的默认时间10s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  模拟激活后崩溃,60s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt; (void)&lt;span class=&quot;symbol&quot;&gt;setTestPatch:&lt;/span&gt;(BOOL)testJsOn &lt;span class=&quot;symbol&quot;&gt;simulationCrash:&lt;/span&gt;(BOOL)crashOn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt; (void)simulationLauchCrash;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt; (void)simulationLauchDelayCrash;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt; (void)simulationActiveCrash;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;5-2-2-混淆方式，绕过审核&quot;&gt;&lt;a href=&quot;#5-2-2-混淆方式，绕过审核&quot; class=&quot;headerlink&quot; title=&quot;5.2.2 混淆方式，绕过审核&quot;&gt;&lt;/a&gt;5.2.2 混淆方式，绕过审核&lt;/h3&gt;&lt;h4 id=&quot;5-2-2-1-原理：&quot;&gt;&lt;a href=&quot;#5-2-2-1-原理：&quot; class=&quot;headerlink&quot; title=&quot;5.2.2.1 原理：&quot;&gt;&lt;/a&gt;5.2.2.1 原理：&lt;/h4&gt;&lt;p&gt;我们大致判断，苹果审核部检测应用是否使用JSPatch是通过运行时方法名检测。所以通过宏定义替换的方式，我们将与”JSPatch“有关的字段都用混淆的字符串进行宏定义替换，运行时检测到的都是混淆的不可读名称。&lt;/p&gt;
&lt;h4 id=&quot;5-2-2-2-脚本替换&quot;&gt;&lt;a href=&quot;#5-2-2-2-脚本替换&quot; class=&quot;headerlink&quot; title=&quot;5.2.2.2 脚本替换&quot;&gt;&lt;/a&gt;5.2.2.2 脚本替换&lt;/h4&gt;&lt;p&gt;shell脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/usr/bin/env bash  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;STRING_SYMBOL_FILE=&lt;span class=&quot;string&quot;&gt;&quot;func.list&quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HEAD_FILE=&lt;span class=&quot;string&quot;&gt;&quot;./confuseMacro.h&quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; LC_CTYPE=C  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;ramdomString&lt;/span&gt;&lt;/span&gt;()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    openssl rand -base64 64 | tr -cd &lt;span class=&quot;string&quot;&gt;&#39;a-zA-Z&#39;&lt;/span&gt; |head -c 16  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$HEAD_FILE&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch &lt;span class=&quot;variable&quot;&gt;$HEAD_FILE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;#ifndef Demo_codeObfuscation_h  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define Demo_codeObfuscation_h&#39;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;variable&quot;&gt;$HEAD_FILE&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;//confuse string at `date`&quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;variable&quot;&gt;$HEAD_FILE&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$STRING_SYMBOL_FILE&lt;/span&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; -ra line; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [[ ! -z &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt;&quot;&lt;/span&gt; ]]; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ramdom=`ramdomString`  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$ramdom&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;#define &lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$ramdom&lt;/span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;variable&quot;&gt;$HEAD_FILE&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;#endif&quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;variable&quot;&gt;$HEAD_FILE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;宏定义替换结果：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; Demo_codeObfuscation_h  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; Demo_codeObfuscation_h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//confuse string at 2017年 5月 9日 星期二 15时09分20秒 CST&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; JPEngine zLuEDxRvmBuomcFI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; JPExtension IoAZxAmFBjgEOaIg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; JPBoxing wzZsoLGKuQUTRFsi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; startEngine PRqvWWtwFlXUqdBe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; evaluateScriptWithPath cNHrlJKiZyWXkfKo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _evaluateScriptWithPath oDyiimPOHiIWBOEI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; addExtensions MbpkqoMunCfIBgxY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; defineStruct jIfCtJkMsIshJCvx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; formatPointerJSToOC IcHiIjXLjFucrQHR&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; formatRetainedCFTypeOCToJS lyCjsaHwzQaYUiBE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; formatPointerOCToJS DdwjOGMUveuHjYQq&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; formatJSToOC BBFoPIaVlHRWBNQx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; formatOCToJS PHwNpfqmydeeFhMY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; TTSparkRescue euibpyTZoKOvrKyO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; exvalueBase64Script fcXBLgUPqmsRqIWx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _JSOverideMethods FBOBELKtnClIUhEa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _TMPMemoryPool ysvnOHCwoCVvFwfY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _propKeys cnyhVgwVNuEVAvEp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _JSMethodSignatureCache inrkXDymTFAbwLRo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _JSMethodSignatureLock LmXaTYYBizrQBKzn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _JSMethodForwardCallLock YdmfSXxrtNuKsJkp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _protocolTypeEncodeDict NxHWlKlDFjjgpzYV&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _pointersToRelease pybucmDygKyxFMvj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; jp_methodSignatureForSelector cyzfrUQNsmWrwIgU&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; jp_fixMethodSignature vlSNUMpVTTXwTWJl&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; JPForwardInvocation gflqBWbUOmJHNfcL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; JPExecuteORIGForwardInvocation itGMsXKksYYFyCPL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _initJPOverideMethods hpoUXLPSkKsFbHRk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; overrideMethod KCgQjNlpCNXOixZS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; invokeVariableParameterMethod YITOuEIcAICefCkG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; convertJPSelectorString wwttXxSrZoFlmKML&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; getJSFunctionInObjectHierachy JjRtFUqUREPdZAgY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; unboxOCObjectToJS MeVMxsEAmgCokbXc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; makePatchRequestAfterLaunch icreqUfezHNyjLdw&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; setJSCrashHanlder hwsfKTIzZPvTEMmc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; getLaunchPatchVersionCode jqRICpprUZpVeKVy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; getActivePatchVersionCode zZIvunQsewkyABXu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TTSparkRescue&quot;&gt;&lt;a href=&quot;#TTSparkRescue&quot; class=&quot;headerlink&quot; title=&quot;TTSparkRescue&quot;&gt;&lt;/a&gt;TTSparkRescue&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;备注：2017年4月开始出
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>移动端持久化存储方案</title>
    <link href="http://xuzichao.com/2016/08/03/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88/"/>
    <id>http://xuzichao.com/2016/08/03/移动端持久化存储方案/</id>
    <published>2016-08-03T04:01:51.000Z</published>
    <updated>2017-08-17T10:23:56.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;移动端持久化存储方案&quot;&gt;&lt;a href=&quot;#移动端持久化存储方案&quot; class=&quot;headerlink&quot; title=&quot;移动端持久化存储方案&quot;&gt;&lt;/a&gt;移动端持久化存储方案&lt;/h1&gt;&lt;h2 id=&quot;一、持久化方案：&quot;&gt;&lt;a href=&quot;#一、持久化方案：&quot; class=&quot;headerlink&quot; title=&quot;一、持久化方案：&quot;&gt;&lt;/a&gt;一、持久化方案：&lt;/h2&gt;&lt;h3 id=&quot;1-1-NSUserDefault&quot;&gt;&lt;a href=&quot;#1-1-NSUserDefault&quot; class=&quot;headerlink&quot; title=&quot;1.1 NSUserDefault&quot;&gt;&lt;/a&gt;1.1 NSUserDefault&lt;/h3&gt;&lt;p&gt;通常用来存储用户偏好设置和应用配置信息，偶尔也会存放一些服务端版本标识数据，比如AB方案的判断开关。它适合小规模的数据，并且这些数据是不具备私密性的。常见的应用启动的时候是否需要展示引导页，就可以在这里设置一个是否已显示过的标志。它的背后实际上是一个特殊的 .plist 文件。&lt;/p&gt;
&lt;h3 id=&quot;1-2-Keychain&quot;&gt;&lt;a href=&quot;#1-2-Keychain&quot; class=&quot;headerlink&quot; title=&quot;1.2 Keychain&quot;&gt;&lt;/a&gt;1.2 Keychain&lt;/h3&gt;&lt;p&gt;Keychain 用来存储一些敏感的数据，比如密码，token 等。由于相关的 API 比较底层，我们可以使用对其做了封装的更友好的第三方库，比如 FXKeychain。&lt;/p&gt;
&lt;h3 id=&quot;1-3-文件&quot;&gt;&lt;a href=&quot;#1-3-文件&quot; class=&quot;headerlink&quot; title=&quot;1.3 文件&quot;&gt;&lt;/a&gt;1.3 文件&lt;/h3&gt;&lt;p&gt;文件存储一般用于存取媒体文件，包括视频音频图片等。比如iOS端上由于本地资源库没法直接读取视频数据本身，通常会转化到文件里面再进行上传处理。&lt;/p&gt;
&lt;h3 id=&quot;1-4-Plist&quot;&gt;&lt;a href=&quot;#1-4-Plist&quot; class=&quot;headerlink&quot; title=&quot;1.4 Plist&quot;&gt;&lt;/a&gt;1.4 Plist&lt;/h3&gt;&lt;p&gt;.plist 文件用来存储小规模的结构化的数据，用到的时候可以很方便的读取。常见的比如“省-城市”数据。但存储对象类型只能是这些：NSData，NSString，NSNumber，NSDate，NSArray，NSDictionary。&lt;br&gt;NSKeyedArchiver：由于 Plist 对存储对象类型的限制，如果想存更大量的，结构更复杂的对象，就可以用归档。只需要自定义的数据类型遵守 NSCoding 协议。&lt;/p&gt;
&lt;h3 id=&quot;1-5-数据库&quot;&gt;&lt;a href=&quot;#1-5-数据库&quot; class=&quot;headerlink&quot; title=&quot;1.5 数据库&quot;&gt;&lt;/a&gt;1.5 数据库&lt;/h3&gt;&lt;p&gt;上面提到的几种方案都是很轻量级的，一旦数据量更大，数据结构及关联关系更复杂，需要更频繁和方便的增删改查，我们就需要用上数据库来满足这些需求。本篇涉及的数据包括：GYDataCenter、Core Data、Realm。&lt;/p&gt;
&lt;h2 id=&quot;二-数据库对比&quot;&gt;&lt;a href=&quot;#二-数据库对比&quot; class=&quot;headerlink&quot; title=&quot;二. 数据库对比&quot;&gt;&lt;/a&gt;二. 数据库对比&lt;/h2&gt;&lt;h3 id=&quot;2-1-CoreData&quot;&gt;&lt;a href=&quot;#2-1-CoreData&quot; class=&quot;headerlink&quot; title=&quot;2.1 CoreData&quot;&gt;&lt;/a&gt;2.1 CoreData&lt;/h3&gt;&lt;p&gt;Core Data 是 Apple的对象图管理和数据持久化框架。它的底层是通过 SQLite，XML 或二进制文件存储数据的。在数据存储之上，又提供了数据模型的解决方案。可以说它搭起了下层数据和上层对象之间的桥梁，将关系型数据转成对象，并通过对象图组织起来，进行自动管理。同时使得开发者可以面向对象编程。&lt;/p&gt;
&lt;p&gt;虽然是苹果自带的数据库方案，但是它常常为人所诟病。不展开对它的使用，因为我们要采用的方案从来都不是它。说说那些列举不完的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学习成本高，要很久才能得心应手&lt;/li&gt;
&lt;li&gt;对象Schema改变后，数据迁移比较棘手&lt;/li&gt;
&lt;li&gt;对于一次大量更新删除等操作效率较低&lt;/li&gt;
&lt;li&gt;对主键的支持要自己去维护 &lt;/li&gt;
&lt;li&gt;占用内存会高&lt;/li&gt;
&lt;li&gt;Context之间的关系和线程之间的处理感到很头痛&lt;/li&gt;
&lt;li&gt;多个持久化文件很麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-2-RealM&quot;&gt;&lt;a href=&quot;#2-2-RealM&quot; class=&quot;headerlink&quot; title=&quot;2.2 RealM&quot;&gt;&lt;/a&gt;2.2 RealM&lt;/h3&gt;&lt;p&gt;在选择替换数据库方案的时候，网上看了很多对realm的赞扬，尤其是在和coredata的对比之下，没有哪里是不完爆的，各种好使各种快速。不过我们还是好好的来理一下他的优缺点。&lt;/p&gt;
&lt;h4 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用方便&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Realm并不是基于SQLite的对象关系映射数据库。它是使用自己的持久化引擎，为简单和速度而生。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;零拷贝的设计使得它比其他数据库都更快。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跨平台 &lt;/li&gt;
&lt;li&gt;优秀的特性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如加密，图形查询，轻松的迁移。Realm的API是一个非常适合打造高响应的应用程​​序，并且Realm为我们提供方便的组件。&lt;/p&gt;
&lt;p&gt;###&lt;/p&gt;
&lt;h4 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;关联关系弱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对象跟对象之间的一对多关系和多对多关系，并不能映射，需要在双方里面都写上属性，此外还需要在设置的时候两边同时设置。查询时候也是 NSPredicate 也仅仅只支持一些一层的查询，没法做出带SUBQUERY的复杂查询出来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强制内省容错机制导致存储文件不断变大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Realm本身感觉有一个数据容错机制。但是这个机制在数据库文件有错误的情况自己修复的时候，会无限增大。官方文档里面有说到会造成这种情形的原因，我在尽我所能的避免问题以后，存储文件还是会有可能不那么夸张的变大一些。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有细粒化通知&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在某个地方做出修改。 其他地方只知道Realm有修改，但是没法知道我是增加、修改还是删除了数据。不知道我更新的是那一条数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加包体积&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方说会增加1MB左右的包大小，如果你是一个小体积应用，或者是一个几千万用户的主流应用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心代码目前闭源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-3-GYDataCenter&quot;&gt;&lt;a href=&quot;#2-3-GYDataCenter&quot; class=&quot;headerlink&quot; title=&quot;2.3 GYDataCenter&quot;&gt;&lt;/a&gt;2.3 GYDataCenter&lt;/h2&gt;&lt;p&gt;GYDataCenter 是一个 SQLite 数据库框架，提供了一套简单易用的面向对象的数据操作接口，同时保留了 SQL 查询的灵活性。GYDataCenter 简单易上手，相对于 CoreData，GYDataCenter 的学习成本更低。同时，根据自己的需求，开发者可以更方便地划分数据库，设计数据库表，数据库索引等。&lt;/p&gt;
&lt;p&gt;GYDataCenter 具有以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向对象的数据操作接口&lt;/li&gt;
&lt;li&gt;使用 SQLite 的 where 语句做为查询条件&lt;/li&gt;
&lt;li&gt;自动创建及更新数据库表&lt;/li&gt;
&lt;li&gt;高性能 cache 层&lt;/li&gt;
&lt;li&gt;faulting 机制（类似 Core Data）&lt;/li&gt;
&lt;li&gt;自动批量写入磁盘&lt;/li&gt;
&lt;li&gt;使用 ANALYZE 优化查询&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;三、封装GYModelObject&quot;&gt;&lt;a href=&quot;#三、封装GYModelObject&quot; class=&quot;headerlink&quot; title=&quot;三、封装GYModelObject&quot;&gt;&lt;/a&gt;三、封装GYModelObject&lt;/h2&gt;&lt;p&gt;对比了上述三种数据库之后，决定放弃当前使用的coredata存储方式。另外两种在使用上各有优势，考虑到realm比较重，我们对数据库的要求不高，觉得采用比较轻量级的GYmodel尝试实现存储需求。&lt;/p&gt;
&lt;p&gt;GYDataCenter的上手使用非常快，核心点在于继承GYModle然后与对应的数据库建立映射，并且不需要自己手动建立数据库的过程。GY基于FMDB做的封装。具体的使用这里就不展开叙述了，在具体的使用中为了更方便易用，我们讲一下对它的升级。首页我们自定一个Model,它继承自GYModelObject，叫做BaseEntity,以后其他业务使用需要存入数据库的数据，直接继承BaseEntity。&lt;/p&gt;
&lt;h3 id=&quot;3-1-字典模型转化&quot;&gt;&lt;a href=&quot;#3-1-字典模型转化&quot; class=&quot;headerlink&quot; title=&quot;3.1 字典模型转化&quot;&gt;&lt;/a&gt;3.1 字典模型转化&lt;/h3&gt;&lt;p&gt;GYModelObject继承自NSObject，拥有基础的读取、查询和保存到数据的接口。但是通常的应用中，原始的Json数据需要转化到模型上使用，参照JSModle的使用，&lt;br&gt;我们给BaseEntity新增两个方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;(void)updateWithDictionary:(NSDictionary *)dictionary&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)updateWithDictionary:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)dictionary &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *persistentProperties = [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class] persistentProperties];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *propertyTypes = [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class] propertyTypes];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *keyMapping = [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class] keyMapping];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *modelKey &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; persistentProperties) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *jsonKey = [keyMapping objectForKey:modelKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!jsonKey) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            jsonKey = modelKey;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; value = [dictionary objectForKey:jsonKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value &amp;amp;&amp;amp; value != [&lt;span class=&quot;built_in&quot;&gt;NSNull&lt;/span&gt; null]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            GYPropertyType propertyType = [[propertyTypes objectForKey:modelKey] unsignedIntegerValue];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (propertyType == GYPropertyTypeRelationship) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;NSAssert&lt;/span&gt;([value isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; class]], &lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Class propertyClass = [[[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class] propertyClasses] objectForKey:modelKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                value = [dictionary ttentity_dictionaryValueForKey:jsonKey defalutValue:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    value = [propertyClass objectWithDictionary:value];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;//value不合法，忽略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;NSAssert&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;wrong relation type&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (propertyType == GYPropertyTypeInteger) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                value = @([dictionary ttentity_longlongValueForKey:jsonKey defaultValue:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (propertyType == GYPropertyTypeFloat) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                value = @([dictionary ttentity_doubleValueForKey:jsonKey defaultValue:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (propertyType == GYPropertyTypeString) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                value = [dictionary ttentity_stringValueForKey:jsonKey defaultValue:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (propertyType == GYPropertyTypeBoolean) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                value = @([dictionary ttentity_boolValueForKey:jsonKey defaultValue:&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (propertyType == GYPropertyTypeDate) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![value isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;NSAssert&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;wrong date type&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (propertyType == GYPropertyTypeData) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![value isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;NSAssert&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;wrong data type&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (propertyType == GYPropertyTypeUndefined || propertyType == GYPropertyTypeTransformable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//NSNumber, NSDictionary, NSArray会走这个分支&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *className = [GYReflection propertyTypeOfClass:[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class] propertyName:modelKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Class propertyClass = &lt;span class=&quot;built_in&quot;&gt;NSClassFromString&lt;/span&gt;(className);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (propertyClass == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; || &lt;span class=&quot;comment&quot;&gt;//取不到时也认为value合法，WenDaInviteData会出现这种情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    [value isKindOfClass:propertyClass] ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    [value isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// value合法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([propertyClass isSubclassOfClass:[&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; class]] &amp;amp;&amp;amp; [value isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    value = @([(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)value longLongValue]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;//类型不匹配，认为value不合法，忽略赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    LOGD(&lt;span class=&quot;string&quot;&gt;@&quot;setWrongTypeValueForKey %@ value %@&quot;&lt;/span&gt;, modelKey, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;@try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setValue:value forKey:modelKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;@catch&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSException&lt;/span&gt; *exception) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;NSAssert&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;exception %@&quot;&lt;/span&gt;, exception);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;(NSDictionary *)toDictionary&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)toDictionary &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *persistentProperties = [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class] persistentProperties];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *keyMapping = [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class] keyMapping];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; *dictionary = [&lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; dictionaryWithCapacity:persistentProperties.count];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *modelKey &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; persistentProperties) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *jsonKey = [keyMapping objectForKey:modelKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!jsonKey) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            jsonKey = modelKey;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; value = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; valueForKey:modelKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([value isKindOfClass:[TTEntityBase class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [dictionary setValue:[value toDictionary] forKey:jsonKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [dictionary setValue:value forKey:jsonKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dictionary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-2-查询&quot;&gt;&lt;a href=&quot;#3-2-查询&quot; class=&quot;headerlink&quot; title=&quot;3.2 查询&quot;&gt;&lt;/a&gt;3.2 查询&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;(NSArray &lt;em&gt;)objectsWithQuery:(NSDictionary &lt;/em&gt;)query&lt;pre&gt;&lt;code&gt;orderBy:(NSString *)orderKey
 offset:(NSInteger)offset
  limit:(NSInteger)limit
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *)objectsWithQuery:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)query orderBy:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)orderKey offset:(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)offset limit:(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)limit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableString&lt;/span&gt; *sql = [[&lt;span class=&quot;built_in&quot;&gt;NSMutableString&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *arguments = [[&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *allKeys = query.allKeys;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; count = [allKeys count];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *key = [allKeys objectAtIndex:i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [sql appendFormat:&lt;span class=&quot;string&quot;&gt;@&quot;WHERE %@ = ?&quot;&lt;/span&gt;, key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [sql appendFormat:&lt;span class=&quot;string&quot;&gt;@&quot; AND %@ = ?&quot;&lt;/span&gt;, key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [arguments addObject:query[key]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//NSLog(@&quot;%@=%@&quot;, key, query[key]);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (orderKey.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [sql appendFormat:&lt;span class=&quot;string&quot;&gt;@&quot; ORDER BY %@&quot;&lt;/span&gt;, orderKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (limit &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; limit &amp;lt; &lt;span class=&quot;built_in&quot;&gt;NSIntegerMax&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [sql appendFormat:&lt;span class=&quot;string&quot;&gt;@&quot; LIMIT %ld OFFSET %ld&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)limit, (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)offset];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *results = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; objectsWhere:sql arguments:arguments];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-3-size大小&quot;&gt;&lt;a href=&quot;#3-3-size大小&quot; class=&quot;headerlink&quot; title=&quot;3.3 size大小&quot;&gt;&lt;/a&gt;3.3 size大小&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;(float)dbSize&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;)dbSize &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *fileDictionary = [[&lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt; defaultManager] attributesOfItemAtPath:[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; pathForDbName:[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; dbName]] error:&amp;amp;error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; result = [[fileDictionary objectForKey:&lt;span class=&quot;built_in&quot;&gt;NSFileSize&lt;/span&gt;] floatValue];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-4-删除&quot;&gt;&lt;a href=&quot;#3-4-删除&quot; class=&quot;headerlink&quot; title=&quot;3.4 删除&quot;&gt;&lt;/a&gt;3.4 删除&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;(void)deleteDBFileIfNeeded&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)deleteDBFileIfNeeded &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *key = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;k%@DBVersion&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; oldNewsDBVersion = [[&lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt; standardUserDefaults] integerForKey:key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; newsDBVersion = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; dbVersion];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 升级或降级都要删数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (newsDBVersion != oldNewsDBVersion) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (oldNewsDBVersion &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; deleteDBFile];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [[&lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt; standardUserDefaults] setInteger:newsDBVersion forKey:key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;(BOOL)deleteDBFile&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)deleteDBFile &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *path = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; pathForDbName:[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; dbName]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; ret = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([[&lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt; defaultManager] fileExistsAtPath:path]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ret = [[&lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt; defaultManager] removeItemAtPath:path error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//dbVersion更新为当前版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *key = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;k%@DBVersion&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[&lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt; standardUserDefaults] setInteger:[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; dbVersion] forKey:key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-5-使用小结&quot;&gt;&lt;a href=&quot;#3-5-使用小结&quot; class=&quot;headerlink&quot; title=&quot;3.5 使用小结&quot;&gt;&lt;/a&gt;3.5 使用小结&lt;/h3&gt;&lt;p&gt;使用下来还是比Coredata,更快捷、更方便。原本我们的数据库有点积重难返，每次升级不好管理容易冲突，整个迁移过程中，比较正常顺利，&lt;br&gt;没有因为数据库出现严重的显示问题，bug还很少，且容易追查，对于我们以后数据持久化是一次重大的更新。说一下还有哪些地方不太满足需求的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关联很弱，不同model之间基本没有什么关系&lt;/li&gt;
&lt;li&gt;同一model更新保存，其他地方的引用得不到刷新&lt;/li&gt;
&lt;li&gt;每次修改数据库存储的字段，需要整体删除原有数据库重新生成新的，带来版本号问题&lt;/li&gt;
&lt;li&gt;当数字很大时候，使用NSNumber属性作为存储属性，保存值会出现不正确情况&lt;/li&gt;
&lt;li&gt;BaseEntity里面出现子model，需要变为BaseEntity且重写读取方法，包括删除和保存都需要单独调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然如此，我们从迁移到目前一直使用着，可见开发中还是没有出现严重问题，对比realm,给我们带来的收益应该会好一点，看到有新的数据库我们还是会尝试。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;移动端持久化存储方案&quot;&gt;&lt;a href=&quot;#移动端持久化存储方案&quot; class=&quot;headerlink&quot; title=&quot;移动端持久化存储方案&quot;&gt;&lt;/a&gt;移动端持久化存储方案&lt;/h1&gt;&lt;h2 id=&quot;一、持久化方案：&quot;&gt;&lt;a href=&quot;#一、持久化方案：&quot; cla
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>2016年重庆高考选择专业</title>
    <link href="http://xuzichao.com/2016/06/12/2016%E9%87%8D%E5%BA%86%E9%AB%98%E8%80%83%E6%AF%95%E4%B8%9A%E7%94%9F%E6%9C%AC%E7%A7%91%E4%B8%93%E4%B8%9A%E9%80%89%E6%8B%A9%E6%8E%A8%E8%8D%90/"/>
    <id>http://xuzichao.com/2016/06/12/2016重庆高考毕业生本科专业选择推荐/</id>
    <published>2016-06-12T11:09:59.000Z</published>
    <updated>2017-09-05T07:08:44.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;普通高校本科专业选择推荐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;此文针对我表弟16年重庆高考就读普通大学本科专业推荐，推荐凭借自己的社会认识和对众多所在对应专业的同学学习从业动向判定而得，等高考成绩出来了，结合本省排名、个人意向、专业招生人数、专业往年招生分数，即可快速定位，带有个人色彩。&lt;/p&gt;
&lt;h2 id=&quot;可选专业&quot;&gt;&lt;a href=&quot;#可选专业&quot; class=&quot;headerlink&quot; title=&quot;可选专业&quot;&gt;&lt;/a&gt;可选专业&lt;/h2&gt;&lt;h3 id=&quot;01学科门类：哲学-（所有门类不考虑）&quot;&gt;&lt;a href=&quot;#01学科门类：哲学-（所有门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;01学科门类：哲学 （所有门类不考虑）&quot;&gt;&lt;/a&gt;01学科门类：哲学 &lt;font color=&quot;blue&quot;&gt;（所有门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;h3 id=&quot;02学科门类：经济学-（所有门类可选）&quot;&gt;&lt;a href=&quot;#02学科门类：经济学-（所有门类可选）&quot; class=&quot;headerlink&quot; title=&quot;02学科门类：经济学  （所有门类可选）&quot;&gt;&lt;/a&gt;02学科门类：经济学  &lt;font color=&quot;red&quot;&gt;（所有门类可选）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; 0201 经济学类 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 020101 经济学

* 020102 经济统计学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0202 财政学类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 020201K 财政学

* 020202 税收学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0203 金融学类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 020301K 金融学

* 020302 金融工程

* 020303 保险学

* 020304 投资学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0204 经济与贸易类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 020401 国际经济与贸易

* 020402 贸易经济
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;03学科门类：法学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#03学科门类：法学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;03学科门类：法学  （其他门类不考虑）&quot;&gt;&lt;/a&gt;03学科门类：法学  &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;030101K 法学 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;04学科门类：教育学-（所有门类不考虑）&quot;&gt;&lt;a href=&quot;#04学科门类：教育学-（所有门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;04学科门类：教育学  （所有门类不考虑）&quot;&gt;&lt;/a&gt;04学科门类：教育学  &lt;font color=&quot;blue&quot;&gt;（所有门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;h3 id=&quot;05学科门类：文学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#05学科门类：文学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;05学科门类：文学  （其他门类不考虑）&quot;&gt;&lt;/a&gt;05学科门类：文学  &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;0502 外国语言文学类 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;0503 新闻传播学类 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;050301 新闻学

050302 广播电视学

050303 广告学

050304 传播学

050305 编辑出版学
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;06学科门类：历史学-（所有门类不考虑）&quot;&gt;&lt;a href=&quot;#06学科门类：历史学-（所有门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;06学科门类：历史学  （所有门类不考虑）&quot;&gt;&lt;/a&gt;06学科门类：历史学  &lt;font color=&quot;blue&quot;&gt;（所有门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;h3 id=&quot;07学科门类：理学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#07学科门类：理学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;07学科门类：理学  （其他门类不考虑）&quot;&gt;&lt;/a&gt;07学科门类：理学  &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;0701 数学类  &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;070101 数学与应用数学

070102 信息与计算科学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0712 统计学类 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;071201 统计学

071202 应用统计学
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;08学科门类：工学-（全部门类可选，分程度）&quot;&gt;&lt;a href=&quot;#08学科门类：工学-（全部门类可选，分程度）&quot; class=&quot;headerlink&quot; title=&quot;08学科门类：工学 （全部门类可选，分程度）&quot;&gt;&lt;/a&gt;08学科门类：工学 &lt;font color=&quot;red&quot;&gt;（全部门类可选，分程度）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;0801 力学类  &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080101 理论与应用力学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0802 机械类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080201 机械工程

080202 机械设计制造及其自动化

080203 材料成型及控制工程

080204 机械电子工程

080205 工业设计

080206 过程装备与控制工程

080207 车辆工程

080208 汽车服务工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0803 仪器类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080301 测控技术与仪器
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0804 材料类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080401 材料科学与工程

080402 材料物理（注：可授工学或理学学士学位）

080403 材料化学（注：可授工学或理学学士学位）

080404 冶金工程

080405 金属材料工程

080406 无机非金属材料工程

080407 高分子材料与工程

080408 复合材料与工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0805 能源动力类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080501 能源与动力工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0806 电气类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080601 电气工程及其自动化
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0807 电子信息类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080701 电子信息工程（注：可授工学或理学学士学位）

080702 电子科学与技术（注：可授工学或理学学士学位）

080703 通信工程

080704 微电子科学与工程（注：可授工学或理学学士学位）

080705光电信息科学与工程（注：可授工学或理学学士学位）

080706 信息工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0808 自动化类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080801 自动化
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0809 计算机类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080901 计算机科学与技术（注：可授工学或理学学士学位）

080902 软件工程

080903 网络工程

080904K 信息安全（注：可授工学或理学或管理学学士学位）

080905 物联网工程

080906 数字媒体技术
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0810 土木类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081001 土木工程

081002 建筑环境与能源应用工程

081003 给排水科学与工程

081004 建筑电气与智能化
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0811 水利类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081101 水利水电工程

081102 水文与水资源工程

081103 港口航道与海岸工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0812 测绘类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081201 测绘工程

081202 遥感科学与技术
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0813 化工与制药类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081301 化学工程与工艺

081302 制药工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0814 地质类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081401 地质工程

081402 勘查技术与工程

081403 资源勘查工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0815 矿业类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081501 采矿工程

081502 石油工程

081503 矿物加工工程

081504 油气储运工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0816 纺织类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081601 纺织工程

081602 服装设计与工程（注：可授工学或艺术学学士学位）
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0817 轻工类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081701 轻化工程

081702 包装工程

081703 印刷工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0818 交通运输类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081801 交通运输

081802 交通工程

081803K 航海技术

081804K 轮机工程

081805K 飞行技术
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0819 海洋工程类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081901 船舶与海洋工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0820 航空航天类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082001 航空航天工程

082002 飞行器设计与工程

082003 飞行器制造工程

082004 飞行器动力工程

082005 飞行器环境与生命保障工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0821 兵器类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082101 武器系统与工程

082102 武器发射工程

082103 探测制导与控制技术

082104 弹药工程与爆炸技术

082105 特种能源技术与工程

082106 装甲车辆工程

082107 信息对抗技术
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0822 核工程类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082201 核工程与核技术

082202 辐射防护与核安全

082203 工程物理

082204 核化工与核燃料工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0823 农业工程类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082301 农业工程

082302 农业机械化及其自动化

082303 农业电气化

082304 农业建筑环境与能源工程

082305 农业水利工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0824 林业工程类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082401 森林工程

082402 木材科学与工程

082403 林产化工
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0825 环境科学与工程类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082501 环境科学与工程

082502 环境工程

082503 环境科学（注：可授工学或理学学士学位）

082504 环境生态工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0826 生物医学工程类&lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082601 生物医学工程（注：可授工学或理学学士学位）
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0827 食品科学与工程类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082701 食品科学与工程（注：可授工学或农学学士学位）

082702 食品质量与安全

082703 粮食工程

082704 乳品工程

082705 酿酒工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0828 建筑类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082801 建筑学

082802 城乡规划

082803 风景园林（注：可授工学或艺术学学士学位）
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0829 安全科学与工程类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082901 安全工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0830 生物工程类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;083001 生物工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0831 公安技术类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;083101K 刑事科学技术

083102K 消防工程
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;09学科门类：农学-（所有门类不考虑）&quot;&gt;&lt;a href=&quot;#09学科门类：农学-（所有门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;09学科门类：农学 （所有门类不考虑）&quot;&gt;&lt;/a&gt;09学科门类：农学 &lt;font color=&quot;blue&quot;&gt;（所有门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;h3 id=&quot;10学科门类：医学-（所有门类可考虑，分程度）&quot;&gt;&lt;a href=&quot;#10学科门类：医学-（所有门类可考虑，分程度）&quot; class=&quot;headerlink&quot; title=&quot;10学科门类：医学 （所有门类可考虑，分程度）&quot;&gt;&lt;/a&gt;10学科门类：医学 &lt;font color=&quot;red&quot;&gt;（所有门类可考虑，分程度）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1001 基础医学类  &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100101K 基础医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1002 临床医学类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100201K 临床医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1003 口腔医学类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100301K 口腔医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1004 公共卫生与预防医学类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100401K 预防医学

100402 食品卫生与营养学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1005 其次医学类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100501K 其次医学

100502K 针灸推拿学

100503K 藏医学

100504K 蒙医学

100505K 维医学

100506K 壮医学

100507K 哈医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1006 其次西医结合类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100601K 其次西医临床医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1007 药学类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt; 100701 药学

100702 药物制剂
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1008 其次药学类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100801 其次药学

100802 其次药资源与开发
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1009 法医学类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;1010 医学技术类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;101001 医学检验技术

101002 医学实验技术

101003 医学影像技术

101004 眼视光学

101005 康复治疗学

101006 口腔医学技术

101007 卫生检验与检疫
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1011 护理学类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;101101 护理学
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;12学科门类：管理学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#12学科门类：管理学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;12学科门类：管理学 （其他门类不考虑）&quot;&gt;&lt;/a&gt;12学科门类：管理学 &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1201 管理科学与工程类  &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;120101 管理科学

120102 信息管理与信息系统

120103 工程管理

120104 房地产开发与管理

120105 工程造价
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1202 工商管理类  &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;120201K 工商管理

120202 市场营销

120203K 会计学

120204 财务管理

120205 国际商务

120206 人力资源管理

120207 审计学

120208 资产评估
120209 物业管理

120210 文化产业管理
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;13学科门类：艺术学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#13学科门类：艺术学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;13学科门类：艺术学   （其他门类不考虑）&quot;&gt;&lt;/a&gt;13学科门类：艺术学   &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1305 设计学类 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;130501 艺术设计学

130502 视觉传达设计

130503 环境设计

130504 产品设计

130505 服装与服饰设计

130506 公共艺术

130507 工艺美术

130508 数字媒体艺术
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;普通高校本科专业选择推荐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;此文针对我表弟16年重庆高考就读普通大学本科专
    
    </summary>
    
    
      <category term="随笔小结" scheme="http://xuzichao.com/tags/%E9%9A%8F%E7%AC%94%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>iweb 峰会</title>
    <link href="http://xuzichao.com/2016/05/12/iweb%20%E5%B3%B0%E4%BC%9A/"/>
    <id>http://xuzichao.com/2016/05/12/iweb 峰会/</id>
    <published>2016-05-12T11:09:59.000Z</published>
    <updated>2017-09-05T07:09:34.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;16年的时候，赶上周末去参加了一趟北京的iweb峰会，会上来自各个公司的人分享和宣传自己的产品和技术，我作为一名普通开发者的角度去听大会，并了解和记录当前的一些技术发展。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、主题峰会-9-00-–-12-00&quot;&gt;&lt;a href=&quot;#一、主题峰会-9-00-–-12-00&quot; class=&quot;headerlink&quot; title=&quot;一、主题峰会 9:00 – 12:00&quot;&gt;&lt;/a&gt;一、主题峰会 9:00 – 12:00&lt;/h2&gt;&lt;h4 id=&quot;1、主持人开场-–-田爱娜-HTML5梦工场-创始人&quot;&gt;&lt;a href=&quot;#1、主持人开场-–-田爱娜-HTML5梦工场-创始人&quot; class=&quot;headerlink&quot; title=&quot;1、主持人开场    – 田爱娜 HTML5梦工场  创始人&quot;&gt;&lt;/a&gt;1、主持人开场    – 田爱娜 HTML5梦工场  创始人&lt;/h4&gt;&lt;p&gt;HTML5梦工场是中国最有影响力的技术社区团队，由国内最早一批HTML5探索者和狂热拥护者发起，为广大开发者搭建一个开放、自由的互动交流平台，旨在推动HTML5在中国的应用与普及。“梦工场”也被誉为最接地气的草根公益组织。&lt;/p&gt;
&lt;h4 id=&quot;2、HTML5发行的力量-–-凌海-蝴蝶互动-CEO&quot;&gt;&lt;a href=&quot;#2、HTML5发行的力量-–-凌海-蝴蝶互动-CEO&quot; class=&quot;headerlink&quot; title=&quot;2、HTML5发行的力量    – 凌海  蝴蝶互动  CEO&quot;&gt;&lt;/a&gt;2、HTML5发行的力量    – 凌海  蝴蝶互动  CEO&lt;/h4&gt;&lt;p&gt;公司的创始人凌海、王峰都来自于中国互联网上市公司核心高管，有业界极为丰富的互联网产品经验和创新精神。凌海曾任盛大集团高级副总裁，盛大游戏总 裁，韩国上市公司ACTOZ董事长。王峰曾任盛大游戏技术副总裁。&lt;br&gt;《传世H5》工作室组建于2015年初，由策划团队、美术团队、技术研发团队、运营团队、测试团队等组成。&lt;br&gt;除了《传世H5》蝴蝶互动又相继推出了《鬼吹灯》、《天天赚钱》、《蛮荒创世》等优秀的HTML5游戏，收到用户和业界的不断好评，之后蝴蝶互动即将推出《武 神》、《鹿鼎记》等。&lt;/p&gt;
&lt;h4 id=&quot;3、天下武功，唯快不破-–-陈书艺-白鹭时代-CEO&quot;&gt;&lt;a href=&quot;#3、天下武功，唯快不破-–-陈书艺-白鹭时代-CEO&quot; class=&quot;headerlink&quot; title=&quot;3、天下武功，唯快不破 – 陈书艺 白鹭时代  CEO&quot;&gt;&lt;/a&gt;3、天下武功，唯快不破 – 陈书艺 白鹭时代  CEO&lt;/h4&gt;&lt;p&gt;白鹭移动游戏解决方案包含白鹭引擎、工具和白鹭开放平台，提供从游戏开发、上线到商业化运营的一站式免费服务。白鹭引擎（Egret Engine）、HTML5加速器(Egret Runtime)、骨骼动画工具(Dragon Bones)、可视化编辑器(Egret Wing)等共计14款核心产品，可以帮助开发者高效地开发出HTML5游戏。白鹭开放平台联动开发者、发行商、渠道商、第三方服务商，让HTML5游戏实现了从开发、上线到商业化运营生态连线，并且让所有技术服务和商业化服务，得以落地。案例：围住神经猫、访问量三天过亿&lt;/p&gt;
&lt;h4 id=&quot;4、-社交生态下的HTML5游戏新契-–-王哲-触控科技副总裁&quot;&gt;&lt;a href=&quot;#4、-社交生态下的HTML5游戏新契-–-王哲-触控科技副总裁&quot; class=&quot;headerlink&quot; title=&quot;4、    社交生态下的HTML5游戏新契 – 王哲 触控科技副总裁&quot;&gt;&lt;/a&gt;4、    社交生态下的HTML5游戏新契 – 王哲 触控科技副总裁&lt;/h4&gt;&lt;p&gt;公司起步于2008年初创建的CocoaChina社区，专注于苹果产品和iOS系统开发。2010年11月12日触控科技正式组建团队，并在之后2年间获得北极光、迪士尼思伟创投、红杉创投以及纪源资本（GGV）的风险投资，融资总规模3200万美金。2011年凭借一款《捕鱼达人》游戏一战成名。&lt;/p&gt;
&lt;h4 id=&quot;5、-HTML5和Docker容器如何重构和颠覆应用产业-–-李明-很快-创始人兼CEO&quot;&gt;&lt;a href=&quot;#5、-HTML5和Docker容器如何重构和颠覆应用产业-–-李明-很快-创始人兼CEO&quot; class=&quot;headerlink&quot; title=&quot;5、 HTML5和Docker容器如何重构和颠覆应用产业 – 李明 很快  创始人兼CEO&quot;&gt;&lt;/a&gt;5、 HTML5和Docker容器如何重构和颠覆应用产业 – 李明 很快  创始人兼CEO&lt;/h4&gt;&lt;h4 id=&quot;6、WeX5移动开发云-马科-CEO&quot;&gt;&lt;a href=&quot;#6、WeX5移动开发云-马科-CEO&quot; class=&quot;headerlink&quot; title=&quot;6、WeX5移动开发云 马科 CEO&quot;&gt;&lt;/a&gt;6、WeX5移动开发云 马科 CEO&lt;/h4&gt;&lt;p&gt;WeX5开发H5 app，遵循Apache开源协议，完全开源免费，上百个组件框架，全部开放，可视化的组件框架，开发者可自定义组件，集成第三方组件，采用MVC设计模式，数据和视图分离，页面描述和代码逻辑分离，支持浏览器调试、真机调试、原生调试，等多种调试模式，开发者可掌握每一行代码。WeX5一直坚持采用H5+CSS3+JS标准技术，一次开发，多端任意部署.&lt;/p&gt;
&lt;h4 id=&quot;7、-Web-前端的实时化-–-江小丹-英特尔-Web技术研发总监&quot;&gt;&lt;a href=&quot;#7、-Web-前端的实时化-–-江小丹-英特尔-Web技术研发总监&quot; class=&quot;headerlink&quot; title=&quot;7、 Web 前端的实时化 – 江小丹 英特尔  Web技术研发总监&quot;&gt;&lt;/a&gt;7、 Web 前端的实时化 – 江小丹 英特尔  Web技术研发总监&lt;/h4&gt;&lt;h4 id=&quot;8、移动互联网下半场，不用好HTML5将无法生存-–-肖光宇-野狗实时后端云-联合创始人&quot;&gt;&lt;a href=&quot;#8、移动互联网下半场，不用好HTML5将无法生存-–-肖光宇-野狗实时后端云-联合创始人&quot; class=&quot;headerlink&quot; title=&quot;8、移动互联网下半场，不用好HTML5将无法生存 – 肖光宇 野狗实时后端云  联合创始人&quot;&gt;&lt;/a&gt;8、移动互联网下半场，不用好HTML5将无法生存 – 肖光宇 野狗实时后端云  联合创始人&lt;/h4&gt;&lt;p&gt;实时通信—包括消息订阅，推送，双向通信等功能。网络延迟小，服务响应速度快，API简单易用。&lt;br&gt;数据存储—提供了一个Key-Value的云端数据存储，直接通过API就可以对数据进行存取操作。操作简单，按需扩展。&lt;/p&gt;
&lt;h4 id=&quot;9、-H5游戏进入精品新时代-—-王安-Dcloud-CEO&quot;&gt;&lt;a href=&quot;#9、-H5游戏进入精品新时代-—-王安-Dcloud-CEO&quot; class=&quot;headerlink&quot; title=&quot;9、 H5游戏进入精品新时代 — 王安 Dcloud CEO&quot;&gt;&lt;/a&gt;9、 H5游戏进入精品新时代 — 王安 Dcloud CEO&lt;/h4&gt;&lt;p&gt;DCloud面向HTML5行业分别推出了开发工具HBuilder、手机强化引擎5+ Runtime、跨平台前端框架mui、应用发行产品流应用，通过系列产品对HTML5的强化支持，使得HTML5能达到原生的功能和体验，同时在发行上更优于原生应用。&lt;/p&gt;
&lt;p&gt;类似 : APICloud&lt;/p&gt;
&lt;h4 id=&quot;10-、谢成鸿-LayaBox-CEO&quot;&gt;&lt;a href=&quot;#10-、谢成鸿-LayaBox-CEO&quot; class=&quot;headerlink&quot; title=&quot;10 、谢成鸿 LayaBox  CEO&quot;&gt;&lt;/a&gt;10 、谢成鸿 LayaBox  CEO&lt;/h4&gt;&lt;p&gt;Layabox是HTML5引擎之一，引擎以HTML5技术为核心，定位于全平台的高性能引擎，让游戏开发者一次开发，可同时发布APP、HTML5、VR、Flash版本。开发语言支持Flash AS3、JavaScript、TypeScript三种，让开发者人才选择范围更广泛。引擎核心库仅100K左右，除了大型游戏和小型游戏、还可以用于HTML5应用、APP、广告、营销、教育、3D、VR等众多领域。另外，LayaPlayer运行器移动设备安装量覆盖超5亿，帮助Layabox引擎的开发者进行产品发行。&lt;br&gt;  Layabox是Laya中国实验室历经4年倾力打造的全球顶级HTML5技术框架，核心产品包括：Flash开发H5的框架（LayaFlash）、多语言H5开发引擎（LayaAir）、H5运行器（LayaPlayer）、嵌入式H5应用商店（LayaStore）。&lt;/p&gt;
&lt;h2 id=&quot;二、应用工具专场1-13：30-–-17：00&quot;&gt;&lt;a href=&quot;#二、应用工具专场1-13：30-–-17：00&quot; class=&quot;headerlink&quot; title=&quot;二、应用工具专场1 13：30 – 17：00&quot;&gt;&lt;/a&gt;二、应用工具专场1 13：30 – 17：00&lt;/h2&gt;&lt;h4 id=&quot;1、HTML5-App开发云实践-基于完全开源的WeX5开发框架&quot;&gt;&lt;a href=&quot;#1、HTML5-App开发云实践-基于完全开源的WeX5开发框架&quot; class=&quot;headerlink&quot; title=&quot;1、HTML5 App开发云实践-基于完全开源的WeX5开发框架&quot;&gt;&lt;/a&gt;1、HTML5 App开发云实践-基于完全开源的WeX5开发框架&lt;/h4&gt;&lt;p&gt;王洁 WeX5  首席技术运营&lt;/p&gt;
&lt;h4 id=&quot;2、-Web技术推进多样化人机交互方式&quot;&gt;&lt;a href=&quot;#2、-Web技术推进多样化人机交互方式&quot; class=&quot;headerlink&quot; title=&quot;2、 Web技术推进多样化人机交互方式&quot;&gt;&lt;/a&gt;2、 Web技术推进多样化人机交互方式&lt;/h4&gt;&lt;p&gt;吴栋霞 英特尔  软件工程师&lt;/p&gt;
&lt;h4 id=&quot;3、-Yo-去哪儿移动UI框架&quot;&gt;&lt;a href=&quot;#3、-Yo-去哪儿移动UI框架&quot; class=&quot;headerlink&quot; title=&quot;3、 Yo-去哪儿移动UI框架&quot;&gt;&lt;/a&gt;3、 Yo-去哪儿移动UI框架&lt;/h4&gt;&lt;p&gt;杜瑶 去哪儿网  前端开发总监&lt;/p&gt;
&lt;h4 id=&quot;4、-手机QQ-React-Web极致优化&quot;&gt;&lt;a href=&quot;#4、-手机QQ-React-Web极致优化&quot; class=&quot;headerlink&quot; title=&quot;4、 手机QQ React Web极致优化&quot;&gt;&lt;/a&gt;4、 手机QQ React Web极致优化&lt;/h4&gt;&lt;p&gt;李成熙 腾讯AlloyTeam  前端工程师&lt;/p&gt;
&lt;h4 id=&quot;5、-手机淘宝营销互动页面最佳实践&quot;&gt;&lt;a href=&quot;#5、-手机淘宝营销互动页面最佳实践&quot; class=&quot;headerlink&quot; title=&quot;5、 手机淘宝营销互动页面最佳实践&quot;&gt;&lt;/a&gt;5、 手机淘宝营销互动页面最佳实践&lt;/h4&gt;&lt;p&gt;黄华健  阿里巴巴  前端工程师&lt;/p&gt;
&lt;h4 id=&quot;6、大型SPA的复杂工程如何化简&quot;&gt;&lt;a href=&quot;#6、大型SPA的复杂工程如何化简&quot; class=&quot;headerlink&quot; title=&quot;6、大型SPA的复杂工程如何化简&quot;&gt;&lt;/a&gt;6、大型SPA的复杂工程如何化简&lt;/h4&gt;&lt;p&gt;陈恺睿 小米  高级前端工程师&lt;/p&gt;
&lt;h4 id=&quot;7、-UC前端业务套件体系&quot;&gt;&lt;a href=&quot;#7、-UC前端业务套件体系&quot; class=&quot;headerlink&quot; title=&quot;7、 UC前端业务套件体系&quot;&gt;&lt;/a&gt;7、 UC前端业务套件体系&lt;/h4&gt;&lt;p&gt;三桥 阿里巴巴UC移动事业群  高级前端工程师&lt;/p&gt;
&lt;h2 id=&quot;三、应用工具专场2-13：30-–-17：00&quot;&gt;&lt;a href=&quot;#三、应用工具专场2-13：30-–-17：00&quot; class=&quot;headerlink&quot; title=&quot;三、应用工具专场2 13：30 – 17：00&quot;&gt;&lt;/a&gt;三、应用工具专场2 13：30 – 17：00&lt;/h2&gt;&lt;h4 id=&quot;1、Web-Components-—-Web-前端开发的未来趋势&quot;&gt;&lt;a href=&quot;#1、Web-Components-—-Web-前端开发的未来趋势&quot; class=&quot;headerlink&quot; title=&quot;1、Web Components — Web 前端开发的未来趋势&quot;&gt;&lt;/a&gt;1、Web Components — Web 前端开发的未来趋势&lt;/h4&gt;&lt;p&gt;1、陈本峰 云适配  创始人兼CEO&lt;/p&gt;
&lt;p&gt;云适配由前微软美国总部专家、美通云动（北京）科技公司CEO陈本峰在美国西雅图研发，只需在原网站中插入一行代码，即能创建移动化网站，并实现网址不变、内容实时更新，它颠覆了传统手工移动网站建设模式，可快速打开移动营销六大入口。&lt;/p&gt;
&lt;p&gt;2、 web  Components : &lt;/p&gt;
&lt;p&gt;组件化给前端开发带来了极大的效率提升，组件化的UI框架也因此层出不穷，从EXTJs、YUI到 jQuery UI ，再到 Bootstrap、React、Ratchet、Ionic等等等等等等，几乎每年都有很多新的UI框架冒出来，它们或者借鉴或者颠覆其他已存在的框架。简单对比一下就会发现这些框架的很大一部分模块在功能上是重合的，但也仅仅在功能层面重合，代码层面确完全不兼容。&lt;/p&gt;
&lt;p&gt;Web Components 的出现给组件标准化带来了很好的契机：&lt;/p&gt;
&lt;p&gt;WEB组件目前仍然依靠各种类似”Hack”的方式来模拟，模拟方式也各有不同，很难统一和标准化，而 Web Components 则直接提供了标准化的组件定义方式，这是组件标准化的基石，使得未来的组件能够统一创建、方法调用、事件监听、属性访问等。&lt;br&gt;基于标准化的组件定义方式，我们便可以像W3C等标准组织一样来定义组件标准，无需再依赖、等待“内置”组件，这也使得我们获得了“渔”的能力&lt;/p&gt;
&lt;h4 id=&quot;2、语音智能与H5的结合&quot;&gt;&lt;a href=&quot;#2、语音智能与H5的结合&quot; class=&quot;headerlink&quot; title=&quot;2、语音智能与H5的结合&quot;&gt;&lt;/a&gt;2、语音智能与H5的结合&lt;/h4&gt;&lt;p&gt;陈家军 科大讯飞  云平台事业部研发主管&lt;/p&gt;
&lt;h4 id=&quot;3、-浅析HTML5中的无障碍标签及用处&quot;&gt;&lt;a href=&quot;#3、-浅析HTML5中的无障碍标签及用处&quot; class=&quot;headerlink&quot; title=&quot;3、 浅析HTML5中的无障碍标签及用处&quot;&gt;&lt;/a&gt;3、 浅析HTML5中的无障碍标签及用处&lt;/h4&gt;&lt;p&gt;张昆 中国信息无障碍产品联盟  首席专家&lt;/p&gt;
&lt;h4 id=&quot;4、HTML5多屏互动平台实践&quot;&gt;&lt;a href=&quot;#4、HTML5多屏互动平台实践&quot; class=&quot;headerlink&quot; title=&quot;4、HTML5多屏互动平台实践&quot;&gt;&lt;/a&gt;4、HTML5多屏互动平台实践&lt;/h4&gt;&lt;p&gt;苏震巍 苏州盛派网络  CEO&lt;/p&gt;
&lt;h4 id=&quot;5、iWeb-议题：Weex-开发者工具探究&quot;&gt;&lt;a href=&quot;#5、iWeb-议题：Weex-开发者工具探究&quot; class=&quot;headerlink&quot; title=&quot;5、iWeb 议题：Weex 开发者工具探究&quot;&gt;&lt;/a&gt;5、iWeb 议题：Weex 开发者工具探究&lt;/h4&gt;&lt;p&gt;勾三股四（阿里巴巴 前端工程师）、梧叶（阿里巴巴 高级技术专家）&lt;/p&gt;
&lt;p&gt;手淘和天猫曾经尝试过React Native，然后放弃了。但是把它的思想吸收过来，结合Web Component和Vue.js，然后就成了Weex.&lt;/p&gt;
&lt;h4 id=&quot;6、小米应用商店Hybrid性能优化实践&quot;&gt;&lt;a href=&quot;#6、小米应用商店Hybrid性能优化实践&quot; class=&quot;headerlink&quot; title=&quot;6、小米应用商店Hybrid性能优化实践&quot;&gt;&lt;/a&gt;6、小米应用商店Hybrid性能优化实践&lt;/h4&gt;&lt;p&gt;杨伟贤 小米  高级前端工程师&lt;/p&gt;
&lt;h4 id=&quot;7、Vue-js从入门到上线&quot;&gt;&lt;a href=&quot;#7、Vue-js从入门到上线&quot; class=&quot;headerlink&quot; title=&quot;7、Vue.js从入门到上线&quot;&gt;&lt;/a&gt;7、Vue.js从入门到上线&lt;/h4&gt;&lt;p&gt;陈陆扬 精雕细课  前端负责人&lt;/p&gt;
&lt;h2 id=&quot;四、游戏专场1-13：30-–-17：00&quot;&gt;&lt;a href=&quot;#四、游戏专场1-13：30-–-17：00&quot; class=&quot;headerlink&quot; title=&quot;四、游戏专场1 13：30 – 17：00&quot;&gt;&lt;/a&gt;四、游戏专场1 13：30 – 17：00&lt;/h2&gt;&lt;h4 id=&quot;1、文学连接游戏-阅文集团“泛娱乐2-0”迎接H5领域新时代&quot;&gt;&lt;a href=&quot;#1、文学连接游戏-阅文集团“泛娱乐2-0”迎接H5领域新时代&quot; class=&quot;headerlink&quot; title=&quot;1、文学连接游戏 阅文集团“泛娱乐2.0”迎接H5领域新时代&quot;&gt;&lt;/a&gt;1、文学连接游戏 阅文集团“泛娱乐2.0”迎接H5领域新时代&lt;/h4&gt;&lt;p&gt;朱靖 阅文集团  副总裁&lt;/p&gt;
&lt;p&gt;腾讯COO任宇昕与副总裁程武宣布正式成立阅文集团，统一管理和运营原本属于盛大文学和腾讯文学旗下的起点中文网、创世中文网、小说阅读网、潇湘书院、红袖添香、云起书院、榕树下、QQ阅读、中智博文、华文天下等网文品牌。&lt;/p&gt;
&lt;h4 id=&quot;2、Cocos-Creator：全面提升-H5-游戏的开发和运行速度&quot;&gt;&lt;a href=&quot;#2、Cocos-Creator：全面提升-H5-游戏的开发和运行速度&quot; class=&quot;headerlink&quot; title=&quot;2、Cocos Creator：全面提升 H5 游戏的开发和运行速度&quot;&gt;&lt;/a&gt;2、Cocos Creator：全面提升 H5 游戏的开发和运行速度&lt;/h4&gt;&lt;p&gt;王楠 触控科技  产品总监&lt;/p&gt;
&lt;p&gt;Cocos Creator 是以内容创作为核心的游戏开发工具，在 Cocos2d-x 基础上实现了彻底脚本化、组件化和数据驱动等特点&lt;/p&gt;
&lt;h4 id=&quot;3、快创互娱，人人都是HTML5游戏创想家&quot;&gt;&lt;a href=&quot;#3、快创互娱，人人都是HTML5游戏创想家&quot; class=&quot;headerlink&quot; title=&quot;3、快创互娱，人人都是HTML5游戏创想家&quot;&gt;&lt;/a&gt;3、快创互娱，人人都是HTML5游戏创想家&lt;/h4&gt;&lt;p&gt;段会锋 快创互娱  合伙人兼技术副总&lt;/p&gt;
&lt;p&gt;快创互娱是由大连文森软件特科技有限公司设计开发的一款HTML5在线开发平台。快创互娱是一款可视化、零代码、拖拽式编程的在线开发平台，基于HTML5及MIT开源协议，具有跨平台的强大性能。使用者可通过鼠标拖拽的简单方法，创造属于自己的故事、动画、游戏、课件，同时一键分享，轻松将作品上传至网络。&lt;/p&gt;
&lt;h4 id=&quot;4、Yahoo-Y5平台飛躍出海、強勢出航！&quot;&gt;&lt;a href=&quot;#4、Yahoo-Y5平台飛躍出海、強勢出航！&quot; class=&quot;headerlink&quot; title=&quot;4、Yahoo Y5平台飛躍出海、強勢出航！&quot;&gt;&lt;/a&gt;4、Yahoo Y5平台飛躍出海、強勢出航！&lt;/h4&gt;&lt;p&gt;赖俊光 Yahoo台湾与香港游戏频道   负责人&lt;/p&gt;
&lt;h4 id=&quot;5、发行和渠道为什么推那个产品&quot;&gt;&lt;a href=&quot;#5、发行和渠道为什么推那个产品&quot; class=&quot;headerlink&quot; title=&quot;5、发行和渠道为什么推那个产品&quot;&gt;&lt;/a&gt;5、发行和渠道为什么推那个产品&lt;/h4&gt;&lt;p&gt;李力维 独角兽游戏  CEO&lt;/p&gt;
&lt;h4 id=&quot;6、腾讯浏览服务，鼎力服务H5游戏生态&quot;&gt;&lt;a href=&quot;#6、腾讯浏览服务，鼎力服务H5游戏生态&quot; class=&quot;headerlink&quot; title=&quot;6、腾讯浏览服务，鼎力服务H5游戏生态&quot;&gt;&lt;/a&gt;6、腾讯浏览服务，鼎力服务H5游戏生态&lt;/h4&gt;&lt;p&gt;魏晓海 腾讯浏览器  内核开发总监技术专家&lt;/p&gt;
&lt;h4 id=&quot;7、H5游戏2-0时代到来&quot;&gt;&lt;a href=&quot;#7、H5游戏2-0时代到来&quot; class=&quot;headerlink&quot; title=&quot;7、H5游戏2.0时代到来&quot;&gt;&lt;/a&gt;7、H5游戏2.0时代到来&lt;/h4&gt;&lt;p&gt;姬海江 交叉点  CEO   一个外包公司&lt;/p&gt;
&lt;h2 id=&quot;五、游戏专场2-13：30-–-17：00&quot;&gt;&lt;a href=&quot;#五、游戏专场2-13：30-–-17：00&quot; class=&quot;headerlink&quot; title=&quot;五、游戏专场2 13：30 – 17：00&quot;&gt;&lt;/a&gt;五、游戏专场2 13：30 – 17：00&lt;/h2&gt;&lt;h4 id=&quot;1、约三端，战未来&quot;&gt;&lt;a href=&quot;#1、约三端，战未来&quot; class=&quot;headerlink&quot; title=&quot;1、约三端，战未来&quot;&gt;&lt;/a&gt;1、约三端，战未来&lt;/h4&gt;&lt;p&gt;汪阔 Layabox  技术副总裁&lt;/p&gt;
&lt;h4 id=&quot;2、《小小战争》的设计经验分享&quot;&gt;&lt;a href=&quot;#2、《小小战争》的设计经验分享&quot; class=&quot;headerlink&quot; title=&quot;2、《小小战争》的设计经验分享&quot;&gt;&lt;/a&gt;2、《小小战争》的设计经验分享&lt;/h4&gt;&lt;p&gt;李瑞峰 圣堂科技  CEO     H5策略游戏&lt;/p&gt;
&lt;h4 id=&quot;3、H5游戏的未来发展&quot;&gt;&lt;a href=&quot;#3、H5游戏的未来发展&quot; class=&quot;headerlink&quot; title=&quot;3、H5游戏的未来发展&quot;&gt;&lt;/a&gt;3、H5游戏的未来发展&lt;/h4&gt;&lt;p&gt;赵鹏 横石科技  副总裁 在线网页游戏《弑沙》&lt;/p&gt;
&lt;h4 id=&quot;4、Lie-to-Me—聊聊HTML5多人实时在线游戏的优化&quot;&gt;&lt;a href=&quot;#4、Lie-to-Me—聊聊HTML5多人实时在线游戏的优化&quot; class=&quot;headerlink&quot; title=&quot;4、Lie to Me—聊聊HTML5多人实时在线游戏的优化&quot;&gt;&lt;/a&gt;4、Lie to Me—聊聊HTML5多人实时在线游戏的优化&lt;/h4&gt;&lt;p&gt;大城小胖  自由程序员 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://weibo.com/finscn?is_hot=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://weibo.com/finscn?is_hot=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/finscn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/finscn&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;5、强化渠道产品联动，升级用户游戏体验&quot;&gt;&lt;a href=&quot;#5、强化渠道产品联动，升级用户游戏体验&quot; class=&quot;headerlink&quot; title=&quot;5、强化渠道产品联动，升级用户游戏体验&quot;&gt;&lt;/a&gt;5、强化渠道产品联动，升级用户游戏体验&lt;/h4&gt;&lt;p&gt;林玮 北京游琥科技  副总经理&lt;/p&gt;
&lt;h4 id=&quot;6、从市场角度分析H5游戏该如何立项&quot;&gt;&lt;a href=&quot;#6、从市场角度分析H5游戏该如何立项&quot; class=&quot;headerlink&quot; title=&quot;6、从市场角度分析H5游戏该如何立项&quot;&gt;&lt;/a&gt;6、从市场角度分析H5游戏该如何立项&lt;/h4&gt;&lt;p&gt;谭德文 上海越山科技  CEO&lt;/p&gt;
&lt;h4 id=&quot;7、H5游戏的困境和破局&quot;&gt;&lt;a href=&quot;#7、H5游戏的困境和破局&quot; class=&quot;headerlink&quot; title=&quot;7、H5游戏的困境和破局&quot;&gt;&lt;/a&gt;7、H5游戏的困境和破局&lt;/h4&gt;&lt;p&gt;黄加阳 9G游戏  CEO&lt;/p&gt;
&lt;h2 id=&quot;六、数字营销专场-13：30-–-17：00&quot;&gt;&lt;a href=&quot;#六、数字营销专场-13：30-–-17：00&quot; class=&quot;headerlink&quot; title=&quot;六、数字营销专场 13：30 – 17：00&quot;&gt;&lt;/a&gt;六、数字营销专场 13：30 – 17：00&lt;/h2&gt;&lt;h4 id=&quot;1、后营销时代：借H5实现“移动互联网&quot;&gt;&lt;a href=&quot;#1、后营销时代：借H5实现“移动互联网&quot; class=&quot;headerlink&quot; title=&quot;1、后营销时代：借H5实现“移动互联网+&quot;&gt;&lt;/a&gt;1、后营销时代：借H5实现“移动互联网+&lt;/h4&gt;&lt;p&gt;张翔 白鹭时代、青雀移动  联合创始人、总经理&lt;/p&gt;
&lt;h4 id=&quot;2、-共享创赢移动网页大平台&quot;&gt;&lt;a href=&quot;#2、-共享创赢移动网页大平台&quot; class=&quot;headerlink&quot; title=&quot;2、    共享创赢移动网页大平台&quot;&gt;&lt;/a&gt;2、    共享创赢移动网页大平台&lt;/h4&gt;&lt;p&gt;马岳 Google  商业合作部行业总监&lt;/p&gt;
&lt;h4 id=&quot;3、-裂变·营销闭环·H5生态&quot;&gt;&lt;a href=&quot;#3、-裂变·营销闭环·H5生态&quot; class=&quot;headerlink&quot; title=&quot;3、    裂变·营销闭环·H5生态&quot;&gt;&lt;/a&gt;3、    裂变·营销闭环·H5生态&lt;/h4&gt;&lt;p&gt;刘旭 易企秀  联合创始人兼副总裁&lt;/p&gt;
&lt;p&gt;易企秀是一款针对移动互联网营销的手机幻灯片、H5场景应用制作工具，将原来只能在PC端制作和展示的各类复杂营销方案转移到更为便携和展示的手机上，用户随时随地根据自己的需要在PC端、手机端进行制作和展示，随时随地营销。&lt;/p&gt;
&lt;h4 id=&quot;4、-喵葩：天猫电商互动技术新思路&quot;&gt;&lt;a href=&quot;#4、-喵葩：天猫电商互动技术新思路&quot; class=&quot;headerlink&quot; title=&quot;4、    喵葩：天猫电商互动技术新思路&quot;&gt;&lt;/a&gt;4、    喵葩：天猫电商互动技术新思路&lt;/h4&gt;&lt;p&gt;续彬 天猫  高级技术专家&lt;/p&gt;
&lt;h4 id=&quot;5、-网络营销未来的五大发展趋势&quot;&gt;&lt;a href=&quot;#5、-网络营销未来的五大发展趋势&quot; class=&quot;headerlink&quot; title=&quot;5、    网络营销未来的五大发展趋势&quot;&gt;&lt;/a&gt;5、    网络营销未来的五大发展趋势&lt;/h4&gt;&lt;p&gt;葛甲 北京蓝时代  互联网分析师，自媒体人&lt;/p&gt;
&lt;h4 id=&quot;6、-H5数字营销的技术痛点&quot;&gt;&lt;a href=&quot;#6、-H5数字营销的技术痛点&quot; class=&quot;headerlink&quot; title=&quot;6、    H5数字营销的技术痛点&quot;&gt;&lt;/a&gt;6、    H5数字营销的技术痛点&lt;/h4&gt;&lt;p&gt;余悠 跳跳糖创意  CEO&lt;/p&gt;
&lt;h4 id=&quot;7、-纽约广告节最佳数字营销作品赏析&quot;&gt;&lt;a href=&quot;#7、-纽约广告节最佳数字营销作品赏析&quot; class=&quot;headerlink&quot; title=&quot;7、    纽约广告节最佳数字营销作品赏析&quot;&gt;&lt;/a&gt;7、    纽约广告节最佳数字营销作品赏析&lt;/h4&gt;&lt;p&gt;吴金君&lt;br&gt;纽约广告节  中国首席代表&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;16年的时候，赶上周末去参加了一趟北京的iweb峰会，会上来自各个公司的人分享和宣传自己的产品和技术，我作为一名普通开发者的角度去听大会，并了解和记录当前的一些技术发展。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、主题峰会-9-00
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>我短暂的创业经历</title>
    <link href="http://xuzichao.com/2015/12/21/%E6%88%91%E7%9F%AD%E6%9A%82%E7%9A%84%E5%88%9B%E4%B8%9A%E7%BB%8F%E5%8E%86/"/>
    <id>http://xuzichao.com/2015/12/21/我短暂的创业经历/</id>
    <published>2015-12-21T07:01:22.000Z</published>
    <updated>2017-06-21T03:47:59.000Z</updated>
    
    <content type="html">&lt;p&gt;互联网圈内，去哪儿旅行对外展示着的形象是加班多，偶尔还传出员工猝死的消息，然而任何一家公司也并不是每个部门都加班，并不是每个部门都有那么多亟不可待的业务需要去追赶，反而，在这里，我每天的工作自在舒适，按需完成，加班是很少的，如果你不想去外面的世界翻滚，这里就是你长久生养之地。那个时候我就是一枚螺丝开发，由于业务需求没有那么多，所以每日我只需要自己安排完成一定的工作量即可，有时候需求周期因为各端同事的配合时间也会被拉长，所以其实我大部分时间就是在自己浏览学习，没有实际的业务上手实践。而与此同时，互联网界正在迅猛发展，每天看着的都是各自CEO的诞生，各自融资拿钱拿到手软，这不禁也影响着我。&lt;br&gt;所以，尽管如此，尽管这里是整个互联网最安逸的体现，到了今年的7月份时候，我还是决心离开这温暖的被窝，离开我每日安享的梦境，全心投身创业。我却开始有些难过，因为那是我第一份工作，和去哪儿也是很有缘分的说，跟大家告别的时候特别伤心。一阵心塞之后，我的雄心开始燃烧，总是想着要闯出一片天地，对未来充满希望和无限遐想，想到我会享受着创业成就感与创业艰辛的交织幸福感，内心便激动起来。&lt;/p&gt;
&lt;p&gt;加入的创业公司属于互联网汽车行业，与一般不同的是，做的是汽车B2B模式平台。加入前，我和公司的领头人聊得很好，不仅是因为旧相识，谈得更多的是对整个业务未来的展望，他侃侃而谈，把整个行业给我分析了一遍，我似乎找不到哪里一点他说的不对，只有当我问到如果事情没有按照你所推演的发展，这中间出现环节出错误的时候，他才有些避重就轻。当时我的理解，在此投资环境如此之好得情况下，任何一家创业公司的带头人应该都是这幅样子，要利用互联网优势把这个市场搅拌，要让传统行业为我们所用的架势,遇见的问题自然也会有办法。汽车市场如此之大，随便能咬到一口就是丰厚的回报，而早期的成员就自然不言而喻。同时已经拿到投资，数额可观，在此基础上开始讲解了如何去且足以推动整个业务的初期发展，到这里我确实接触到了不少我之前没能接触到的各种环境，且对他的信任，就基本已经奠定我后来加入的格局了。&lt;/p&gt;
&lt;p&gt;加入团队后，秉承着我创业的心态一直很有干劲，除了自己分管的一些业务，其他大小事务也有一些参与感，看着产品的不断迭代和上线，我看到了自己努力的结果，心里满足，同时也收获了很多朋友，直到上周五离开，整整5个月了。&lt;/p&gt;
&lt;p&gt;那么问题来了，我为何还是选择离开？&lt;/p&gt;
&lt;p&gt;事情似乎看着一切进展顺利，产品上线，人员分工合理，但其中的原因并不缺乏，一切可以说只是看起来顺利，可以说常见的创业问题几乎在这个公司都体现出来了，尤其到后来资本市场的寒冬到来，互联网经济受影响，4个月之后出现融资困难，在这时候公司问题更加的突出了。&lt;/p&gt;
&lt;p&gt;首先说说产品，因为我是过去做开发的。产品的存在是为了服务公司的业务，开发人员和产品人员每日工作干进度是为了早日将这些服务呈现出来，按照我们的业务形态，产品的主要使用对象是汽车经销商，包括二级和4S在内。当时，产品和技术说现在版本上线了，大家可以推广使用了，却没有啥回应，包括几个带头人，他们对产品的使用好像并不在意，原本该我们的销售人员向对应的经销商开始推广安装使用，却没有一个销售人员相应行动。在团队产品的推进过程中，他们不会关心现在有多少人在使用了，不会关心技术团队的人加班后又做到什么程度了，这只是产品，为什么我单独说产品，因为三个合伙人是有一个专门管产品的，我看到的是他时常悠闲的在购物。&lt;/p&gt;
&lt;p&gt;再说说领导的意识和管理，到公司内部的管理也是混乱，涉及到大家过了实习期转正问题的时候，负责人基本不在意，一问就说有事之后再说，一拖就是近10天，我自己倒是干得还可以，也相信负责人，但其中不乏一些刚毕业的学生同事，他们感受到的更多是不幸福，严重降低大家创业积极性，不过这些算是也创业的小问题，在这个创业环境下，我们都可以接受，都可以认为没什么，因为大家在业务兴起的时候，必须各自忙着自己这一块，可能管不了很多。&lt;/p&gt;
&lt;p&gt;所以我们来说说，销售业务，这个公司最关键的地方，产品再好，没有业绩没有数据，一切为空。互联网汽车行业，单纯靠互联网的产品哪能，这也许成为前面大家忽视的原因，更多的精力放在了销售业务上，所以从这个角度看过去前面的好像也可以理解。销售团队向各级经销商，通过公司平台进行车源交易，从最初开始，产品技术和销售一起去往同一个地方推广，做销售的事情，活动覆盖了一个省，到现在建立几个省的销售区，规模也是有了。但是到现在，销售的量，汽车的成交量，一直没有突破，一直处于很低的指数，而这同时，最初的投资已经消耗了不少了，直到我离开的时候，销售的业务还是没有起，销售队伍已经快瓦解。公司各个方面的不足导致公司现在人心涣散，那些留下同事的理由唯一就是还有那么些钱可以消耗，可以再观望一阵。后来，到带头人发现有些带不动大家的时候，开始找大家吃饭讲问题，每次一讲都是几个小时。可在又一次的会议上，我们大家一起探讨，说到我们这次离开北京去浙江做到什么程度其实我也不知道，做多久其实我也不知道，最后，他自己也说了一句，要是我们这个没做起来，就换个方向做。我问，什么是换个方向，他说，就是不做这业务了找其他事情做。听到这里的时候，我开始确定我之前的怀疑，看来并不是我自己创业心智不够成熟，是确实这件事情本身存在了我们没能解决的不足。随后，销售团队首先开始离职，技术团队先后离职了，我也就是其中一个。&lt;/p&gt;
&lt;p&gt;今天是周一，写了些文字，为了记录一下我这次经历吧，我对整个公司没有什么负面情绪，相反，从领头人到和我工作的同事，大家都对我很照顾，平常也是一起其乐融融的生活，自己也成长进步。倒是这次的经历之后，让我开始反思自己究竟想要做什么，自己适合做什么，写这篇文章不仅是总结，也是分享给其他有兴趣的人看看吧。我给自己mark,让自己以后的路会做到走的更好。&lt;/p&gt;
&lt;p&gt;我在咖啡屋里，周围好些人，或看书，或攀谈，抿一口，待会继续投简历。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;后记：&quot;&gt;&lt;a href=&quot;#后记：&quot; class=&quot;headerlink&quot; title=&quot;后记：&quot;&gt;&lt;/a&gt;后记：&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;离我当时离开过了一年半了，我走的时候有一位坚持留下的开发同事走了，去了小米，随后也走了一名产品同事，去了高德地图，那位合伙的产品负责人也走了，去了一家互联网家具公司担任负责人。剩下的其他同事都还在，他们也招了新同事，也改了发展路线，目前在慈溪开了三家汽车品牌服务维修店，大概是做汽车销售品牌的路线。比之前有很多进展，但是要走的路还很长，真的很长，祝愿他们能更快的取得更好的成果。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;互联网圈内，去哪儿旅行对外展示着的形象是加班多，偶尔还传出员工猝死的消息，然而任何一家公司也并不是每个部门都加班，并不是每个部门都有那么多亟不可待的业务需要去追赶，反而，在这里，我每天的工作自在舒适，按需完成，加班是很少的，如果你不想去外面的世界翻滚，这里就是你长久生养之地
    
    </summary>
    
    
      <category term="随笔小结" scheme="http://xuzichao.com/tags/%E9%9A%8F%E7%AC%94%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Native与Web的通信桥</title>
    <link href="http://xuzichao.com/2015/09/10/Native%E4%B8%8EWeb%E7%9A%84%E9%80%9A%E4%BF%A1%E6%A1%A5/"/>
    <id>http://xuzichao.com/2015/09/10/Native与Web的通信桥/</id>
    <published>2015-09-10T10:22:41.000Z</published>
    <updated>2017-09-06T02:36:05.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一、Webview方式：&quot;&gt;&lt;a href=&quot;#一、Webview方式：&quot; class=&quot;headerlink&quot; title=&quot;一、Webview方式：&quot;&gt;&lt;/a&gt;一、Webview方式：&lt;/h2&gt;&lt;h3 id=&quot;1、JS调用Native&quot;&gt;&lt;a href=&quot;#1、JS调用Native&quot; class=&quot;headerlink&quot; title=&quot;1、JS调用Native&quot;&gt;&lt;/a&gt;1、JS调用Native&lt;/h3&gt;&lt;h3 id=&quot;1-1-webview加载流程&quot;&gt;&lt;a href=&quot;#1-1-webview加载流程&quot; class=&quot;headerlink&quot; title=&quot;1.1 webview加载流程&quot;&gt;&lt;/a&gt;1.1 webview加载流程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;发起一个网页请求&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;loadRequest:&lt;span class=&quot;params&quot;&gt;(NSURLRequest *)&lt;/span&gt;request&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;代理回调判断是否加载当前请求&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(BOOL)&lt;/span&gt;webView:&lt;span class=&quot;params&quot;&gt;(UIWebView *)&lt;/span&gt;webView &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shouldStartLoadWithRequest:&lt;span class=&quot;params&quot;&gt;(NSURLRequest *)&lt;/span&gt;request &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;navigationType:&lt;span class=&quot;params&quot;&gt;(UIWebViewNavigationType)&lt;/span&gt;navigationType;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;开始请求的时机&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;webViewDidStartLoad:&lt;span class=&quot;params&quot;&gt;(UIWebView *)&lt;/span&gt;webView;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;成功完成加载请求&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;webViewDidFinishLoad:&lt;span class=&quot;params&quot;&gt;(UIWebView *)&lt;/span&gt;webView;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;请求失败&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;webView:&lt;span class=&quot;params&quot;&gt;(UIWebView *)&lt;/span&gt;webView didFailLoadWithError:&lt;span class=&quot;params&quot;&gt;(NSError *)&lt;/span&gt;error;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-2-URL拦截&quot;&gt;&lt;a href=&quot;#1-2-URL拦截&quot; class=&quot;headerlink&quot; title=&quot;1.2 URL拦截&quot;&gt;&lt;/a&gt;1.2 URL拦截&lt;/h3&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (BOOL)&lt;span class=&quot;selector-tag&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(UIWebView&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;webView&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;shouldStartLoadWithRequest&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(NSURLRequest&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;request&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;navigationType&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(UIWebViewNavigationType)navigationType&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//JS发起的nativePage调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt; ([request.URL.scheme &lt;span class=&quot;attribute&quot;&gt;isEqualToString&lt;/span&gt;:@&lt;span class=&quot;string&quot;&gt;&quot;SchemeName&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//这里是应用内部的schema跳转分发逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;selector-attr&quot;&gt;[Router openNewPage:url]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//返回NO，不打开新网页&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       return NO; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//JS发起的事件Bridge调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt;([request.URL.scheme &lt;span class=&quot;attribute&quot;&gt;isEqualToString&lt;/span&gt;:@&lt;span class=&quot;string&quot;&gt;&quot;JSBridgeName&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//这里是应用内部的JS事件处理逻辑分发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;selector-attr&quot;&gt;[JSBridgeManager dealWithAction:url webView:webView]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//返回NO，不打开新网页&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       return NO; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   return YES;&lt;span class=&quot;comment&quot;&gt;//默认打开请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-3-请求分发&quot;&gt;&lt;a href=&quot;#1-3-请求分发&quot; class=&quot;headerlink&quot; title=&quot;1.3 请求分发&quot;&gt;&lt;/a&gt;1.3 请求分发&lt;/h3&gt;&lt;p&gt;注意上面的Router，其实也可以用JSBridgeManager事件进行分发，跟进传入的参数来判定即可，这里单独提炼出去，可以更好使得业务功能拆分复用。&lt;/p&gt;
&lt;p&gt;拦截下JS的请求后，我们开始构建自己的JSBridgeManager。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义我们执行JS事件的webview为JSWebView，包含对应执行JS的方法&lt;/li&gt;
&lt;li&gt;和前端约定一个固定接口，当前webview执行JS事件的时候，暴露一个方法给Native，Native调用来获取执行事件的时候所需要的额外信息，此处定义为”JSBridgeManager._fetchInfo()”&lt;/li&gt;
&lt;li&gt;获取完返回的信息后执行解析为一个数组，数组里面每一个对象都是一个可执行的命令体，通过转化我们定义命令体对象JSCommand&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//消息类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *messageType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//事件ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *eventID;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//回调ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *callbackID;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//消息参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *params;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//前端传过来的方法名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *fullName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//方法名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *methodName;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;定义一个JSForwardManager对象,专门用于转发命令，根据native的本地协定好的方法名和格式，动态消息转发。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (BOOL)&lt;span class=&quot;string&quot;&gt;dealWithAction:&lt;/span&gt;(NSURLRequest *)request &lt;span class=&quot;string&quot;&gt;withWebView:&lt;/span&gt;(JSWebView *)webView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSURL *url = request.URL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![webView &lt;span class=&quot;string&quot;&gt;respondsToSelector:&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;ttr_evaluateJavaScript:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;completionHandler:&lt;/span&gt;)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [webView &lt;span class=&quot;string&quot;&gt;evaluateJavaScript:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;;window.JSBridgeManager &amp;amp;&amp;amp; JSBridgeManager._fetchInfo();&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;completionHandler:&lt;/span&gt;^(id result, NSError *error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSArray *messagesData = [result JSONValue];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(NSDictionary *messageData &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; messagesData) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            JSCommand *command = [[JSCommand alloc] &lt;span class=&quot;string&quot;&gt;initWithDictonary:&lt;/span&gt;messageData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [[JSForwardManager sharedInstance] &lt;span class=&quot;string&quot;&gt;forwardJSBWithCommand:&lt;/span&gt;command &lt;span class=&quot;string&quot;&gt;engine:&lt;/span&gt;webView &lt;span class=&quot;string&quot;&gt;completion:&lt;/span&gt;^(TTRJSBMsg msg, NSDictionary *response) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [self &lt;span class=&quot;string&quot;&gt;invokeJSBCallbackWithCommand:&lt;/span&gt;command &lt;span class=&quot;string&quot;&gt;msg:&lt;/span&gt;msg &lt;span class=&quot;string&quot;&gt;data:&lt;/span&gt;response &lt;span class=&quot;string&quot;&gt;webView:&lt;/span&gt;webView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;];;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;处理传入进来的命令，根据JSCommand查找本地规则对应的JSPlugin，JSPlugin则是各个JS事件对应调用的实际Native对象，该对象由业务方自己实习，继承自JSPlugin，最后通过NSInvocation直接调用对应的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)&lt;span class=&quot;string&quot;&gt;forwardDynamicPluginWithCommand:&lt;/span&gt;(JSCommand *)command &lt;span class=&quot;string&quot;&gt;engine:&lt;/span&gt;(id&amp;lt;JSEngine&amp;gt;)engine &lt;span class=&quot;string&quot;&gt;completion:&lt;/span&gt;(JSResponse)completion &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *selectorStr = [command.methodName &lt;span class=&quot;string&quot;&gt;stringByAppendingString:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;WithParam:callback:webView:controller:&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SEL selector = NSSelectorFromString(selectorStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    JSPlugin *plugin = [self &lt;span class=&quot;string&quot;&gt;_generatePluginWithCommand:&lt;/span&gt;command &lt;span class=&quot;string&quot;&gt;engine:&lt;/span&gt;engine];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![plugin &lt;span class=&quot;string&quot;&gt;respondsToSelector:&lt;/span&gt;selector]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMethodSignature *signature = [plugin &lt;span class=&quot;string&quot;&gt;methodSignatureForSelector:&lt;/span&gt;selector];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSInvocation *invocation = [NSInvocation &lt;span class=&quot;string&quot;&gt;invocationWithMethodSignature:&lt;/span&gt;signature];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    invocation.target = plugin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    invocation.selector = selector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSDictionary *params = command.params;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [invocation &lt;span class=&quot;string&quot;&gt;setArgument:&lt;/span&gt;&amp;amp;params &lt;span class=&quot;string&quot;&gt;atIndex:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [invocation &lt;span class=&quot;string&quot;&gt;setArgument:&lt;/span&gt;&amp;amp;completion &lt;span class=&quot;string&quot;&gt;atIndex:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [invocation &lt;span class=&quot;string&quot;&gt;setArgument:&lt;/span&gt;&amp;amp;engine &lt;span class=&quot;string&quot;&gt;atIndex:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIViewController *source = engine.ttr_sourceController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [invocation &lt;span class=&quot;string&quot;&gt;setArgument:&lt;/span&gt;&amp;amp;source &lt;span class=&quot;string&quot;&gt;atIndex:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [invocation invoke];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;注意此处的completion回调，会返回去执行原来传进来的block，这里的JSResponse类都由本地实现和定义，最后在原webview里面执行脚本JS方法&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[self &lt;span class=&quot;string&quot;&gt;invokeJSBCallbackWithCommand:&lt;/span&gt;command &lt;span class=&quot;string&quot;&gt;msg:&lt;/span&gt;msg &lt;span class=&quot;string&quot;&gt;data:&lt;/span&gt;response &lt;span class=&quot;string&quot;&gt;webView:&lt;/span&gt;webView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self &lt;span class=&quot;string&quot;&gt;evaluateJavaScriptFromString:&lt;/span&gt;javaScriptString &lt;span class=&quot;string&quot;&gt;completionBlock:&lt;/span&gt;completionHandler];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、Native调用JS&quot;&gt;&lt;a href=&quot;#2、Native调用JS&quot; class=&quot;headerlink&quot; title=&quot;2、Native调用JS&quot;&gt;&lt;/a&gt;2、Native调用JS&lt;/h3&gt;&lt;p&gt;与上述最后一步回调一样，实际就是webview的一个执行JS的方法。&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;name&quot;&gt;nullable&lt;/span&gt; NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)script&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;二-基于JavaScriptCore&quot;&gt;&lt;a href=&quot;#二-基于JavaScriptCore&quot; class=&quot;headerlink&quot; title=&quot;二. 基于JavaScriptCore&quot;&gt;&lt;/a&gt;二. 基于JavaScriptCore&lt;/h2&gt;&lt;h3 id=&quot;1、JS调用Native-1&quot;&gt;&lt;a href=&quot;#1、JS调用Native-1&quot; class=&quot;headerlink&quot; title=&quot;1、JS调用Native&quot;&gt;&lt;/a&gt;1、JS调用Native&lt;/h3&gt;&lt;h3 id=&quot;1-1-获取当前JS环境&quot;&gt;&lt;a href=&quot;#1-1-获取当前JS环境&quot; class=&quot;headerlink&quot; title=&quot;1.1 获取当前JS环境&quot;&gt;&lt;/a&gt;1.1 获取当前JS环境&lt;/h3&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;self.&lt;span class=&quot;keyword&quot;&gt;JSContext &lt;/span&gt;= [self.&lt;span class=&quot;keyword&quot;&gt;baseWebView &lt;/span&gt;valueForKeyPath:@&lt;span class=&quot;string&quot;&gt;&quot;documentView.webView.mainFrame.javaScriptContext&quot;&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-2-在Native定义JS环境对象&quot;&gt;&lt;a href=&quot;#1-2-在Native定义JS环境对象&quot; class=&quot;headerlink&quot; title=&quot;1.2 在Native定义JS环境对象&quot;&gt;&lt;/a&gt;1.2 在Native定义JS环境对象&lt;/h3&gt;&lt;p&gt;利用JSExport接口定义一套自己的业务接口协议，实现此协议的对象，可以放入JSContext环境中直接作为同名的JS方法调用。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;JavaScriptCore/JavaScriptCore.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseWebObjProctol&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;JSExport&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//网页打开本地&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)openNativePage:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)param;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//登录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)login;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用分享接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)shareToOthers;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseWebObj&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;BaseWebObjProctol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) BaseWebVC *webVC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-3-注入JS对象&quot;&gt;&lt;a href=&quot;#1-3-注入JS对象&quot; class=&quot;headerlink&quot; title=&quot;1.3 注入JS对象&quot;&gt;&lt;/a&gt;1.3 注入JS对象&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)webViewDidFinishLoad:(&lt;span class=&quot;built_in&quot;&gt;UIWebView&lt;/span&gt; *)webView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BaseWebObj *webObj = [[BaseWebObj alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webObj.webVC = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.JSContext[&lt;span class=&quot;string&quot;&gt;@&quot;nativeApp&quot;&lt;/span&gt;] = webObj;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-4-JS调用示例&quot;&gt;&lt;a href=&quot;#1-4-JS调用示例&quot; class=&quot;headerlink&quot; title=&quot;1.4 JS调用示例&quot;&gt;&lt;/a&gt;1.4 JS调用示例&lt;/h3&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;window&lt;span class=&quot;selector-class&quot;&gt;.nativeApp&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.openUrlPage&lt;/span&gt;(dictionary)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、Native调用JS-1&quot;&gt;&lt;a href=&quot;#2、Native调用JS-1&quot; class=&quot;headerlink&quot; title=&quot;2、Native调用JS&quot;&gt;&lt;/a&gt;2、Native调用JS&lt;/h3&gt;&lt;p&gt;与上述最后一步回调一样，实际就是webview的一个执行JS的方法。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;JSContext &lt;/span&gt;: NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (JSValue *)&lt;span class=&quot;attribute&quot;&gt;evaluateScript&lt;/span&gt;:(NSString *)script;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;三、调试&quot;&gt;&lt;a href=&quot;#三、调试&quot; class=&quot;headerlink&quot; title=&quot;三、调试&quot;&gt;&lt;/a&gt;三、调试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;手机: 设置-&amp;gt;Safari-&amp;gt;高级-&amp;gt;打开web检查器&lt;/li&gt;
&lt;li&gt;Safari: Safari-&amp;gt;首选项-&amp;gt;高级-&amp;gt;打开 ‘在菜单中显示开发’ 选项&lt;/li&gt;
&lt;li&gt;调试流程:Safari-&amp;gt;开发-&amp;gt;找到需要调试的设备-&amp;gt;找到需要调试的页面&lt;/li&gt;
&lt;li&gt;BTW: 可用于检测WebView实例的内存泄露&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Webview方式：&quot;&gt;&lt;a href=&quot;#一、Webview方式：&quot; class=&quot;headerlink&quot; title=&quot;一、Webview方式：&quot;&gt;&lt;/a&gt;一、Webview方式：&lt;/h2&gt;&lt;h3 id=&quot;1、JS调用Native&quot;&gt;&lt;a href=&quot;#1
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>IOS 音频一览</title>
    <link href="http://xuzichao.com/2015/03/15/IOS%20%E9%9F%B3%E9%A2%91%E4%B8%80%E8%A7%88/"/>
    <id>http://xuzichao.com/2015/03/15/IOS 音频一览/</id>
    <published>2015-03-15T04:34:11.000Z</published>
    <updated>2016-10-24T10:51:51.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;IOS-音频一览&quot;&gt;&lt;a href=&quot;#IOS-音频一览&quot; class=&quot;headerlink&quot; title=&quot;IOS 音频一览&quot;&gt;&lt;/a&gt;IOS 音频一览&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;前言：&lt;br&gt;做嘉宾聊天室这个需求的时候接触了音频和视频上的开发，嘉宾可以发布视频和语音以及文字信息出来，观众则可以文字回复，这样主持人嘉宾和观众就形成一个良性的互动过程。在这里把相关整理一下，望给大家带来一些认识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、了解音频&quot;&gt;&lt;a href=&quot;#一、了解音频&quot; class=&quot;headerlink&quot; title=&quot;一、了解音频&quot;&gt;&lt;/a&gt;一、了解音频&lt;/h1&gt;&lt;p&gt;声音作为信息的一种媒介载体必不可少，在移动端体现为各类语音交流以及音乐等，开发中使用的音频文件通过声音采样、量化、编码几步从而成为人耳可听的声音，频率为20HZ到20KHZ，奈奎斯特的理论表明采样率高于最高频2倍时候，是可以将数字信号还原为原来的模拟信号的，所以通常我们在网上看到的音频文件的采样率为44.1KHZ。&lt;/p&gt;
&lt;p&gt;采样后通过量化的脉冲编码调制，我们得到了PCM类型的数据，比如在使用AVAudioRecorder采样的时候可以看到采样类型kAudioFormatLinearPCM。但是这样拿到的数据是很大的，不便于使用和传输，通过对人类不敏感的声音区域进行过滤压缩，就有了MP3、AAC、OGG、WMA等数据格式类型，这些都是有损压缩。&lt;/p&gt;
&lt;p&gt;码率代码了压缩质量，比如MP3常用码率有128kbit/s、160kbit/s、320kbit/s等等，越高代表着声音音质越好。MP3中的数据有ID3和音频数据组成，ID3用于存储歌名、演唱者、专辑、音轨等我们可以常见的信息。&lt;/p&gt;
&lt;h1 id=&quot;二、IOS对音频的操作&quot;&gt;&lt;a href=&quot;#二、IOS对音频的操作&quot; class=&quot;headerlink&quot; title=&quot;二、IOS对音频的操作&quot;&gt;&lt;/a&gt;二、IOS对音频的操作&lt;/h1&gt;&lt;p&gt;开发实际上是为了解决需求，需求对应的是使用场景，开发的方式很多，不同的使用场景可以使用的方法不同。IOS开发提供了以下几种常用方式供我们解决对应的音频需求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System Sound Services &lt;/li&gt;
&lt;li&gt;AVFoundation 框架&lt;/li&gt;
&lt;li&gt;Media Player 框架&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-1-System-Sound-Services&quot;&gt;&lt;a href=&quot;#2-1-System-Sound-Services&quot; class=&quot;headerlink&quot; title=&quot;2.1  System Sound Services&quot;&gt;&lt;/a&gt;2.1  System Sound Services&lt;/h2&gt;&lt;h4 id=&quot;2-1-1-场景特点&quot;&gt;&lt;a href=&quot;#2-1-1-场景特点&quot; class=&quot;headerlink&quot; title=&quot;2.1.1 场景特点&quot;&gt;&lt;/a&gt;2.1.1 场景特点&lt;/h4&gt;&lt;p&gt;最底层也是简单的声音播放服务，此方法是适合播放提示警告类型的短小的声音&lt;/p&gt;
&lt;h4 id=&quot;2-1-2-存在限制&quot;&gt;&lt;a href=&quot;#2-1-2-存在限制&quot; class=&quot;headerlink&quot; title=&quot;2.1.2 存在限制&quot;&gt;&lt;/a&gt;2.1.2 存在限制&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;声音长度要小于 30 秒&lt;/li&gt;
&lt;li&gt;In linear PCM 或者 IMA4 (IMA/ADPCM) 格式的&lt;/li&gt;
&lt;li&gt;打包成 .caf, .aif, 或者 .wav 的文件&lt;/li&gt;
&lt;li&gt;不能控制播放的进度&lt;/li&gt;
&lt;li&gt;调用方法后立即播放声音&lt;/li&gt;
&lt;li&gt;没有循环播放和立体声控制：&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-1-3-使用方式&quot;&gt;&lt;a href=&quot;#2-1-3-使用方式&quot; class=&quot;headerlink&quot; title=&quot;2.1.3 使用方式&quot;&gt;&lt;/a&gt;2.1.3 使用方式&lt;/h4&gt;&lt;p&gt;调用 AudioServicesCreateSystemSoundID(CFURLRef inFileURL,SystemSoundID *outSystemSoundID) 该函数的第一个参数代表音频文件的URL（可通过NSURL转换成CFURLRef），第二个参数代表注册音频文件的SystemSoundID。&lt;/p&gt;
&lt;p&gt;调用AudioServicesAddSystemSoundCompletion()函数为制定SystemSoundID注册Callback函数。有了 CallBack 函数我们可以解决不少问题，比如可以克服 System Sound Services 本身不支持循环播放的问题。&lt;/p&gt;
&lt;p&gt;调用AudioServicePlaySystemSound函数或者AudioServicePlayAlertSound（调用系统振动功能）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad
{
[super viewDidLoad];

// 1. 定义要播放的音频文件的URL
NSURL *voiceURL = [[NSBundle mainBundle]URLForResource:@&amp;quot;CleanDidFinish&amp;quot; withExtension:@&amp;quot;aiff&amp;quot;];

// 2. 注册音频文件（第一个参数是音频文件的URL 第二个参数是音频文件的SystemSoundID）
AudioServicesCreateSystemSoundID((__bridge CFURLRef)(voiceURL),&amp;amp;ditaVoice);

// 3. 为crash播放完成绑定回调函数AudioServicesAddSystemSoundCompletion(ditaVoice,NULL,NULL,(void*)completionCallback,NULL);

// 4. 播放 ditaVoice 注册的音频 并控制手机震动
AudioServicesPlayAlertSound(ditaVoice);

//    AudioServicesPlaySystemSound(ditaVoice);
//    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate); // 控制手机振动

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2-2-AVFoundation-框架&quot;&gt;&lt;a href=&quot;#2-2-AVFoundation-框架&quot; class=&quot;headerlink&quot; title=&quot;2.2  AVFoundation 框架&quot;&gt;&lt;/a&gt;2.2  AVFoundation 框架&lt;/h2&gt;&lt;h4 id=&quot;2-2-1-场景特点&quot;&gt;&lt;a href=&quot;#2-2-1-场景特点&quot; class=&quot;headerlink&quot; title=&quot;2.2.1 场景特点&quot;&gt;&lt;/a&gt;2.2.1 场景特点&lt;/h4&gt;&lt;p&gt;如果播放较大的音频或者要对音频有精确的控制，则System Sound Service可能就很难满足实际需求了，通常这种情况会选择使用AVFoundation，它可以满足我们通常意义上的绝大部分的场景需求，包括音乐的交互、声音的制作等等，根据自己的业务需求实现自定义的定制化。如果你只是想实现音频的播放或者录制，没有其他需求，AVFoundation会很好的满足你，它的接口使用简单、不用关心其中的细节。&lt;/p&gt;
&lt;h4 id=&quot;2-2-2-关键点和API浏览&quot;&gt;&lt;a href=&quot;#2-2-2-关键点和API浏览&quot; class=&quot;headerlink&quot; title=&quot;2.2.2 关键点和API浏览&quot;&gt;&lt;/a&gt;2.2.2 关键点和API浏览&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Background Modes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;打开后台模式的音乐播放，或者在info.plist文件中添加Required Background Modes键，其值是App plays audio or streams audio/video using AirPlay&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AVAudioSession&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用于 iOS 系统中协调应用程序之间的音频播放的 API 的。例如，当有电话打进来时，音频的播放就会被暂停；在用户启动电影时，音乐的播放就会停止。我们需要使用这些 API 来确保一个应用程序能够正确响应并处理这类事件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AVAudioPlayer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个高层级的 API 为你提供一个简单的接口，用来播放本地或者内存中的音频。这是一个无界面的音频播放器 (也就是说没有提供 UI 元素)，使用起来也很直接简单。它不适用于网络音频流或者低延迟的实时音频播放。如果这些问题都不需要担心，那么 AVAudioPlayer 可能就是正确的选择。音频播放器的 API 也为我们带来了一些额外的功能，比如循环播放、获取音频的音量强度等等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AVAudioRecorder&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为与 AVAudioPlayer 相对应的 API，AVAudioRecorder 是将音频录制为文件的最简单的方法。除了用一个音量计接受音量的峰值和平均值以外，这个 API 简单粗暴，但要是你的使用场景很简单的话，这可能恰恰就是你想要的方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AVPlayer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AVPlayer 与上面提到的 API 相比，提供了更多的灵活性和可控性。它基于 AVPlayerItem 和 AVAsset，为你提供了颗粒度更细的权限来获取资源，比如选择指定的音轨。它还通过 AVQueuePlayer 子类支持播放列表，而且你可以控制这些资源是否能够通过 AirPlay 发送。&lt;/p&gt;
&lt;h4 id=&quot;与-AVAudioPlayer-最主要的区别是，AVPlayer-对来自网络的流媒体资源的-“开箱即用”-支持。这增加了处理播放状态的复杂性，但是你可以使用-KVO-来观测所有的状态参数来解决这个问题。&quot;&gt;&lt;a href=&quot;#与-AVAudioPlayer-最主要的区别是，AVPlayer-对来自网络的流媒体资源的-“开箱即用”-支持。这增加了处理播放状态的复杂性，但是你可以使用-KVO-来观测所有的状态参数来解决这个问题。&quot; class=&quot;headerlink&quot; title=&quot;与 AVAudioPlayer 最主要的区别是，AVPlayer 对来自网络的流媒体资源的 “开箱即用” 支持。这增加了处理播放状态的复杂性，但是你可以使用 KVO 来观测所有的状态参数来解决这个问题。&quot;&gt;&lt;/a&gt;与 AVAudioPlayer 最主要的区别是，AVPlayer 对来自网络的流媒体资源的 “开箱即用” 支持。这增加了处理播放状态的复杂性，但是你可以使用 KVO 来观测所有的状态参数来解决这个问题。&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt; AVAudioEngine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AVAudioEngine 是播放和录制的 Objective-C 接口。它提供了以前需要深入到 Audio Toolbox 框架的 C API 才能做的控制 (例如一些实时音频任务)。该音频引擎 API 对底层的 API 建立了优秀的接口。如果你不得不处理底层的问题，你仍然可以使用 Audio Toolbox 框架。&lt;/p&gt;
&lt;p&gt;这个 API 的基本概念是建立一个音频的节点图，从源节点 (播放器和麦克风) 以及过处理 (overprocessing) 节点 (混音器和效果器) 到目标节点 (硬件输出)。每一个节点都具有一定数量的输入和输出总线，同时这些总线也有良好定义的数据格式。这种结构使得它非常的灵活和强大。而且它集成了音频单元 (audio unit)。&lt;/p&gt;
&lt;h2 id=&quot;2-3-Media-Player-框架&quot;&gt;&lt;a href=&quot;#2-3-Media-Player-框架&quot; class=&quot;headerlink&quot; title=&quot;2.3 Media Player 框架&quot;&gt;&lt;/a&gt;2.3 Media Player 框架&lt;/h2&gt;&lt;h4 id=&quot;2-3-1-场景特点&quot;&gt;&lt;a href=&quot;#2-3-1-场景特点&quot; class=&quot;headerlink&quot; title=&quot;2.3.1 场景特点&quot;&gt;&lt;/a&gt;2.3.1 场景特点&lt;/h4&gt;&lt;p&gt;众所周知音乐是iOS的重要组成播放，无论是iPod、iTouch、iPhone还是iPad都可以在iTunes购买音乐或添加本地音乐到音乐库中同步到你的iOS设备。在MediaPlayer.frameowork中有一个MPMusicPlayerController用于播放音乐库中的音乐。Media Player 框架是 iOS 平台上一个用于音频和视频播放的高层级接口，它包含了一个你可以在应用中直接使用的默认的用户界面。你可以使用它来播放用户在 iPod 库中的项目，或者播放本地文件以及网络流。这个框架也包括了查找用户媒体库中内容的 API，同时还可以配置像是在锁屏界面或者控制中心里的音频控件。&lt;/p&gt;
&lt;h4 id=&quot;2-3-2-使用方式&quot;&gt;&lt;a href=&quot;#2-3-2-使用方式&quot; class=&quot;headerlink&quot; title=&quot;2.3.2 使用方式&quot;&gt;&lt;/a&gt;2.3.2 使用方式&lt;/h4&gt;&lt;p&gt;使用MPMusicPlayerController实例化对象来播放内置音乐库的媒体文件，有以下两种类方法来实例化对象：&lt;/p&gt;
&lt;p&gt;MPMusicPlayerController *playController = [MPMusicPlayerController systemMusicPlayer]; &lt;/p&gt;
&lt;p&gt;说明：播放内置媒体库项目取代用户目前播放状态（如果是用网易云音乐或QQQ音乐在播放歌曲）&lt;/p&gt;
&lt;p&gt;MPMusicPlayerController *playController = [MPMusicPlayerController applicationMusicPlayer]; &lt;/p&gt;
&lt;p&gt;说明：播放该应用内的歌曲，不影响本机自带音乐播放器的状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;判断有没有正在播放的媒体&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[MPMusicPlayerController indexOfNowPlayingItem] == NSNotFound
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建媒体队列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[MPMediaQuery songsQuery];
[MPMusicPlayerController setQueueWithQuery:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取媒体曲目的信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;MPMediaItem *currentItem = ....
NSString *artist = [currentItem valueForProperty:MPMediaItemPropertyArtist];
NSString *songName = [currentItem valueForProperty:MPMediaItemPropertyTitle];
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;监听媒体通知&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];[notificationCenter addObserver:self
              selector:@selector()
                       name:MPMusicPlayerControllerNowPlayingItemDidChangeNotification
                     object:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-4-更多音频方案&quot;&gt;&lt;a href=&quot;#2-4-更多音频方案&quot; class=&quot;headerlink&quot; title=&quot;2.4 更多音频方案&quot;&gt;&lt;/a&gt;2.4 更多音频方案&lt;/h2&gt;&lt;p&gt;CoreAudio的接口层次：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/api.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-4-1-OpenAL&quot;&gt;&lt;a href=&quot;#2-4-1-OpenAL&quot; class=&quot;headerlink&quot; title=&quot;2.4.1 OpenAL&quot;&gt;&lt;/a&gt;2.4.1 OpenAL&lt;/h4&gt;&lt;p&gt;OpenAL 是一个跨平台的 API。它提供了位置 (3D) 和低延迟的音频服务。它主要用于跨平台游戏的开发。它有意地模仿了 OpenGL 中 API 的风格。&lt;/p&gt;
&lt;h4 id=&quot;2-4-2-Audio-Unit-框架&quot;&gt;&lt;a href=&quot;#2-4-2-Audio-Unit-框架&quot; class=&quot;headerlink&quot; title=&quot;2.4.2  Audio Unit 框架&quot;&gt;&lt;/a&gt;2.4.2  Audio Unit 框架&lt;/h4&gt;&lt;p&gt;Audio Unit 框架是一个底层的 API；所有 iOS 中的音频技术都构建在 Audio Unit 这个框架之上。音频单元是用来加工音频数据的插件。一个音频单元链叫做音频处理图。&lt;/p&gt;
&lt;p&gt;如果你需要非常低的延迟 (如 VoIP 或合成乐器)、回声消除、混音或者音调均衡的话，你可能需要直接使用音频单元，或者自己写一个音频单元。但是其中的大部分工作可以使用 AVAudioEngine 的 API 来完成。如果你不得不写自己的音频单元的话，你可以将它们与 AVAudioUnit 节点一起集成在 AVAudioEngine 处理图中。&lt;/p&gt;
&lt;h4 id=&quot;2-4-2-AudioToolBox-框架&quot;&gt;&lt;a href=&quot;#2-4-2-AudioToolBox-框架&quot; class=&quot;headerlink&quot; title=&quot;2.4.2 AudioToolBox 框架&quot;&gt;&lt;/a&gt;2.4.2 AudioToolBox 框架&lt;/h4&gt;&lt;p&gt;通过AudioToolbox框架，可以将短声音注册到system sound服务上，被注册到system sound服务上的声音称之为 system sounds。&lt;br&gt;前面常用的System Sound Services 就来自这里的框架。&lt;/p&gt;
&lt;p&gt;它必须满足下面几个条件：&lt;/p&gt;
&lt;p&gt;(1).播放的时间不能超过30秒&lt;/p&gt;
&lt;p&gt;(2).数据必须是 PCM或者IMA4流格式&lt;/p&gt;
&lt;p&gt;(3).必须被打包成下面三个格式之一：Core Audio Format (.caf), Waveform audio (.wav), 或者 Audio Interchange File (.aiff)&lt;/p&gt;
&lt;p&gt;(4）声音文件必须放到设备的本地文件夹下面。通过AudioServicesCreateSystemSoundID方法注册这个声音文件.&lt;/p&gt;
&lt;h4 id=&quot;2-4-3-CoreMIDI-和-CoreAudioKit-框架&quot;&gt;&lt;a href=&quot;#2-4-3-CoreMIDI-和-CoreAudioKit-框架&quot; class=&quot;headerlink&quot; title=&quot;2.4.3 CoreMIDI 和 CoreAudioKit 框架&quot;&gt;&lt;/a&gt;2.4.3 CoreMIDI 和 CoreAudioKit 框架&lt;/h4&gt;&lt;p&gt;在 iOS 上，Core MIDI 和 CoreAudioKit 可以被用来使应用程序表现为 MIDI 设备。在 OS X 上，Music Sequencing 服务提供了基于 MIDI 的控制和对音乐数据访问的权限。Core MIDI 服务为服务器和驱动程序提供了支持。&lt;/p&gt;
&lt;h4 id=&quot;2-4-4-QTKit-和-QuickTime-框架&quot;&gt;&lt;a href=&quot;#2-4-4-QTKit-和-QuickTime-框架&quot; class=&quot;headerlink&quot; title=&quot;2.4.4 QTKit 和 QuickTime 框架&quot;&gt;&lt;/a&gt;2.4.4 QTKit 和 QuickTime 框架&lt;/h4&gt;&lt;p&gt;现在已经过时了，它们不应该被用在以后的开发中。我们应该使用 AVFoundation (和 AVKit) 来代替它们&lt;/p&gt;
&lt;h1 id=&quot;三、今日头条嘉宾聊天室音频实践&quot;&gt;&lt;a href=&quot;#三、今日头条嘉宾聊天室音频实践&quot; class=&quot;headerlink&quot; title=&quot;三、今日头条嘉宾聊天室音频实践&quot;&gt;&lt;/a&gt;三、今日头条嘉宾聊天室音频实践&lt;/h1&gt;&lt;h2 id=&quot;3-1-背景&quot;&gt;&lt;a href=&quot;#3-1-背景&quot; class=&quot;headerlink&quot; title=&quot;3.1 背景&quot;&gt;&lt;/a&gt;3.1 背景&lt;/h2&gt;&lt;p&gt;嘉宾聊天室是头条16年初新起的一个项目服务，目标是为了引进明星嘉宾访谈类型和体育赛事线上直播的节目，丰富头条在直播领域的内容，聊天室一期是属于图文、语音、短视频直播，后期发展可成为视频线上直播。表现形式与网易直播频道类似，但更丰富。&lt;/p&gt;
&lt;h2 id=&quot;3-2-IOS端实现&quot;&gt;&lt;a href=&quot;#3-2-IOS端实现&quot; class=&quot;headerlink&quot; title=&quot;3.2 IOS端实现&quot;&gt;&lt;/a&gt;3.2 IOS端实现&lt;/h2&gt;&lt;p&gt;根据聊天室在语音和视频的需求，使用系统自带实现的MPMoviePlayerController没法符合自定义的需求，包括功能与交互设计，并且MPMoviePlayerController已经不被苹果官方提倡，将要通过AVPlayer方案代替。需求本身的属于基本的语音和视频沟通，只对音频视频的录制与播放，符合音质画质要求和大小要求，因此采用AVFoundation框架即可，能够满足聊天室的需求。主要使用了AVPlayer、AVAudioRecorder、AVAudioSession等主要的类。&lt;/p&gt;
&lt;p&gt;实现类有如下等：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;TTAudioRecorder.h&amp;quot;
#import &amp;quot;TTAudioPlayer.h&amp;quot;
#import &amp;quot;TTLiveCameraViewController.h&amp;quot;
#import &amp;quot;TTUploadVideoAudioManager.h&amp;quot;
#import &amp;quot;TTLiveAudioManager.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;3-3-问题与解决&quot;&gt;&lt;a href=&quot;#3-3-问题与解决&quot; class=&quot;headerlink&quot; title=&quot;3.3 问题与解决&quot;&gt;&lt;/a&gt;3.3 问题与解决&lt;/h2&gt;&lt;p&gt;整个需求的实现过程还算顺利，按照API说明理解即可，提两三点说明下都会遇见哪一类的问题。&lt;/p&gt;
&lt;h4 id=&quot;3-1-音频格式为AMR&quot;&gt;&lt;a href=&quot;#3-1-音频格式为AMR&quot; class=&quot;headerlink&quot; title=&quot;3.1 音频格式为AMR&quot;&gt;&lt;/a&gt;3.1 音频格式为AMR&lt;/h4&gt;&lt;p&gt;AVPlayer来播放视频音频都相当强大，但是它也存在着一些不可回避的问题，那就是目前IOS已经不再支持AMR格式的播放。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AMR format is no longer supported by Apple (since iOS 4.3)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;与安卓同步开发的时候对接确立的通用的格式为AMR，因为AAC文件在网络传输下载播放的时候显得很大，AMR相对来说会好很多，同时我们也看了微博和微信的实现都是使用AMR，鉴于头条的用户量和使用体验，于是就采用了同样的方式。安卓可以很好支持AMR，在iOS平台上需要进行WAV和AMR之间的转换，好在libopencore可以解决这个事。网络上有好些所谓的相互转化的库，仔细看了下，都没有脱离这个core本身。&lt;/p&gt;
&lt;p&gt;libopencore库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interf_dec.h 
interf_enc.h
dec_if.h
if_rom.h
libopencore-amrnb.a
libopencore-amrwb.a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主要方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EncodeWAVEFileToAMRFile 、 DecodeAMRFileToWAVEFile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;封装一个mannager：        &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;

@interface VoiceConverter : NSObject

+ (int)amrToWav:(NSString*)_amrPath wavSavePath:(NSString*)_savePath;

+ (int)wavToAmr:(NSString*)_wavPath amrSavePath:(NSString*)_savePath;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3-2-WAV转化AMR声音变形：&quot;&gt;&lt;a href=&quot;#3-2-WAV转化AMR声音变形：&quot; class=&quot;headerlink&quot; title=&quot;3.2 WAV转化AMR声音变形：&quot;&gt;&lt;/a&gt;3.2 WAV转化AMR声音变形：&lt;/h4&gt;&lt;p&gt;录制WAV格式本地正常播放，转化为AMR后，把AMR格式文件在电脑端播放，声音严重变形，无法识别，再转化会WAV,，手机还是无法识别。&lt;br&gt;原因与解决&lt;br&gt;声音格式转化采用的是”amrFileCodec.h”，它对转化的音频输入源是有格式要求的，要求转化的采样率为标准的8k，如果录制的音频频率采用高频率44.1K的话就会出现变形，我想这里的设定依据来自于amr格式的采样率通常为8K。通过AVAudioRecorder把采样率设置为8K后，可以正常互相转化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AMR维基百科：&lt;/p&gt;
&lt;p&gt;采样率 8 kHz/13-bit (160 采样点每20ms)，滤波后只保留 200-3400 Hz 范围内的信号.&lt;/p&gt;
&lt;p&gt;编码器使用8个位速：12.2、10.2、7.95、7.40、6.70、5.90、5.15和4.75 kbit/s.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;NSMutableDictionary *settings=[NSMutableDictionary dictionary];
[settings setObject:@(kAudioFormatLinearPCM) forKey:AVFormatIDKey];
[settings setObject:@(8000) forKey:AVSampleRateKey]; //必须和amr文件解码参数保持一致
[settings setObject:@(1) forKey:AVNumberOfChannelsKey];
[settings setObject:@(16) forKey:AVLinearPCMBitDepthKey];
[settings setObject:@(NO) forKey:AVLinearPCMIsFloatKey];
[settings setValue:@(NO) forKey:AVLinearPCMIsNonInterleaved];
[settings setValue:@(NO) forKey:AVLinearPCMIsBigEndianKey];
[settings setValue:@(AVAudioQualityHigh) forKey:AVEncoderAudioQualityKey];
AVAudioRecorder *recorderTemp = [[AVAudioRecorder alloc] initWithURL:fileUrl settings:settings error:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3-3-AVPlayer的准备状态&quot;&gt;&lt;a href=&quot;#3-3-AVPlayer的准备状态&quot; class=&quot;headerlink&quot; title=&quot;3.3 AVPlayer的准备状态&quot;&gt;&lt;/a&gt;3.3 AVPlayer的准备状态&lt;/h4&gt;&lt;p&gt;当AVPlayer的status变为AVPlayerStatusReadyToPlay后，依旧可能无法开始播放？&lt;/p&gt;
&lt;p&gt;AVPlayerStatusReadyToPlay属性只是表明了AVPlayer已经成功的载入了AVPlayerItem，并且准备好，但是实际的是否能播放时由AVPlayerItem的status到达AVPlayerItemStatusReadyToPlay的时候，才能开始正常播放的。&lt;br&gt;如果我们的App使用CPU过多，I/O读写过多时，有可能导致直接无法播放，我们再调用play或者seekToTime:方法都无法正常播放，尤其是视频。所以我们需要做一个真正播放状态准备好的判断，也可以通过KVO去监听AVPlayerItem的status。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//播放器是否准备好
if (self.videoPrePlayer.status == AVPlayerStatusReadyToPlay) 
{
    //视频是否加载成功
    if(self.videoPrePlayer.currentItem.status == AVPlayerItemStatusFailed){   
        return;
    }
        [self.videoPrePlayer play];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;四、小结&quot;&gt;&lt;a href=&quot;#四、小结&quot; class=&quot;headerlink&quot; title=&quot;四、小结&quot;&gt;&lt;/a&gt;四、小结&lt;/h1&gt;&lt;p&gt;文章主要对音频的使用范畴做了概括，并列举了两三实践点，其他的并没有做详细的论述，因为本篇比较偏向音频知识的介绍，知道用什么工具框架后再具体解决就好。比如如何播放流畅的网络音频，如何实现音频的快放与慢放等具体问题，此次需求内容并不复杂没有涉及，他们都可以通过 AudioToolBox框架实现。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;IOS-音频一览&quot;&gt;&lt;a href=&quot;#IOS-音频一览&quot; class=&quot;headerlink&quot; title=&quot;IOS 音频一览&quot;&gt;&lt;/a&gt;IOS 音频一览&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;前言：&lt;br&gt;做嘉宾聊天室这个需求的时候接触了音频和视频上的开发，
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>AVFoundation视频开发总结</title>
    <link href="http://xuzichao.com/2015/01/28/%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <id>http://xuzichao.com/2015/01/28/视频开发总结/</id>
    <published>2015-01-28T11:09:59.000Z</published>
    <updated>2017-09-05T07:10:54.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;IOS-视频录制-—-AVFoundation&quot;&gt;&lt;a href=&quot;#IOS-视频录制-—-AVFoundation&quot; class=&quot;headerlink&quot; title=&quot;IOS 视频录制 — AVFoundation&quot;&gt;&lt;/a&gt;IOS 视频录制 — AVFoundation&lt;/h1&gt;&lt;p&gt;AVFoundation是为数不多的几个框架,您可以使用和创建基于时间的视听媒体。它提供了一个objective - c接口用于工作与基于时间的视听数据详细的级别。例如,您可以使用它来检查,创建、编辑或reencode媒体文件。你也可以输入流从设备和操作视频实时捕捉和回放。&lt;/p&gt;
&lt;h2 id=&quot;一、概念引导：&quot;&gt;&lt;a href=&quot;#一、概念引导：&quot; class=&quot;headerlink&quot; title=&quot;一、概念引导：&quot;&gt;&lt;/a&gt;一、概念引导：&lt;/h2&gt;&lt;h3 id=&quot;1、ASSets媒体文件&quot;&gt;&lt;a href=&quot;#1、ASSets媒体文件&quot; class=&quot;headerlink&quot; title=&quot;1、ASSets媒体文件:&quot;&gt;&lt;/a&gt;1、ASSets媒体文件:&lt;/h3&gt;&lt;p&gt;1）AVAsset&lt;/p&gt;
&lt;p&gt;一个抽象类来表示时间等视听媒体视频和声音。每个资产包含一组跟踪旨在呈现或加工在一起,一个统一的媒体类型,包括但不限于音频、视频、文本、关闭字幕,字幕。&lt;/p&gt;
&lt;p&gt;AVURLAsset *anAsset = [[AVURLAsset alloc] initWithURL:url options:nil];属性有&lt;br&gt;tracks、duration、preferredVolume、preferredTransform等等。&lt;/p&gt;
&lt;p&gt;2) 一个AVAssetTrack&lt;/p&gt;
&lt;p&gt;对象提供了所有资产提供track-level检查接口,方便对ASSets进行更具体的属性获取以及对应的操作。&lt;/p&gt;
&lt;p&gt;3）AVAssetImageGenerator&lt;/p&gt;
&lt;p&gt;对象提供缩略图或预览图像的资产独立于回放，可以生成单独的图片，也可以生成图片队列，这是获取视频缩略图的方式之一，还有另外两种ALAsset的thumbnail 和 - (UIImage *)imageFromSampleBuffer:(CMSampleBufferRef)sampleBuffer。&lt;/p&gt;
&lt;p&gt;4）AVAssetExportSession&lt;/p&gt;
&lt;p&gt;针对AVAsset源对象的内容进行转码，创建一个被指定输出形式的资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/AVAssetExportSession.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、Playback播放控制&quot;&gt;&lt;a href=&quot;#2、Playback播放控制&quot; class=&quot;headerlink&quot; title=&quot;2、Playback播放控制:&quot;&gt;&lt;/a&gt;2、Playback播放控制:&lt;/h3&gt;&lt;p&gt;1) AVPlayer&lt;/p&gt;
&lt;p&gt;你使用一个AVPlayer对象来实现控制器和用户接口单一或多种条目回放。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;-  (instancetype)initWithPlayerItem:(AVPlayerItem *)item&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;play 、 parse 、 end&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;- (void)seekToTime:(CMTime)time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2) AVPlayerLayer&lt;/p&gt;
&lt;p&gt;用于显示视频内容，相当于大屏幕。里面有videoGravity，默认值 AVLayerVideoGravityResizeAspect.&lt;/p&gt;
&lt;p&gt;3) AVPlayerItem&lt;/p&gt;
&lt;p&gt;一个AVPlayerItem代表资产的表现状态,由一个AVPlayer对象和可以观察到的状态。对视频播放状态修改一起监听的过程多数发生在正对这个对象的操作操作上，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;seekToTime，从哪里开始播放&lt;/li&gt;
&lt;li&gt;各种资源播放状态的通知AVPlayerItemFailedToPlayToEndTimeNotification&lt;br&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4) AVPlayerItemTrack &lt;/p&gt;
&lt;p&gt;你用一个AVPlayerItemTrack对象修改资产的表现状态跟踪(AVAssetTrack)一个AVPlayer对象。通常视频的加载播放有各种状态，我们需要KVO监听或者添加通知去知道播放器的准备、进行、暂停、停止等状态。&lt;/p&gt;
&lt;p&gt;5) AVQueuePlayer&lt;/p&gt;
&lt;p&gt;按照队列播放视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;queuePlayerWithItems，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;insertItem:(AVPlayerItem *)item&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;afterItem:(AVPlayerItem *)afterItem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3、Editing资源编辑&quot;&gt;&lt;a href=&quot;#3、Editing资源编辑&quot; class=&quot;headerlink&quot; title=&quot;3、Editing资源编辑:&quot;&gt;&lt;/a&gt;3、Editing资源编辑:&lt;/h3&gt;&lt;p&gt;AVFoundation框架提供了一个功能丰富的组类促进视听资产的编辑。AVFoundation的编辑API的核心成分，就是一组追踪从一个或多个不同的媒体资产。AVMutableComposition类提供了一个接口,用于插入和删除操作的痕迹,以及管理自己时间排序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/AVMutableComposition.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1）AVMutableComposition&lt;/p&gt;
&lt;p&gt;是一个可变的AVComposition子类，当您想要从现有资产创建一个新的资源。你可以添加和删除跟踪,可以添加、删除和时间范围。&lt;br&gt;比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;– insertEmptyTimeRange：可以增加一段空白时间&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;– insertTimeRange:ofAsset:atTime:error:&lt;br&gt;插入的所有跟踪给定的时间范围内指定的资产到接收机。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;
&lt;pre&gt;&lt;code&gt;AVAsset *videoAsset = &amp;lt;#AVAsset with at least one video track#&amp;gt;;
AVAsset *anotherVideoAsset = &amp;lt;#another AVAsset with at least one video track#&amp;gt;;
// Get the first video track from each asset.
AVAssetTrack *videoAssetTrack = [[videoAsset tracksWithMediaType:AVMediaTypeVideo] objectAtIndex:0];
AVAssetTrack *anotherVideoAssetTrack = [[anotherVideoAsset tracksWithMediaType:AVMediaTypeVideo] objectAtIndex:0];
// Add them both to the composition.
[mutableCompositionVideoTrack insertTimeRange:CMTimeRangeMake(kCMTimeZero,videoAssetTrack.timeRange.duration) ofTrack:videoAssetTrack atTime:kCMTimeZero error:nil];
[mutableCompositionVideoTrack insertTimeRange:CMTimeRangeMake(kCMTimeZero,anotherVideoAssetTrack.timeRange.duration) ofTrack:anotherVideoAssetTrack atTime:videoAssetTrack.timeRange.duration error:nil];&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2) AVMutableAudioMix &lt;/p&gt;
&lt;p&gt;一个AVMutableAudioMix对象管理混合音轨的输入参数。它允许自定义音频处理在回放期间音轨或执行其他操作。&lt;/p&gt;
&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;AVMutableAudioMix *mutableAudioMix = [AVMutableAudioMix audioMix];
// Create the audio mix input parameters object.
AVMutableAudioMixInputParameters *mixParameters = [AVMutableAudioMixInputParameters audioMixInputParametersWithTrack:mutableCompositionAudioTrack];
// Set the volume ramp to slowly fade the audio out over the duration of the composition.
[mixParameters setVolumeRampFromStartVolume:1.f toEndVolume:0.f timeRange:CMTimeRangeMake(kCMTimeZero, mutableComposition.duration)];
// Attach the input parameters to the audio mix.
mutableAudioMix.inputParameters = @[mixParameters];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4、Media-Capture媒体捕捉&quot;&gt;&lt;a href=&quot;#4、Media-Capture媒体捕捉&quot; class=&quot;headerlink&quot; title=&quot;4、Media Capture媒体捕捉:&quot;&gt;&lt;/a&gt;4、Media Capture媒体捕捉:&lt;/h3&gt;&lt;p&gt;1) AVCaptureDevice &lt;/p&gt;
&lt;p&gt;代表输入设备,如摄像头或麦克风&lt;/p&gt;
&lt;p&gt;2) AVCaptureInput &lt;/p&gt;
&lt;p&gt;输入设备的配置端口，我们可以理解为输入&lt;/p&gt;
&lt;p&gt;3）AVCaptureSession&lt;/p&gt;
&lt;p&gt;协调数据流从输入到输出,用startRunning开始从输入到输出的数据流,并调用stopRunning停止流动。采取关闭代理，保证取景器一直流动。&lt;/p&gt;
&lt;p&gt;4) AVCaptureOutput &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AVCaptureMovieFileOutput，输入到视频文件，代理AVCaptureFileOutputRecordingDelegate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AVCaptureVideoDataOutput，如果想要实时的处理每一帧数据，或想要有自己的图形动画，代理AVCaptureVideoDataOutputSampleBufferDelegate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AVCaptureAudioDataOutput ，音频数据，代理AVCaptureVideoDataOutputSampleBufferDelegate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AVCaptureStillImageOutput ，图片数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5）AVCaptureVideoPreviewLayer &lt;/p&gt;
&lt;p&gt;实时展示被session传出出来的视频流数据，也就是我们的取景器&lt;/p&gt;
&lt;p&gt;6）AVCaptureConnection &lt;/p&gt;
&lt;p&gt;代表捕获之间的连接输入和输出对象关联到一个捕获会话。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/AVCaptureConnection.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5、Export媒体输出&quot;&gt;&lt;a href=&quot;#5、Export媒体输出&quot; class=&quot;headerlink&quot; title=&quot;5、Export媒体输出:&quot;&gt;&lt;/a&gt;5、Export媒体输出:&lt;/h3&gt;&lt;p&gt;1) AVAssetExportSession&lt;/p&gt;
&lt;p&gt;针对AVAsset对象转码，创建一个输出的形式被指定出口预设内容。包括对输出媒体资源的属性设定，可以设置presetName进行视频品质压缩，AVAssetExportPresetLowQuality等。也可以设置属性包括：outputFileType&lt;br&gt;、fileLengthLimit、timeRange&lt;br&gt;等。&lt;/p&gt;
&lt;p&gt;2）AVAssetReader &lt;/p&gt;
&lt;p&gt;直接从媒体读取存储样本,获得样本解码成可渲染的形式。组合资产多个音轨和组合多个视频跟踪(通过使用AVAssetReaderAudioMixOutput和AVAssetReaderVideoCompositionOutput)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;addOutPut&lt;/li&gt;
&lt;li&gt;startReading&lt;/li&gt;
&lt;li&gt;cancelReading&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读取一个音频：&lt;/p&gt;
&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;AVAudioMix *audioMix = &amp;lt;#An AVAudioMix that specifies how the audio tracks from the AVAsset are mixed#&amp;gt;;
// Assumes that assetReader was initialized with an AVComposition object.
AVComposition *composition = (AVComposition *)assetReader.asset;
// Get the audio tracks to read.
NSArray *audioTracks = [composition tracksWithMediaType:AVMediaTypeAudio];
// Get the decompression settings for Linear PCM.
NSDictionary *decompressionAudioSettings = @{ AVFormatIDKey : [NSNumber numberWithUnsignedInt:kAudioFormatLinearPCM] };
// Create the audio mix output with the audio tracks and decompression setttings.
AVAssetReaderOutput *audioMixOutput = [AVAssetReaderAudioMixOutput assetReaderAudioMixOutputWithAudioTracks:audioTracks audioSettings:decompressionAudioSettings];
// Associate the audio mix used to mix the audio tracks being read with the output.
audioMixOutput.audioMix = audioMix;
// Add the output to the reader if possible.
if ([assetReader canAddOutput:audioMixOutput])
[assetReader addOutput:audioMixOutput];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3) AVAssetWriter&lt;/p&gt;
&lt;p&gt;使用一个AVAssetWriter对象媒体数据写入新文件指定视听的容器类型,如QuickTime电影文件或一个mp4文件,支持自动交叉媒体数据的多个并发的痕迹。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initWithURL:fileType:error:&lt;/li&gt;
&lt;li&gt;startWriting&lt;/li&gt;
&lt;li&gt;startSessionAtSourceTime&lt;/li&gt;
&lt;li&gt;addInput&lt;/li&gt;
&lt;li&gt;endSessionAtSourceTime&lt;/li&gt;
&lt;li&gt;finishWritingWithCompletionHandler&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;二、代码实践：&quot;&gt;&lt;a href=&quot;#二、代码实践：&quot; class=&quot;headerlink&quot; title=&quot;二、代码实践：&quot;&gt;&lt;/a&gt;二、代码实践：&lt;/h2&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;import-“TTCameraViewController-h”&quot;&gt;&lt;a href=&quot;#import-“TTCameraViewController-h”&quot; class=&quot;headerlink&quot; title=&quot;#import “TTCameraViewController.h”&quot;&gt;&lt;/a&gt;#import “TTCameraViewController.h”&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;三、问题回顾：&quot;&gt;&lt;a href=&quot;#三、问题回顾：&quot; class=&quot;headerlink&quot; title=&quot;三、问题回顾：&quot;&gt;&lt;/a&gt;三、问题回顾：&lt;/h2&gt;&lt;h3 id=&quot;1、视频文件写入崩溃：&quot;&gt;&lt;a href=&quot;#1、视频文件写入崩溃：&quot; class=&quot;headerlink&quot; title=&quot;1、视频文件写入崩溃：&quot;&gt;&lt;/a&gt;1、视频文件写入崩溃：&lt;/h3&gt;&lt;h4 id=&quot;现象：&quot;&gt;&lt;a href=&quot;#现象：&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;相机开始拍摄就会出现崩溃，时而出现，有时难以复现。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：&quot;&gt;&lt;a href=&quot;#原因与解决：&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;p&gt;1）startSessionAtSourceTime只能在 AVAssetWriterStatusWriting的之后调用，但是startWriting调用之后writer并没有立即变为writing状态，而已有一个极短的开始时间，参照苹果规范使用文档，只需要前面调用之后后面就可以跟着执行startSessionAtSourceTime，然而，我遇见了这问题，说明它并不是。随后我到stackoverflow上查了问题，发现有人早就提过，并没有答案，说是升级IOS8以后就没有了，可我这里是IOS9…随后我只能判断writer状态如果是writing就开始执行，如果不是就调用startWriting。&lt;/p&gt;
&lt;p&gt;2）[videoWriterInput appendSampleBuffer：xxx]这只能在startSessionAtSourceTime开始之后调用，和1是同样的情况，明明第一行调用了startSessionAtSourceTime，第二调用appendSampleBuffer就会崩溃，并且依旧是偶尔发生。但是这里的问题是没有一个状态可以判断是否已经开始startSessionAtSourceTime，这里就有点血崩了，不能像问题1一样判断解决，后来只好try catch了,稳住局面防止崩溃，丢失极少的毫秒级帧数。&lt;/p&gt;
&lt;h3 id=&quot;2、相机拍摄闪烁抖动：&quot;&gt;&lt;a href=&quot;#2、相机拍摄闪烁抖动：&quot; class=&quot;headerlink&quot; title=&quot;2、相机拍摄闪烁抖动：&quot;&gt;&lt;/a&gt;2、相机拍摄闪烁抖动：&lt;/h3&gt;&lt;h4 id=&quot;现象：-1&quot;&gt;&lt;a href=&quot;#现象：-1&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;开始拍摄时候，取景器闪烁抖动，引起一小部分可见范围内的视频内容发送抖动，并被存入文件中，体验差。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：-1&quot;&gt;&lt;a href=&quot;#原因与解决：-1&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;p&gt;在开始拍摄的时候，再去创建connection并传递设备和拍摄方向，有利于视频获取oritation，自然而然的横着拍摄也会竖着播放，但是问题在于connection的建立产生较大的链接，引起视频抖动，此抖动将被录制进入视频文件中。于是我采取在初始化input的时候就把connection就增加进去，当开始拍摄的时候不会发生抖动，但是牺牲的是视频的oritation需要自己根据用户拍摄的方向去手动修改视频方向。&lt;/p&gt;
&lt;h3 id=&quot;3、视频方向混乱：&quot;&gt;&lt;a href=&quot;#3、视频方向混乱：&quot; class=&quot;headerlink&quot; title=&quot;3、视频方向混乱：&quot;&gt;&lt;/a&gt;3、视频方向混乱：&lt;/h3&gt;&lt;h4 id=&quot;现象：-2&quot;&gt;&lt;a href=&quot;#现象：-2&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;背面摄像头拍摄，home键在下，拍摄出来的视频文件，在播放的时候，底部在手机右边，而不是底边，一次类推，home键在底部与视频的底部角度成90垂直关系。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：-2&quot;&gt;&lt;a href=&quot;#原因与解决：-2&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;self.videoOutPut = [[AVCaptureVideoDataOutput alloc] init];
NSDictionary * outputSettings = [[NSDictionary alloc] initWithObjectsAndKeys:[NSNumber numberWithInt:kCVPixelFormatType_32BGRA],(id)kCVPixelBufferPixelFormatTypeKey, nil];
[self.videoOutPut setVideoSettings:outputSettings];

//必须
if ([self.session canAddOutput:self.videoOutPut]) {
    [self.session addOutput:self.videoOutPut];
}

//先于
self.videoConnection = [self.videoOutPut connectionWithMediaType:AVMediaTypeVideo];
self.videoConnection.enabled = NO;
[self.videoConnection setVideoOrientation:AVCaptureVideoOrientationPortrait];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4、横着拍摄的视频横着播放：&quot;&gt;&lt;a href=&quot;#4、横着拍摄的视频横着播放：&quot; class=&quot;headerlink&quot; title=&quot;4、横着拍摄的视频横着播放：&quot;&gt;&lt;/a&gt;4、横着拍摄的视频横着播放：&lt;/h3&gt;&lt;h4 id=&quot;现象：-3&quot;&gt;&lt;a href=&quot;#现象：-3&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;横着拍摄的视频，放的时候是竖着的。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：-3&quot;&gt;&lt;a href=&quot;#原因与解决：-3&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;p&gt;因为上面解决视频抖动，导致不能直接设定拍摄时候的视频方向，从而需要根据手动的拍摄方向去修改视频的视图的方向。&lt;br&gt;考虑到用户可能锁住屏幕旋转，于是就CMMotionManager获取重力方向来判断，在VC出现或者开始拍摄的时候开启，在VC退出或者拍摄完成的的时候关闭。获得方向后，在视频的写入里直接修改方向即可。&lt;/p&gt;
&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;[videoWriterInput setTransform:CGAffineTransformScale(CGAffineTransformMakeRotation(-M_PI_2), 1.0, 1.0)];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5、录制视频有右边和底边绿色线条：&quot;&gt;&lt;a href=&quot;#5、录制视频有右边和底边绿色线条：&quot; class=&quot;headerlink&quot; title=&quot;5、录制视频有右边和底边绿色线条：&quot;&gt;&lt;/a&gt;5、录制视频有右边和底边绿色线条：&lt;/h3&gt;&lt;h4 id=&quot;现象：-4&quot;&gt;&lt;a href=&quot;#现象：-4&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;手机全屏录制的时候，设置视频输出宽度为手机的宽高，当宽高为基数的时候视频录制里面会出现绿色线条。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：-4&quot;&gt;&lt;a href=&quot;#原因与解决：-4&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;p&gt;不知道原因，神奇的bug，参照着段子的视频方法解决的，直接修改视频输出宽高为偶数。&lt;/p&gt;
&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;NSInteger videoWidth = [[NSNumber numberWithFloat:self.view.frame.size.width] integerValue];
NSInteger videoHeight = [[NSNumber numberWithFloat:self.view.frame.size.height] integerValue];
if (videoWidth % 2 == 1) {
    videoWidth = videoWidth - 1;
}
if (videoHeight % 2 == 1) {
    videoHeight = videoHeight - 1;
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IOS-视频录制-—-AVFoundation&quot;&gt;&lt;a href=&quot;#IOS-视频录制-—-AVFoundation&quot; class=&quot;headerlink&quot; title=&quot;IOS 视频录制 — AVFoundation&quot;&gt;&lt;/a&gt;IOS 视频录制 — AVFoun
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>RunLoop是如何跑起来的</title>
    <link href="http://xuzichao.com/2015/01/05/RunLoop%E6%98%AF%E5%A6%82%E4%BD%95%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/"/>
    <id>http://xuzichao.com/2015/01/05/RunLoop是如何跑起来的/</id>
    <published>2015-01-05T06:34:12.000Z</published>
    <updated>2017-09-05T07:11:38.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;对-Run-Loop-的理解&quot;&gt;&lt;a href=&quot;#对-Run-Loop-的理解&quot; class=&quot;headerlink&quot; title=&quot;对 Run Loop 的理解&quot;&gt;&lt;/a&gt;对 Run Loop 的理解&lt;/h1&gt;&lt;h2 id=&quot;一、Run-Loop为何存在&quot;&gt;&lt;a href=&quot;#一、Run-Loop为何存在&quot; class=&quot;headerlink&quot; title=&quot;一、Run Loop为何存在?&quot;&gt;&lt;/a&gt;一、Run Loop为何存在?&lt;/h2&gt;&lt;p&gt;我们从编写命令式的语句开始理解，一般我们写一个运行函数，只要顺序执行，一遍就过了，比如简单的NSLog一个“hello word”，这样我们就算完成了一个问候世界的程序。好简单的程序，但是一个复杂的系统，一个能称之为系统的程序，比如我们的手机App，它是不可能按照执行顺序一下执行完成就结束的，它包含了我们各类需求，会接受我们不同的操作，所以这个程序需要有一个设计的模式能够符合这样的应用场景，能够响应操作。所以，有了Event驱动的模式。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序可以一直运行并且接受用户的输入&lt;/li&gt;
&lt;li&gt;决定程序应该处理哪些Event&lt;/li&gt;
&lt;li&gt;主调方不能被被调方卡主，所以需要调用解耦。主调方就发个消息就完事了，就不管了，就可以去做别的了，被调防根据消息去派发、操作等等。这个概念就是(Message Queue) &lt;/li&gt;
&lt;li&gt;节省了CPU时间，比如时间片执行，这就是操作系统里的概念。&lt;/li&gt;
&lt;li&gt;没事的时候闲着，有事的时候激活它&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;二、Run-Loop-都包含了什么相关内容？&quot;&gt;&lt;a href=&quot;#二、Run-Loop-都包含了什么相关内容？&quot; class=&quot;headerlink&quot; title=&quot;二、Run Loop 都包含了什么相关内容？&quot;&gt;&lt;/a&gt;二、Run Loop 都包含了什么相关内容？&lt;/h2&gt;&lt;h3 id=&quot;1、CF层和F层&quot;&gt;&lt;a href=&quot;#1、CF层和F层&quot; class=&quot;headerlink&quot; title=&quot;1、CF层和F层&quot;&gt;&lt;/a&gt;1、CF层和F层&lt;/h3&gt;&lt;p&gt;CF层是C写的，跨平台，F层其实不干事的。GCD 有部分联系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_CF.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、常用&quot;&gt;&lt;a href=&quot;#2、常用&quot; class=&quot;headerlink&quot; title=&quot;2、常用&quot;&gt;&lt;/a&gt;2、常用&lt;/h3&gt;&lt;p&gt;NSTimer 完全依赖于RunLoop，UIEvent 都是RunLoop 跑的，AutoRelease 面试问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_normal.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;三、RunLoop调用堆栈&quot;&gt;&lt;a href=&quot;#三、RunLoop调用堆栈&quot; class=&quot;headerlink&quot; title=&quot;三、RunLoop调用堆栈&quot;&gt;&lt;/a&gt;三、RunLoop调用堆栈&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/images/RL_zhan.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;四、RunLoop构成元素&quot;&gt;&lt;a href=&quot;#四、RunLoop构成元素&quot; class=&quot;headerlink&quot; title=&quot;四、RunLoop构成元素&quot;&gt;&lt;/a&gt;四、RunLoop构成元素&lt;/h2&gt;&lt;h3 id=&quot;1、构成元素&quot;&gt;&lt;a href=&quot;#1、构成元素&quot; class=&quot;headerlink&quot; title=&quot;1、构成元素&quot;&gt;&lt;/a&gt;1、构成元素&lt;/h3&gt;&lt;p&gt;thread里面不是只能起一个RL，是可以多个的，但是必须嵌套。&lt;br&gt;RunLoop机制存在的一对多的关系，比如Mode和Timer&lt;br&gt;CFRunLoopSurece、CFRunLoopTimer、CFRunLoopObserver，主要的核心就是这三个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_consist.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、对CFRunLoopTimer的封装&quot;&gt;&lt;a href=&quot;#2、对CFRunLoopTimer的封装&quot; class=&quot;headerlink&quot; title=&quot;2、对CFRunLoopTimer的封装&quot;&gt;&lt;/a&gt;2、对CFRunLoopTimer的封装&lt;/h3&gt;&lt;p&gt;NSTimer、 performSelector:after 、 displayLink&lt;/p&gt;
&lt;h3 id=&quot;3、对CFRunLoopSurece的理解&quot;&gt;&lt;a href=&quot;#3、对CFRunLoopSurece的理解&quot; class=&quot;headerlink&quot; title=&quot;3、对CFRunLoopSurece的理解&quot;&gt;&lt;/a&gt;3、对CFRunLoopSurece的理解&lt;/h3&gt;&lt;p&gt;source是RL的数据源的抽象类，类似proctol，定义了两个version的source：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;source0：处理APP内部的世界、APP自己管理触发，比如UIEvent、CFSocket&lt;/li&gt;
&lt;li&gt;source1: 又RL和内核管理，Mach port 驱动 ，进程兼通讯的方式，往某个进程方法可以发到这个port上，对面的进程监听这个port 就是可以获得消息。比如：CFMachPort，CFMessagePort&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_Source0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4、对CFRunLoopServer对外报告状态&quot;&gt;&lt;a href=&quot;#4、对CFRunLoopServer对外报告状态&quot; class=&quot;headerlink&quot; title=&quot;4、对CFRunLoopServer对外报告状态&quot;&gt;&lt;/a&gt;4、对CFRunLoopServer对外报告状态&lt;/h3&gt;&lt;p&gt;比如我们在CAAnimation数组，多个动画，RL会通过判断依次的状态，将全部收集到一起后再开始执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_Observer.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5、CFRunLoopMode&quot;&gt;&lt;a href=&quot;#5、CFRunLoopMode&quot; class=&quot;headerlink&quot; title=&quot;5、CFRunLoopMode&quot;&gt;&lt;/a&gt;5、CFRunLoopMode&lt;/h3&gt;&lt;p&gt;RunLoop在同一时间段内，只能在唯一的特点的mode下Run。&lt;br&gt;更换Mode时，需要停止当前的Loop，然后重启动新的Loop。&lt;br&gt;Mode是个保证IOS滑动顺畅的关键，在这个mode下只执行滑动计算相关&lt;br&gt;可以创建自己的mode&lt;/p&gt;
&lt;p&gt;NSDefaultRunLoopMode: 默认的&lt;br&gt;UITrackingRunLoopMode:scrollView滑动&lt;br&gt;UIInitializationRunLoopMode: 启动的时候，私有的&lt;br&gt;NSRunLoopCommomModes: 1和2都能执行，作为一个数组，并无优先级&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相关Topic：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NSTimer 默认被加入NSDefaultRunLoopMode中，如果不希望被SCrollView影响，让滑动的时候timer也依然进行运行，就需要添加到NSRunLoopCommomModes中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RunLoopMode切换&lt;br&gt;都是重新起，不是切换回原来的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_Mode_Change.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCD和Run Loop的联系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GCD的计时器是它自己的计时器，只有main queue的时候有关系。Run Loop 会问一下 GCD 你这边在搞事情吗？有的话就抛出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_GCD.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auto Release&lt;br&gt;UIKit 通过的RunLoopServer在RunLoop两次Sleep间对Autorelease进行Pop和Push将这次Loop中产生的AutoRelease对象释放。两圈之间自动释放UI上自动释放池的东西，比如UITouch。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;六、RunLoop的挂起和唤醒&quot;&gt;&lt;a href=&quot;#六、RunLoop的挂起和唤醒&quot; class=&quot;headerlink&quot; title=&quot;六、RunLoop的挂起和唤醒&quot;&gt;&lt;/a&gt;六、RunLoop的挂起和唤醒&lt;/h3&gt;&lt;p&gt;CGRunLoopServiceMachPort 的作用就是发送消息，表示暂停还是激活，与内核进行交互。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_Port.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;七、RunLoop的实践&quot;&gt;&lt;a href=&quot;#七、RunLoop的实践&quot; class=&quot;headerlink&quot; title=&quot;七、RunLoop的实践&quot;&gt;&lt;/a&gt;七、RunLoop的实践&lt;/h3&gt;&lt;p&gt;1、AFNetworking&lt;br&gt;常驻线程，NSURLConnetion需要一个RL常驻，不然跑一次就没了。&lt;br&gt;比如有个需求需要一直在线程里面呆着。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)networkRequestThreadEntryPoint:(id)__unused object {
@autoreleasepool {
    [[NSThread currentThread] setName:@&amp;quot;AFNetworking&amp;quot;];

    NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
    [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];
    [runLoop run];
}
}
+ (NSThread *)networkRequestThread {
static NSThread *_networkRequestThread = nil;
static dispatch_once_t oncePredicate;
dispatch_once(&amp;amp;oncePredicate, ^{
    _networkRequestThread = [[NSThread alloc] initWithTarget:self selector:@selector(networkRequestThreadEntryPoint:) object:nil];
    [_networkRequestThread start];
});

return _networkRequestThread;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;2、 延迟加载tableview的图片&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UIImage *downLoadImage = ...;  
[self.avatarImageView performSelector:@selector(setImage:)  
                    withObject:downloadImage  
                    afterDelay:0  
                    inModes:@[NSDefaultRunLoopMode]];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、让Crash的APP回光返照&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 创建RunLoop
CFRunLoopRef runLoop = CFRunLoopGetCurrent();
// 设置Mode
NSArray *allModes = CFBridgingRelease(CFRunLoopCopyAllModes(runLoop));
// 弹窗告知 程序挂了
UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@&amp;quot;程序崩溃了&amp;quot; message:@&amp;quot;崩溃信息&amp;quot; delegate:nil cancelButtonTitle:@&amp;quot;取消&amp;quot; otherButtonTitles:nil];
[alertView show];
while (1) {
for (NSString *mode in allModes) {
// 快速的切换 Mode  就能处理滚动、点击等事件
CFRunLoopRunInMode((CFStringRef)mode, 0.001, false);
}
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对-Run-Loop-的理解&quot;&gt;&lt;a href=&quot;#对-Run-Loop-的理解&quot; class=&quot;headerlink&quot; title=&quot;对 Run Loop 的理解&quot;&gt;&lt;/a&gt;对 Run Loop 的理解&lt;/h1&gt;&lt;h2 id=&quot;一、Run-Loop为何存在&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo一下，博客诞生</title>
    <link href="http://xuzichao.com/2014/11/07/Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://xuzichao.com/2014/11/07/Hexo-个人博客使用介绍/</id>
    <published>2014-11-07T11:09:59.000Z</published>
    <updated>2017-09-06T02:53:48.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;个人博客搭建推荐Hexo&quot;&gt;&lt;a href=&quot;#个人博客搭建推荐Hexo&quot; class=&quot;headerlink&quot; title=&quot;个人博客搭建推荐Hexo&quot;&gt;&lt;/a&gt;个人博客搭建推荐Hexo&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;事实上，好早之前就尝试过自己搭建的个人博客，想积累写写技术知识点和生活上的见闻，希望它作为自己个人的一块土地。通常我们会在一些博客网站注册，比如博客园，然后开始作文，但这样的博客网站的界面UI设计挺糟糕的，作为还有一些审美的我是真的不太乐意去使用，虽然同为苦逼码农。后来出了一些品质比较高的静态博客等，也尝试去使用过，最后还是选择了使用博客组件去搭建，因为总觉得独立的才是自己的，大概程序员的内心都流淌着这样的独白。&lt;/p&gt;
&lt;p&gt;博客搭建框架组件很多，从WordPress到FarBox、Jekyll、Octopress、ghost、marboo、Hexo等等，他们基本都配合github使用,在网上各路大神的推荐之下，试过几款框架,基本都是在读完安装说明并开始有点小激动的时候，痛苦的安装过程让我放弃了这一方式。现在回想，一方面是由于自己前两年的电脑和网络都很烂，另一方面也是自己年轻没经验，搭建过程很多东西都需要一点点的搜索去学习，电脑一卡一慢就各种不爽，是真卡，我那个笔记本啊，最后就GG了。不过最后我还是搭建了自己的博客，并没有使用上述的哪种框架,前面的过程学习并知道了博客的搭建方式，索性自己就用FW设计了个人博客的UI界面，正好也会前端FE，就手写了博客页面Css和JS，这样博客的结界面就出来了，自己动手丰衣足食，然而它只是个静态的…到编译这一环节过不去了，毕竟JS属于前端的江湖，咋整…于是找了个python脚本，动态编译产生静态文件，只需要专心的写文字就好，随后可上传到github通过域名映射直接展示。这样，我就搭建好了自己的博客，界面都是我自己设计后用代码自己一行一行写的啊，简直高端大气上档次，简直满意的不得了！结果是非常符合我自己的审美设计要求，内心那个开心呐，随后开始了我的博客之路。&lt;/p&gt;
&lt;p&gt;到后来接触了Hexo,它就是我上述过程的一个更为优化的方案，功能完善，扩展强大。通过Hexo的使用也发现上手很快，我几乎是在半小时就搭建完成了博客，这速度让我为之欢呼，所以我决定转到Hexo来写作，那么，这里就写个文章来推荐一下吧。&lt;/p&gt;
&lt;h3 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;安装说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;一、准备工作&quot;&gt;&lt;a href=&quot;#一、准备工作&quot; class=&quot;headerlink&quot; title=&quot;一、准备工作&quot;&gt;&lt;/a&gt;一、准备工作&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;你得有自己的域名，买域名的地方比较多，有的坑有的好，我是在godaddy上买的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注册github账号，你将会免费使用到它提供的各种便利而强大的功能，免费的存储空间，下载开源项目等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把你的域名映射到github默认的博客地址上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装Node.js, npm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装git,生成SSH-KEY管理权限，配置域名到github关联&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;二、安装Hexo&quot;&gt;&lt;a href=&quot;#二、安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;二、安装Hexo&quot;&gt;&lt;/a&gt;二、安装Hexo&lt;/h5&gt;&lt;p&gt;1、hexo程序环境&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install -g hexo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、hexo工程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ hexo init 文件夹名称&lt;/p&gt;
&lt;p&gt;$ cd 文件夹名称&lt;/p&gt;
&lt;p&gt;$ npm install&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、会得到文件夹目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;├ ── _config.yml&lt;/p&gt;
&lt;p&gt;├ ── package.json&lt;/p&gt;
&lt;p&gt;├ ── scaffolds&lt;/p&gt;
&lt;p&gt;├ ── source&lt;/p&gt;
&lt;p&gt;├ ── _drafts&lt;/p&gt;
&lt;p&gt;└ ── _posts&lt;/p&gt;
&lt;p&gt;└ ── themes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4、按照命令行操作，此时到这里，别管这些文件是干啥的，来，我们接着往下走。&lt;/p&gt;
&lt;h5 id=&quot;三、生成第一篇文章&quot;&gt;&lt;a href=&quot;#三、生成第一篇文章&quot; class=&quot;headerlink&quot; title=&quot;三、生成第一篇文章&quot;&gt;&lt;/a&gt;三、生成第一篇文章&lt;/h5&gt;&lt;p&gt;1、创建文章&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo new 你的文章名称&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、编辑你的文章&lt;/p&gt;
&lt;p&gt;上面一步在你对应的文件夹下新建了一个Markdown文件，此时需要你使用对应的语法去编写文档，不知道的可以去学习下，用语言命令号来写Word文档，该有的有，不该有的没有，简直就是最爱&lt;/p&gt;
&lt;p&gt;3、编译&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo generate&lt;/p&gt;
&lt;p&gt;hexo server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时打开你的浏览器，默认地址是（ &lt;a href=&quot;http://0.0.0.0:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:4000/&lt;/a&gt; ），你就可以看到你的文章了，就是你刚才编写的文章。  &lt;/p&gt;
&lt;h5 id=&quot;四、发布到github&quot;&gt;&lt;a href=&quot;#四、发布到github&quot; class=&quot;headerlink&quot; title=&quot;四、发布到github&quot;&gt;&lt;/a&gt;四、发布到github&lt;/h5&gt;&lt;p&gt;由于前面你做好了准备工作，所以这里只需要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git commit -a -m “&lt;em&gt;*&lt;/em&gt;文章”&lt;/p&gt;
&lt;p&gt;git push&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时打开你的浏览器，比如你买的域名是( &lt;a href=&quot;http://baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://baidu.com/&lt;/a&gt; )，你打开它，和你在（ &lt;a href=&quot;http://0.0.0.0:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:4000&lt;/a&gt; ）看到的一毛一样，可以发给你的朋友看了。 &lt;/p&gt;
&lt;h3 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;p&gt;对于Hexo的使用，前后只介绍了关键的几个命令，为了可以可以快速搭建，都是基础入门很方便，麻烦的到是前面的准备工作，得一步步挨着来，有不懂的可以搜索和咨询。Hexo可以更换主题，也可以参照他人的主题制作，比如本站的主题yilia就是从github上找的开源主题，作者是我科的学长，已经获得了近2000颗星，这就是开源的力量，感谢学长litten的贡献。Hexo的其他扩展功能，请直接浏览Hexo的官网学习，我这里就不做的翻译了。&lt;/p&gt;
&lt;!--![](/assets/images/aoteman.png)--&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;个人博客搭建推荐Hexo&quot;&gt;&lt;a href=&quot;#个人博客搭建推荐Hexo&quot; class=&quot;headerlink&quot; title=&quot;个人博客搭建推荐Hexo&quot;&gt;&lt;/a&gt;个人博客搭建推荐Hexo&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>引用计数MRC、ARC与属性修饰符</title>
    <link href="http://xuzichao.com/2014/11/02/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0MRC%E3%80%81ARC%E4%B8%8E%E5%B1%9E%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://xuzichao.com/2014/11/02/引用计数MRC、ARC与属性修饰符/</id>
    <published>2014-11-02T08:23:47.000Z</published>
    <updated>2017-09-05T07:07:43.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一、MRC&quot;&gt;&lt;a href=&quot;#一、MRC&quot; class=&quot;headerlink&quot; title=&quot;一、MRC&quot;&gt;&lt;/a&gt;一、MRC&lt;/h2&gt;&lt;h3 id=&quot;1、内存管理问题&quot;&gt;&lt;a href=&quot;#1、内存管理问题&quot; class=&quot;headerlink&quot; title=&quot;1、内存管理问题&quot;&gt;&lt;/a&gt;1、内存管理问题&lt;/h3&gt;&lt;p&gt;传统的内存管理方式都需要业务代码自己处理，比如C和C++,程序员自己控制对象的使用周期，进行生成和释放。随着代码越来越复杂和人员的流动，就会出现无法确定的代码，如果内存对象一直留在那里，没人敢释放，整个程序占用的空间越来越大；胆大的人释放了可能导致crash。尽管遵循一些“谁创建谁释放”、“谁持有谁释放” 的原则，但依旧导致存储空间的浪费：为了保留仅仅一个内存对象，却要将与它关联的一大堆对象保留住，然而其中大部分已经不再使用了。&lt;/p&gt;
&lt;h3 id=&quot;2、解决方式&quot;&gt;&lt;a href=&quot;#2、解决方式&quot; class=&quot;headerlink&quot; title=&quot;2、解决方式&quot;&gt;&lt;/a&gt;2、解决方式&lt;/h3&gt;&lt;p&gt;就是引用计数。所有使用到同一内存对象的地方，使用者只要保证自己 retain 一次，release 一次，不用管别人是否使用。这样就实现了内存管理的分离，这就是MRC。当你使用new、alloc、copy方法创建一个对象时，该对象的保留计数器值为1.当不再使用该对象时，你要负责向该对象发送一条release或autorelease消息。当这个对象本身的引用计数为0时，就会被系统销毁。如果还有别处对它的引用，它就还在继续存在。&lt;br&gt;所有的内存管理是需要程序员手写代码控制的，一般就是持有操作和释放操作。&lt;br&gt;原则：谁持有，谁释放，不持有，不能释放，不再需要时，主动释放。&lt;/p&gt;
&lt;h2 id=&quot;二、-ARC&quot;&gt;&lt;a href=&quot;#二、-ARC&quot; class=&quot;headerlink&quot; title=&quot;二、 ARC&quot;&gt;&lt;/a&gt;二、 ARC&lt;/h2&gt;&lt;h3 id=&quot;1、本质&quot;&gt;&lt;a href=&quot;#1、本质&quot; class=&quot;headerlink&quot; title=&quot;1、本质&quot;&gt;&lt;/a&gt;1、本质&lt;/h3&gt;&lt;p&gt;ARC只是相对于MRC的一次改进，但它和之前的技术本质上没有区别。它会默认在程序代码合适的位置呗对象增加计数和释放计数对象，其实就是MRC那些繁琐的操作给默认自动化了。当然ARC本身的特性是有区别的。&lt;/p&gt;
&lt;p&gt;ARC是编译器时特性，而不是运行时特性。系统在运行时统一管理所有内存对象的释放，会导致增加额外的内存和 CPU 开销，程序员们依然在努力降低内存和CPU消耗。&lt;/p&gt;
&lt;h3 id=&quot;2、开关切换&quot;&gt;&lt;a href=&quot;#2、开关切换&quot; class=&quot;headerlink&quot; title=&quot;2、开关切换&quot;&gt;&lt;/a&gt;2、开关切换&lt;/h3&gt;&lt;p&gt;在target中找到对应的文件可以进行配置。&lt;/p&gt;
&lt;p&gt;打开ARC：-fobjc-arc&lt;br&gt;关闭ARC：-fno-objc-arc&lt;/p&gt;
&lt;h2 id=&quot;三、修饰符&quot;&gt;&lt;a href=&quot;#三、修饰符&quot; class=&quot;headerlink&quot; title=&quot;三、修饰符&quot;&gt;&lt;/a&gt;三、修饰符&lt;/h2&gt;&lt;h3 id=&quot;1、属性修饰符&quot;&gt;&lt;a href=&quot;#1、属性修饰符&quot; class=&quot;headerlink&quot; title=&quot;1、属性修饰符&quot;&gt;&lt;/a&gt;1、属性修饰符&lt;/h3&gt;&lt;h4 id=&quot;1-1-存取类型&quot;&gt;&lt;a href=&quot;#1-1-存取类型&quot; class=&quot;headerlink&quot; title=&quot;1.1 存取类型&quot;&gt;&lt;/a&gt;1.1 存取类型&lt;/h4&gt;&lt;p&gt;任何属性都可以声明为readwrite或readonly，且默认设置为readwrite。&lt;/p&gt;
&lt;p&gt;readwrite：程序自动创建setter/getter方法。&lt;br&gt;readonly：程序之创建getter方法。&lt;br&gt;此外，还可以自定义setter/getter方法。&lt;/p&gt;
&lt;h4 id=&quot;1-2-原子性&quot;&gt;&lt;a href=&quot;#1-2-原子性&quot; class=&quot;headerlink&quot; title=&quot;1.2 原子性&quot;&gt;&lt;/a&gt;1.2 原子性&lt;/h4&gt;&lt;p&gt;atomic是Objc使用的一种线程保护技术，基本上来讲，是防止在写未完成的时候被另外一个线程读取，造成数据错误。而这种机制是耗费系统资源的，所以在iPhone这种小型设备上，如果没有使用多线程间的通讯编程，那么nonatomic是一个非常好的选择。&lt;/p&gt;
&lt;h4 id=&quot;1-3-生命周期管理&quot;&gt;&lt;a href=&quot;#1-3-生命周期管理&quot; class=&quot;headerlink&quot; title=&quot;1.3 生命周期管理&quot;&gt;&lt;/a&gt;1.3 生命周期管理&lt;/h4&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;MRC&quot;&gt;&lt;a href=&quot;#MRC&quot; class=&quot;headerlink&quot; title=&quot;MRC&quot;&gt;&lt;/a&gt;MRC&lt;/h3&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;assign:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认类型。简单赋值，不更改引用计数。unsafe_unretained 修饰“基础数据类型”并不会报错，在实际使用时，与 assign 是完全等价的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copy:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;会拷贝传入的对象（即创建一个引用计数为1的新对象，但是内容与传入对象相同），并把新对象赋值给实例变量。常用与NSString,NSArray,NSDictionary,NSSet等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;retain: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;释放旧对象，并使传入的新对象引用计数+1。此属性只能用于NSObject及其子类，而不能用于Core Foundation。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;ARC&quot;&gt;&lt;a href=&quot;#ARC&quot; class=&quot;headerlink&quot; title=&quot;ARC&quot;&gt;&lt;/a&gt;ARC&lt;/h3&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;strong: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认类型，强引用，类似于retain。要求保留传入的对象，并放弃原有对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;weak: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;弱引用，不会使传入的对象引用计数+1。类似于assign，但与assign不同的是，当它们指向的对象被释放后，weak会被自动置为nil，而assign则不会，所以assign会导致“野指针”的出现，weak可以避免悬空指针。使用附有 weak 修饰符的变量会自动注册到 autoreleasepool。如果大量使用 weak 修饰的变量，则会消耗相应的 CPU 资源。良策是只在需要避免循环引用时使用 weak。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unsafe_unretained: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实质等同于assign。与weak的区别就是指向的对象如果被释放，其不会被置为nil，而导致悬空指针的出现。它是ARC模式下非对象属性的默认值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结:&quot;&gt;&lt;/a&gt;总结:&lt;/h3&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;strong/retain,两者等价。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;assign/unsafe_unretained，两者修饰非对象属性等价。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;默认属性：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MRC：(atomic, &lt;span class=&quot;keyword&quot;&gt;readwrite&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ARC下对象类型属性：(atomic, &lt;span class=&quot;keyword&quot;&gt;readwrite&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ARC下非对象类型：(atomic, &lt;span class=&quot;keyword&quot;&gt;readwrite&lt;/span&gt;, unsafe_unretained)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、变量关键字修饰符&quot;&gt;&lt;a href=&quot;#2、变量关键字修饰符&quot; class=&quot;headerlink&quot; title=&quot;2、变量关键字修饰符&quot;&gt;&lt;/a&gt;2、变量关键字修饰符&lt;/h3&gt;&lt;figure class=&quot;highlight avrasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;_string:&lt;/span&gt; 是默认引用类型的关键字。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;__weak:&lt;/span&gt; 声明一个可以自动置nil的弱引用。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;__unsafe_unretained:&lt;/span&gt; 弱引用，但是当指向对象被释放时，不会被置nil。所以会导致野指针的出现。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;__autoreleasing:&lt;/span&gt;用来修饰一个函数的参数，这个参数会在函数返回的时候被自动释放。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;对应关系：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;：__&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;修饰符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;retain：__&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;修饰符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;：__unsafe_unretained修饰符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unsafe_unretained：__unsafe_unretained修饰符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;：__&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;修饰符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;：__&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;修饰符(但是赋值的是被复制的对象)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、MRC&quot;&gt;&lt;a href=&quot;#一、MRC&quot; class=&quot;headerlink&quot; title=&quot;一、MRC&quot;&gt;&lt;/a&gt;一、MRC&lt;/h2&gt;&lt;h3 id=&quot;1、内存管理问题&quot;&gt;&lt;a href=&quot;#1、内存管理问题&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>FE进阶之路</title>
    <link href="http://xuzichao.com/2014/10/15/%E5%89%8D%E7%AB%AFFE%E9%80%9F%E6%88%90/"/>
    <id>http://xuzichao.com/2014/10/15/前端FE速成/</id>
    <published>2014-10-15T15:22:12.000Z</published>
    <updated>2017-09-06T02:48:59.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;转移动端开发之前，曾是名呆萌的FE，在学校的时候还算勤劳，上线了大大小小的产品，冰岩作坊见证了我的成长，认识了很多朋友。如今回顾一下，整理一条前端之路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;面试点&quot;&gt;&lt;a href=&quot;#面试点&quot; class=&quot;headerlink&quot; title=&quot;面试点&quot;&gt;&lt;/a&gt;面试点&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/images/feTotal.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h2&gt;&lt;h3 id=&quot;一、语言&quot;&gt;&lt;a href=&quot;#一、语言&quot; class=&quot;headerlink&quot; title=&quot;一、语言&quot;&gt;&lt;/a&gt;一、语言&lt;/h3&gt;&lt;h3 id=&quot;1、HTML&quot;&gt;&lt;a href=&quot;#1、HTML&quot; class=&quot;headerlink&quot; title=&quot;1、HTML&quot;&gt;&lt;/a&gt;1、HTML&lt;/h3&gt;&lt;h4 id=&quot;1-1-理解&quot;&gt;&lt;a href=&quot;#1-1-理解&quot; class=&quot;headerlink&quot; title=&quot;1.1 理解&quot;&gt;&lt;/a&gt;1.1 理解&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;HyperText Markup Language&lt;/code&gt;超文本标记语言。语言自不必说，超文本意味着『将网页彼此连接链接，超越了传统意义上的书本文字』，标记则说明了语言的特点是描述性的。比如可以通过标签来描述内容：&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;是一个标题(headline)；&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;是一个段落(paragraph)；&lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;是一段代码等等。还可以通过声明属性进一步描述如&lt;code&gt;&amp;lt;input class=&amp;quot;form-inline&amp;quot; id=&amp;quot;gender-input-female&amp;quot; type=&amp;quot;radio&amp;quot; name=&amp;quot;gender&amp;quot; value=&amp;quot;female&amp;quot;&amp;gt;&lt;/code&gt;。HTML是一门应当注重语义化的语言，尤其在HTML5的规范中更是强调此，如增加了&lt;code&gt;&amp;lt;article&amp;gt;``&amp;lt;section&amp;gt;&lt;/code&gt;等标签。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;标签有自闭和和成对闭合两种，具体规则要参考规范，注意自闭合标签结尾的反斜杠不是必须的。常见的自闭合标签是&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTML在被浏览器渲染时，会有两种元素，非替换元素指的是其内容无需被浏览器替换，直接显示即可。而替换原素则需要浏览器进行转换才能正常工作，如&lt;code&gt;&amp;lt;img&amp;gt;&amp;lt;textarea&amp;gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTML中也可以嵌入如SVG等其他语言内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2、CSS&quot;&gt;&lt;a href=&quot;#2、CSS&quot; class=&quot;headerlink&quot; title=&quot;2、CSS&quot;&gt;&lt;/a&gt;2、CSS&lt;/h3&gt;&lt;h4 id=&quot;2-1-理解&quot;&gt;&lt;a href=&quot;#2-1-理解&quot; class=&quot;headerlink&quot; title=&quot;2.1 理解&quot;&gt;&lt;/a&gt;2.1 理解&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cascading Style Sheets&lt;/code&gt;层叠样式表。表自不必说，样式也是顾名思义，关键点在于层叠。CSS的层叠体现在选择器的关系上：通过选择器的优先级来决定样式的使用与否，能够灵活的控制HTML元素的样式。&lt;/li&gt;
&lt;li&gt;一个普通的『规则』由如下部分组成：选择器+声明块（声明由属性：值组成），此外还有@语句，可用于媒体查询、引入文件等，在此略过。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.class&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;rgba&lt;/span&gt;(0,0,0,.6);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;transition&lt;/span&gt;: height .&lt;span class=&quot;number&quot;&gt;3s&lt;/span&gt; ease-in-out .&lt;span class=&quot;number&quot;&gt;5s&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-tap-highlight-color&lt;/span&gt;: transparent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.night&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.class&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: black;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;由于浏览器纷争以及标准的制定落后于市场，CSS存在着很严重的兼容性问题。具体问题暂且不表，但为了解决这些问题，业界目前普遍使用『预处理器』和『后处理器』来增强CSS。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a、 预处理器主要是通过对CSS进行改编或扩展行成一种新的语言，然后通过『预处理器』编译为可被浏览器使用的CSS。常见的就是LESS和SCSS。&lt;br&gt;b、 后处理器是指在生成一个标准的CSS后，进行一些列的优化的工具。如用于自动补充各浏览器前缀的autoprefixer；用于去除冗余css的CSSClean等。大都依赖于PostCSS这个工具。&lt;/p&gt;
&lt;h3 id=&quot;3、JavaScript&quot;&gt;&lt;a href=&quot;#3、JavaScript&quot; class=&quot;headerlink&quot; title=&quot;3、JavaScript&quot;&gt;&lt;/a&gt;3、JavaScript&lt;/h3&gt;&lt;h4 id=&quot;3-1-理解&quot;&gt;&lt;a href=&quot;#3-1-理解&quot; class=&quot;headerlink&quot; title=&quot;3.1 理解&quot;&gt;&lt;/a&gt;3.1 理解&lt;/h4&gt;&lt;p&gt;这个没有一个明确的翻译，名字里有Java纯粹是为了蹭热度。广义上的JS由其语言核心+DOM+BOM组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript有一个比较简单的出生，但有个比较折腾的成长。目前其标准属于EcmaScript（Flash使用的ActionScript也是这个标准下的产物），现在的版本是第7版，正式名是ES2017，前几天刚定稿，老浏览器都不支持，需要通过bable工具转换为第5版才能让绝大多数浏览器正常执行。&lt;/li&gt;
&lt;li&gt;JS是弱类型语言，其基本数据类型有number/boolean/string/undefined/symbol/(null)、引用类型object，包括function和array。基本类型按值访问，引用类型按地址访问。基本数据类型用typeof区分，引用类型需要使用instanceof或其特殊的判断方法区分。&lt;/li&gt;
&lt;li&gt;在ES5时代变量作用域仅限于函数内，ES6后通过let能指定块级作用于。var存在变量提升，是个bug隐患点。&lt;/li&gt;
&lt;li&gt;ES5时代没有定义class，可以通过function+prototype的方式模拟一个类。JS的继承主要是通过原型链实现的：&lt;code&gt;instance.__proto__.....__proto__ === Class.prototype&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;DOM（文档对象模型）描述了处理网页内容的方法和接口。如document.getElementById。&lt;/li&gt;
&lt;li&gt;BOM（浏览器对象模型）描述了与浏览器进行交互的方法和接口。如location.href。&lt;/li&gt;
&lt;li&gt;通过XMLHttpRequest发送HTTP请求，可以通过指定异步的方式实现AJAX。异步请求存在同源限制。&lt;/li&gt;
&lt;li&gt;ES6规范中明确了异步操作的推荐做法即Promise。&lt;br&gt;主要理解两点：异步与事件驱动。两者相互结合构成了现在的JS的运行逻辑。&lt;/li&gt;
&lt;li&gt;TypeScript&lt;br&gt;微软推出谷歌力捧的JS超集，实现了强类型、类等诸多C++、Java功能，目前也需要通过编译才能执行，未有浏览器原生支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;二、代码执行环境&quot;&gt;&lt;a href=&quot;#二、代码执行环境&quot; class=&quot;headerlink&quot; title=&quot;二、代码执行环境&quot;&gt;&lt;/a&gt;二、代码执行环境&lt;/h3&gt;&lt;h3 id=&quot;1、浏览器&quot;&gt;&lt;a href=&quot;#1、浏览器&quot; class=&quot;headerlink&quot; title=&quot;1、浏览器&quot;&gt;&lt;/a&gt;1、浏览器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;浏览器的历史不过多介绍，当前PC主流有Chrome和IE/Edge两个，其余的Firefox、safari都很小众。这三类都是独自研制开发。移动端上的主流几乎只有Safari和Chrome两种。&lt;/li&gt;
&lt;li&gt;单独谈渲染引擎主流的有Webkit(Blink)、Trident、Gecko。单独谈JS引擎主要有V8、charkra等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2、Node-js&quot;&gt;&lt;a href=&quot;#2、Node-js&quot; class=&quot;headerlink&quot; title=&quot;2、Node.js&quot;&gt;&lt;/a&gt;2、Node.js&lt;/h3&gt;&lt;p&gt;Node.js®是一个基于Chrome V8 引擎的 JavaScript 运行时。 Node.js 使用高效、轻量级的事件驱动、非阻塞 I/O 模型。Node.js 之生态系统是目前最大的开源包管理系统。&lt;/p&gt;
&lt;h3 id=&quot;三、代码执行流程&quot;&gt;&lt;a href=&quot;#三、代码执行流程&quot; class=&quot;headerlink&quot; title=&quot;三、代码执行流程&quot;&gt;&lt;/a&gt;三、代码执行流程&lt;/h3&gt;&lt;h3 id=&quot;1、编译&quot;&gt;&lt;a href=&quot;#1、编译&quot; class=&quot;headerlink&quot; title=&quot;1、编译&quot;&gt;&lt;/a&gt;1、编译&lt;/h3&gt;&lt;p&gt;以现阶段的通常情况来看，我们采用超前的ES6、ES7来写JS，用Less写CSS，用React等来实现View，这些代码通过import/export引用和发布。然后通过webpack、fis等工具『编译』成能被浏览器执行的HTML/JS/CSS。&lt;/p&gt;
&lt;h3 id=&quot;2、部署：&quot;&gt;&lt;a href=&quot;#2、部署：&quot; class=&quot;headerlink&quot; title=&quot;2、部署：&quot;&gt;&lt;/a&gt;2、部署：&lt;/h3&gt;&lt;p&gt;其中HTML如果涉及到与后端数据的直接耦合，则被认为是『模板』，部署到相应的接入层逻辑指定的线上地址，而其他内容如.js/.css/.png/.svg等，则与服务端分离，部署在CDN上以提供更快的访问速度。这个过程主要的问题在于如何控制浏览器缓存（HTTP缓存）。&lt;/p&gt;
&lt;h3 id=&quot;3、访问：&quot;&gt;&lt;a href=&quot;#3、访问：&quot; class=&quot;headerlink&quot; title=&quot;3、访问：&quot;&gt;&lt;/a&gt;3、访问：&lt;/h3&gt;&lt;p&gt;从URL被请求到HTML被返回的逻辑就暂且略去，主要谈HTML返回后的过程。&lt;br&gt;这一部分以真实请求的Performance为例讲解吧。不赘述？？？？后续找几篇文章填补空白。&lt;/p&gt;
&lt;h3 id=&quot;4、JSBridge-链接跳转&quot;&gt;&lt;a href=&quot;#4、JSBridge-链接跳转&quot; class=&quot;headerlink&quot; title=&quot;4、JSBridge(链接跳转)&quot;&gt;&lt;/a&gt;4、JSBridge(链接跳转)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JS → Native：发特定规则的url，被native拦下来就好了。&lt;/li&gt;
&lt;li&gt;Native → JS：Native可以在JSContext中注入代码，或者通过javascript:xxxx这种方式调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;四、常见的问题与debug&quot;&gt;&lt;a href=&quot;#四、常见的问题与debug&quot; class=&quot;headerlink&quot; title=&quot;四、常见的问题与debug&quot;&gt;&lt;/a&gt;四、常见的问题与debug&lt;/h3&gt;&lt;h3 id=&quot;1、如何获取与定位问题&quot;&gt;&lt;a href=&quot;#1、如何获取与定位问题&quot; class=&quot;headerlink&quot; title=&quot;1、如何获取与定位问题&quot;&gt;&lt;/a&gt;1、如何获取与定位问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;最好用的工具就是chrome的开发者工具了。&lt;h3 id=&quot;2、为什么会白页&quot;&gt;&lt;a href=&quot;#2、为什么会白页&quot; class=&quot;headerlink&quot; title=&quot;2、为什么会白页&quot;&gt;&lt;/a&gt;2、为什么会白页&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;一种是JS的BUG导致的，一般来说在相同文件内的JS会由于错误阻塞运行。也就是上文有错，下文直接挂。当渲染在下文时就容易出现这种问题。&lt;/li&gt;
&lt;li&gt;另一种情况比较少见就是在load事件后调用document.write导致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3、XSS与CSRF&quot;&gt;&lt;a href=&quot;#3、XSS与CSRF&quot; class=&quot;headerlink&quot; title=&quot;3、XSS与CSRF&quot;&gt;&lt;/a&gt;3、XSS与CSRF&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;XSS是老生常谈的话题了，主要是由于HTML语言的『保留字』（&amp;lt; &amp;gt; ‘ “ ）被直接使用导致，大部分能够通过HTML转义避免。&lt;br&gt;CSRF现在大都不常见了，基本通过加密token校验来避免。&lt;h3 id=&quot;4、性能&quot;&gt;&lt;a href=&quot;#4、性能&quot; class=&quot;headerlink&quot; title=&quot;4、性能&quot;&gt;&lt;/a&gt;4、性能&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;为何觉得卡，是因为人眼的构造决定的，实际上没有连续的动画，动画都是一帧一帧组成的。如果普通大众能接受60帧，那就意味着对HTML的相应操作要在1000/60m=16ms内执行完毕，才不会掉帧。&lt;/li&gt;
&lt;li&gt;还是可以通过chrome的preformance工具来进行定位。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;五、「框架」新时代&quot;&gt;&lt;a href=&quot;#五、「框架」新时代&quot; class=&quot;headerlink&quot; title=&quot;五、「框架」新时代&quot;&gt;&lt;/a&gt;五、「框架」新时代&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;jQurey、Bootstrap：这个时代的特点就是乱，文件瞎引用，样式瞎写，但干起活来就是快，维护体验很差。&lt;/li&gt;
&lt;li&gt;backbone：开始有了一些思想，主要是类比了MVC，在前端也搞了全套的M-V-C，强调数据-模板（样式）-逻辑分离。&lt;/li&gt;
&lt;li&gt;MVVM：再后来开始分化，一些人觉得C不足以表意，因为其实干来干去都是在操作M和V，不如就叫VM，所以是MVVM。另一些人觉得前端这么简单的事儿不要搞复杂留着V就足够了，也就出现了MVVM的代表Angular，和纯View层的代表React。&lt;/li&gt;
&lt;li&gt;Vue.js:渐进式框架,Vue 从根本上采用最小成本、渐进增量的设计。Vue 的核心库只专注于视图层，并且很容易与其他第三方库或现有项目集成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;六、新技术&quot;&gt;&lt;a href=&quot;#六、新技术&quot; class=&quot;headerlink&quot; title=&quot;六、新技术&quot;&gt;&lt;/a&gt;六、新技术&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;PWA：（ Progressive Web Apps，渐进式网页应用）是由谷歌提出的新一代 Web 应用概念，旨在提供可靠、快速、类似 Native 应用的服务方案。&lt;/li&gt;
&lt;li&gt;AMP：谷歌提倡的一些列『最佳实践』，通过实现这些最佳实践，大概率能让你的网站速度飙升。&lt;/li&gt;
&lt;li&gt;reactNative、Weex：以虚拟DOM技术为核心，尝试将其用非Web技术渲染执行。&lt;/li&gt;
&lt;li&gt;webSocket：在HTTP2出现以前，提供的一个基于TCP的socket应用接口，全双工、可二进制传输是其特点。&lt;/li&gt;
&lt;li&gt;WebGL：基于canvas和OpenGL，使得web也能进行大型游戏和渲染场景的制作。&lt;/li&gt;
&lt;li&gt;WASM：厉害了，所有能被JS实现的最终都会被JS实现。类似安卓的so。&lt;/li&gt;
&lt;li&gt;微信小程序：个人理解是：对现有限制浏览器体验的内容删减，纯数据驱动以限制web能力，缓存模板甚至缓存运行时以提升性能，提供了一个本质还是浏览器的东西。&lt;/li&gt;
&lt;li&gt;Electron： 打包一个浏览器，钉钉。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;七、讨论&quot;&gt;&lt;a href=&quot;#七、讨论&quot; class=&quot;headerlink&quot; title=&quot;七、讨论&quot;&gt;&lt;/a&gt;七、讨论&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对残障人士更友好的网页：这个话题里中国比较远，下一题。&lt;/li&gt;
&lt;li&gt;HybridApp：这个题好，其实非核心功能和弱交互功能，完全可以交给web实现。而web主要性能受限的网络则可以通过Hybrid的方式预先集成到App内部，需要时就能立刻提供服务。类似PWA。&lt;/li&gt;
&lt;li&gt;参考书籍与站点 ：&lt;br&gt;《JavaScript高级程序设计》、《深入理解ES6》、Google Developer Docs、Mozilla Web Docs&lt;/li&gt;
&lt;li&gt;常用工具 ：caniuse 查兼容性的神器、tinypng 压缩图片好工具&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转移动端开发之前，曾是名呆萌的FE，在学校的时候还算勤劳，上线了大大小小的产品，冰岩作坊见证了我的成长，认识了很多朋友。如今回顾一下，整理一条前端之路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;面试点&quot;&gt;&lt;a href=&quot;#面试点&quot; c
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>再见，My Hust</title>
    <link href="http://xuzichao.com/2014/09/12/%E5%86%8D%E8%A7%81%EF%BC%8CMy%20Hust/"/>
    <id>http://xuzichao.com/2014/09/12/再见，My Hust/</id>
    <published>2014-09-12T11:09:59.000Z</published>
    <updated>2017-06-20T12:07:50.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;后续&quot;&gt;&lt;a href=&quot;#后续&quot; class=&quot;headerlink&quot; title=&quot;后续&quot;&gt;&lt;/a&gt;后续&lt;/h3&gt;&lt;p&gt;不需要华丽的辞藻去颂赞，你的美与伟大一直浸染着每个Huster的心。&lt;/p&gt;
&lt;p&gt;大学四年，匆匆，不曾写过什么日记，好像是少了些记忆，从来都认为自己大学过的很对，走的路很直，如今毕业工作再回头看，迷迷茫茫，忙忙碌碌，勤勤恳恳，便是那过去的日子。最值得骄傲的就是，大学四年的里都是自己满意的经历过程，没有后悔。&lt;/p&gt;
&lt;p&gt;跨入华科校门，我期盼在大学结识一群好伙伴，然后，我就遇见了你们，并把我们的毕业旅行选在了彩云之南。&lt;/p&gt;
&lt;h3 id=&quot;记忆不散的相册&quot;&gt;&lt;a href=&quot;#记忆不散的相册&quot; class=&quot;headerlink&quot; title=&quot;记忆不散的相册&quot;&gt;&lt;/a&gt;记忆不散的相册&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/9.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;后续&quot;&gt;&lt;a href=&quot;#后续&quot; class=&quot;headerlink&quot; title=&quot;后续&quot;&gt;&lt;/a&gt;后续&lt;/h3&gt;&lt;p&gt;不需要华丽的辞藻去颂赞，你的美与伟大一直浸染着每个Huster的心。&lt;/p&gt;
&lt;p&gt;大学四年，匆匆，不曾写过什么日记，好像是少了些记忆，从来
    
    </summary>
    
    
      <category term="时光相册" scheme="http://xuzichao.com/tags/%E6%97%B6%E5%85%89%E7%9B%B8%E5%86%8C/"/>
    
  </entry>
  
</feed>
