<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>徐子超的博客</title>
  <subtitle>程先生，你好。客气，叫我序员吧。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuzichao.com/"/>
  <updated>2017-01-25T03:26:50.000Z</updated>
  <id>http://xuzichao.com/</id>
  
  <author>
    <name>卡图睡不醒</name>
    <email>529841962@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重开日，再无少年</title>
    <link href="http://xuzichao.com/2016/10/25/%E9%87%8D%E5%BC%80%E6%97%A5%EF%BC%8C%E6%97%A0%E5%86%8D%E5%B0%91%E5%B9%B4/"/>
    <id>http://xuzichao.com/2016/10/25/重开日，无再少年/</id>
    <published>2016-10-25T14:59:12.000Z</published>
    <updated>2017-01-25T03:26:50.000Z</updated>
    
    <content type="html">&lt;p&gt;现在已经是16年的年尾了，想起元旦节那天和几个老基友在一棵年树下合影留念，恰好是自己入职今日头条第一天，在工作上又上了一个台阶，特别开心。&lt;/p&gt;
&lt;p&gt;一月的时候给自己定了16年的目标，16年是本命年啊，要好好的过好这一年，针对个人的各方面规划，看起来真是个美好的愿景，一天天按部就班的做着事情，希望能再年底的时候给自己惊喜。如今回头去看，有的目标还没有进展！贼哈哈哈哈哈！想起来我也是快乐的！是啊，这大半年有些浪。总结回顾，大概去年创业大半年给整累了，来了头条后，各种优越的生活，各种轻松的姿态，逐渐的也就有些懒散，当然头条也是创业驱动型公司，氛围是很强烈的，不过对于我这样从创业公司过来的，还是觉得条件优越太多了。目标这个东西确实容易让人清醒，想起当时的积极澎湃都去哪了，看着一个个目标的进度，上哪说理去？客观原因分析后，主要是一年自己没有想好怎么过，年初定的目标有偏颇，总是一个探索的心，自己尝试了好多方向去认识自己，在知道想干什么的前提下，尝试去判断自己能不能做到。而这些尝试呢，和原本设定的目标是有出入的。既定的目标的实现时机由于一个客观原因也发生了变化，在今年是完成不了的。就这样，在一个个夜里深睡去，直到每日早上九十点，偶尔自己的生活节奏也在被打断。期间，找我的头聊了聊，他也看出了我的一些困惑，觉得我可能是有些茫然，大概对应了工作两年的人都会有的现象，这又让我想起了大学的时候，好像大二是有点茫然，未来那么长，我该做点什么。对，是的，我该做点什么了。中间我也修正过一些计划，在中秋节的时候总结了一下，但是没有从根本上做出变动。&lt;/p&gt;
&lt;p&gt;经过不断的自我认识，不断的尝试，我觉得现在比较清楚自己之后的安排了，可以拟定一些方向性质上的目标，以前定目标都是相对较短期目标，接下来要完成这些目标的时间是相对较长的，是到17年年底的时候才会来check的。因为是从自己本身目前的情况来看，这样做合适，这段时间内，我也做不了比这些更大的事情了。总感觉这次和以往定目标时不太一样，也许这就是成长。&lt;/p&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;目标 1： IOS技术扩展挖深&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;头条的业务需求、管理一块业务
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目标 2： 产品经理继续学习&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;头条数据分析；网站上学习理论知识，应用在独立App上
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目标 3： 维护一个头条号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;每周发两篇
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目标 4： 推送工作性质的独立APP研发&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;IOS端至少能够达到演示的目的
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目标 5： 托福考试过100分&lt;/p&gt;
&lt;p&gt;目标 6： 申请香港或新加坡的硕士&lt;/p&gt;
&lt;p&gt;目标 7： 成都或者重庆买下自己的第一套住房&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;去闯，闯不了就滚回去
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目标 8： 学会摄影&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一个人拥有一个爱好是很重要的
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目标 9： 锻炼&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;健康是最重要的，年轻人就得有肌肉，有power 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;目标 10：学会一门乐器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;比如钢琴，会谈一些基本曲目
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;CHECK&quot;&gt;&lt;a href=&quot;#CHECK&quot; class=&quot;headerlink&quot; title=&quot;CHECK&quot;&gt;&lt;/a&gt;CHECK&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;目标 1： &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问答业务进展顺利，即将做独立的APP，由我Cover原先业务，加油！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标 2：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一直在看产品的文章，还不算多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标 4： &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做了部分APP的组件和雏形，在做解耦拆分，工作量大。&lt;/p&gt;
&lt;p&gt;目标 5：&lt;/p&gt;
&lt;p&gt;前后加起来背了有两千单词，中间中断，各种事情杂事太多，需要肃清需求，春节回来先专注在这一件事情上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标 7： &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从11月份和12月份的观察，到1月份回去查看了各处的楼盘，对这事情的认识有所改观，房子这个事情先不着急，但是也可以做，牵扯到的东西多，春节回来办公积金卡，5月份的时候可以再去看看。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标 8：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单反出去拍过，有进步；自己买了个无人机，飞行了几次，在北京由于禁飞限制，每次都要开车跑很远，飞行成本很高。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标 9：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开始打乒乓球和羽毛球了，力量训练少。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;现在已经是16年的年尾了，想起元旦节那天和几个老基友在一棵年树下合影留念，恰好是自己入职今日头条第一天，在工作上又上了一个台阶，特别开心。&lt;/p&gt;
&lt;p&gt;一月的时候给自己定了16年的目标，16年是本命年啊，要好好的过好这一年，针对个人的各方面规划，看起来真是个美好的愿景，一
    
    </summary>
    
    
      <category term="随笔小结" scheme="http://xuzichao.com/tags/%E9%9A%8F%E7%AC%94%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2016重庆高考毕业生本科专业选择推荐</title>
    <link href="http://xuzichao.com/2016/06/12/2016%E9%87%8D%E5%BA%86%E9%AB%98%E8%80%83%E6%AF%95%E4%B8%9A%E7%94%9F%E6%9C%AC%E7%A7%91%E4%B8%93%E4%B8%9A%E9%80%89%E6%8B%A9%E6%8E%A8%E8%8D%90/"/>
    <id>http://xuzichao.com/2016/06/12/2016重庆高考毕业生本科专业选择推荐/</id>
    <published>2016-06-12T11:09:59.000Z</published>
    <updated>2017-01-25T03:30:13.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;普通高校本科专业选择推荐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;此文针对2016届高考毕业生就读普通大学本科专业推荐，推荐凭借自己的社会认识和对众多所在对应专业的同学学习从业动向判定而得，等高考成绩出来了，结合本省排名、个人意向、专业招生人数、专业往年招生分数，即可快速定位。本文是我表弟16年重庆高考结束，成绩还没出来前特意针对他个人给预备着的，所以带有些许的个人色彩，仅仅作为参考，有错勿怪。&lt;/p&gt;
&lt;p&gt;徐子超 (&lt;a href=&quot;http://xuzichao.com&quot;&gt;http://xuzichao.com&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;2016.6.12&lt;/p&gt;
&lt;h2 id=&quot;可选专业&quot;&gt;&lt;a href=&quot;#可选专业&quot; class=&quot;headerlink&quot; title=&quot;可选专业&quot;&gt;&lt;/a&gt;可选专业&lt;/h2&gt;&lt;h3 id=&quot;01学科门类：哲学-（所有门类不考虑）&quot;&gt;&lt;a href=&quot;#01学科门类：哲学-（所有门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;01学科门类：哲学 （所有门类不考虑）&quot;&gt;&lt;/a&gt;01学科门类：哲学 &lt;font color=&quot;blue&quot;&gt;（所有门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;h3 id=&quot;02学科门类：经济学-（所有门类可选）&quot;&gt;&lt;a href=&quot;#02学科门类：经济学-（所有门类可选）&quot; class=&quot;headerlink&quot; title=&quot;02学科门类：经济学  （所有门类可选）&quot;&gt;&lt;/a&gt;02学科门类：经济学  &lt;font color=&quot;red&quot;&gt;（所有门类可选）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; 0201 经济学类 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 020101 经济学

* 020102 经济统计学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0202 财政学类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 020201K 财政学

* 020202 税收学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0203 金融学类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 020301K 金融学

* 020302 金融工程

* 020303 保险学

* 020304 投资学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0204 经济与贸易类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 020401 国际经济与贸易

* 020402 贸易经济
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;03学科门类：法学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#03学科门类：法学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;03学科门类：法学  （其他门类不考虑）&quot;&gt;&lt;/a&gt;03学科门类：法学  &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;030101K 法学 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;04学科门类：教育学-（所有门类不考虑）&quot;&gt;&lt;a href=&quot;#04学科门类：教育学-（所有门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;04学科门类：教育学  （所有门类不考虑）&quot;&gt;&lt;/a&gt;04学科门类：教育学  &lt;font color=&quot;blue&quot;&gt;（所有门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;h3 id=&quot;05学科门类：文学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#05学科门类：文学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;05学科门类：文学  （其他门类不考虑）&quot;&gt;&lt;/a&gt;05学科门类：文学  &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;0502 外国语言文学类 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;0503 新闻传播学类 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;050301 新闻学

050302 广播电视学

050303 广告学

050304 传播学

050305 编辑出版学
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;06学科门类：历史学-（所有门类不考虑）&quot;&gt;&lt;a href=&quot;#06学科门类：历史学-（所有门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;06学科门类：历史学  （所有门类不考虑）&quot;&gt;&lt;/a&gt;06学科门类：历史学  &lt;font color=&quot;blue&quot;&gt;（所有门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;h3 id=&quot;07学科门类：理学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#07学科门类：理学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;07学科门类：理学  （其他门类不考虑）&quot;&gt;&lt;/a&gt;07学科门类：理学  &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;0701 数学类  &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;070101 数学与应用数学

070102 信息与计算科学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0712 统计学类 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;071201 统计学

071202 应用统计学
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;08学科门类：工学-（全部门类可选，分程度）&quot;&gt;&lt;a href=&quot;#08学科门类：工学-（全部门类可选，分程度）&quot; class=&quot;headerlink&quot; title=&quot;08学科门类：工学 （全部门类可选，分程度）&quot;&gt;&lt;/a&gt;08学科门类：工学 &lt;font color=&quot;red&quot;&gt;（全部门类可选，分程度）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;0801 力学类  &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080101 理论与应用力学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0802 机械类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080201 机械工程

080202 机械设计制造及其自动化

080203 材料成型及控制工程

080204 机械电子工程

080205 工业设计

080206 过程装备与控制工程

080207 车辆工程

080208 汽车服务工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0803 仪器类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080301 测控技术与仪器
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0804 材料类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080401 材料科学与工程

080402 材料物理（注：可授工学或理学学士学位）

080403 材料化学（注：可授工学或理学学士学位）

080404 冶金工程

080405 金属材料工程

080406 无机非金属材料工程

080407 高分子材料与工程

080408 复合材料与工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0805 能源动力类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080501 能源与动力工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0806 电气类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080601 电气工程及其自动化
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0807 电子信息类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080701 电子信息工程（注：可授工学或理学学士学位）

080702 电子科学与技术（注：可授工学或理学学士学位）

080703 通信工程

080704 微电子科学与工程（注：可授工学或理学学士学位）

080705光电信息科学与工程（注：可授工学或理学学士学位）

080706 信息工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0808 自动化类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080801 自动化
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0809 计算机类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080901 计算机科学与技术（注：可授工学或理学学士学位）

080902 软件工程

080903 网络工程

080904K 信息安全（注：可授工学或理学或管理学学士学位）

080905 物联网工程

080906 数字媒体技术
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0810 土木类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081001 土木工程

081002 建筑环境与能源应用工程

081003 给排水科学与工程

081004 建筑电气与智能化
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0811 水利类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081101 水利水电工程

081102 水文与水资源工程

081103 港口航道与海岸工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0812 测绘类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081201 测绘工程

081202 遥感科学与技术
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0813 化工与制药类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081301 化学工程与工艺

081302 制药工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0814 地质类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081401 地质工程

081402 勘查技术与工程

081403 资源勘查工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0815 矿业类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081501 采矿工程

081502 石油工程

081503 矿物加工工程

081504 油气储运工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0816 纺织类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081601 纺织工程

081602 服装设计与工程（注：可授工学或艺术学学士学位）
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0817 轻工类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081701 轻化工程

081702 包装工程

081703 印刷工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0818 交通运输类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081801 交通运输

081802 交通工程

081803K 航海技术

081804K 轮机工程

081805K 飞行技术
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0819 海洋工程类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081901 船舶与海洋工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0820 航空航天类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082001 航空航天工程

082002 飞行器设计与工程

082003 飞行器制造工程

082004 飞行器动力工程

082005 飞行器环境与生命保障工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0821 兵器类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082101 武器系统与工程

082102 武器发射工程

082103 探测制导与控制技术

082104 弹药工程与爆炸技术

082105 特种能源技术与工程

082106 装甲车辆工程

082107 信息对抗技术
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0822 核工程类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082201 核工程与核技术

082202 辐射防护与核安全

082203 工程物理

082204 核化工与核燃料工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0823 农业工程类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082301 农业工程

082302 农业机械化及其自动化

082303 农业电气化

082304 农业建筑环境与能源工程

082305 农业水利工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0824 林业工程类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082401 森林工程

082402 木材科学与工程

082403 林产化工
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0825 环境科学与工程类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082501 环境科学与工程

082502 环境工程

082503 环境科学（注：可授工学或理学学士学位）

082504 环境生态工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0826 生物医学工程类&lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082601 生物医学工程（注：可授工学或理学学士学位）
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0827 食品科学与工程类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082701 食品科学与工程（注：可授工学或农学学士学位）

082702 食品质量与安全

082703 粮食工程

082704 乳品工程

082705 酿酒工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0828 建筑类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082801 建筑学

082802 城乡规划

082803 风景园林（注：可授工学或艺术学学士学位）
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0829 安全科学与工程类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082901 安全工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0830 生物工程类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;083001 生物工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0831 公安技术类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;083101K 刑事科学技术

083102K 消防工程
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;09学科门类：农学-（所有门类不考虑）&quot;&gt;&lt;a href=&quot;#09学科门类：农学-（所有门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;09学科门类：农学 （所有门类不考虑）&quot;&gt;&lt;/a&gt;09学科门类：农学 &lt;font color=&quot;blue&quot;&gt;（所有门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;h3 id=&quot;10学科门类：医学-（所有门类可考虑，分程度）&quot;&gt;&lt;a href=&quot;#10学科门类：医学-（所有门类可考虑，分程度）&quot; class=&quot;headerlink&quot; title=&quot;10学科门类：医学 （所有门类可考虑，分程度）&quot;&gt;&lt;/a&gt;10学科门类：医学 &lt;font color=&quot;red&quot;&gt;（所有门类可考虑，分程度）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1001 基础医学类  &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100101K 基础医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1002 临床医学类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100201K 临床医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1003 口腔医学类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100301K 口腔医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1004 公共卫生与预防医学类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100401K 预防医学

100402 食品卫生与营养学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1005 其次医学类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100501K 其次医学

100502K 针灸推拿学

100503K 藏医学

100504K 蒙医学

100505K 维医学

100506K 壮医学

100507K 哈医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1006 其次西医结合类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100601K 其次西医临床医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1007 药学类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt; 100701 药学

100702 药物制剂
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1008 其次药学类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100801 其次药学

100802 其次药资源与开发
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1009 法医学类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;1010 医学技术类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;101001 医学检验技术

101002 医学实验技术

101003 医学影像技术

101004 眼视光学

101005 康复治疗学

101006 口腔医学技术

101007 卫生检验与检疫
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1011 护理学类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;101101 护理学
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;12学科门类：管理学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#12学科门类：管理学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;12学科门类：管理学 （其他门类不考虑）&quot;&gt;&lt;/a&gt;12学科门类：管理学 &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1201 管理科学与工程类  &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;120101 管理科学

120102 信息管理与信息系统

120103 工程管理

120104 房地产开发与管理

120105 工程造价
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1202 工商管理类  &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;120201K 工商管理

120202 市场营销

120203K 会计学

120204 财务管理

120205 国际商务

120206 人力资源管理

120207 审计学

120208 资产评估
120209 物业管理

120210 文化产业管理
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;13学科门类：艺术学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#13学科门类：艺术学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;13学科门类：艺术学   （其他门类不考虑）&quot;&gt;&lt;/a&gt;13学科门类：艺术学   &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1305 设计学类 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;130501 艺术设计学

130502 视觉传达设计

130503 环境设计

130504 产品设计

130505 服装与服饰设计

130506 公共艺术

130507 工艺美术

130508 数字媒体艺术
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;普通高校本科专业选择推荐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;此文针对2016届高考毕业生就读普通大学本科专
    
    </summary>
    
    
      <category term="随笔小结" scheme="http://xuzichao.com/tags/%E9%9A%8F%E7%AC%94%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>IOS 音频一览</title>
    <link href="http://xuzichao.com/2015/03/15/IOS%20%E9%9F%B3%E9%A2%91%E4%B8%80%E8%A7%88/"/>
    <id>http://xuzichao.com/2015/03/15/IOS 音频一览/</id>
    <published>2015-03-15T04:34:11.000Z</published>
    <updated>2016-10-24T10:51:51.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;IOS-音频一览&quot;&gt;&lt;a href=&quot;#IOS-音频一览&quot; class=&quot;headerlink&quot; title=&quot;IOS 音频一览&quot;&gt;&lt;/a&gt;IOS 音频一览&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;前言：&lt;br&gt;做嘉宾聊天室这个需求的时候接触了音频和视频上的开发，嘉宾可以发布视频和语音以及文字信息出来，观众则可以文字回复，这样主持人嘉宾和观众就形成一个良性的互动过程。在这里把相关整理一下，望给大家带来一些认识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、了解音频&quot;&gt;&lt;a href=&quot;#一、了解音频&quot; class=&quot;headerlink&quot; title=&quot;一、了解音频&quot;&gt;&lt;/a&gt;一、了解音频&lt;/h1&gt;&lt;p&gt;声音作为信息的一种媒介载体必不可少，在移动端体现为各类语音交流以及音乐等，开发中使用的音频文件通过声音采样、量化、编码几步从而成为人耳可听的声音，频率为20HZ到20KHZ，奈奎斯特的理论表明采样率高于最高频2倍时候，是可以将数字信号还原为原来的模拟信号的，所以通常我们在网上看到的音频文件的采样率为44.1KHZ。&lt;/p&gt;
&lt;p&gt;采样后通过量化的脉冲编码调制，我们得到了PCM类型的数据，比如在使用AVAudioRecorder采样的时候可以看到采样类型kAudioFormatLinearPCM。但是这样拿到的数据是很大的，不便于使用和传输，通过对人类不敏感的声音区域进行过滤压缩，就有了MP3、AAC、OGG、WMA等数据格式类型，这些都是有损压缩。&lt;/p&gt;
&lt;p&gt;码率代码了压缩质量，比如MP3常用码率有128kbit/s、160kbit/s、320kbit/s等等，越高代表着声音音质越好。MP3中的数据有ID3和音频数据组成，ID3用于存储歌名、演唱者、专辑、音轨等我们可以常见的信息。&lt;/p&gt;
&lt;h1 id=&quot;二、IOS对音频的操作&quot;&gt;&lt;a href=&quot;#二、IOS对音频的操作&quot; class=&quot;headerlink&quot; title=&quot;二、IOS对音频的操作&quot;&gt;&lt;/a&gt;二、IOS对音频的操作&lt;/h1&gt;&lt;p&gt;开发实际上是为了解决需求，需求对应的是使用场景，开发的方式很多，不同的使用场景可以使用的方法不同。IOS开发提供了以下几种常用方式供我们解决对应的音频需求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System Sound Services &lt;/li&gt;
&lt;li&gt;AVFoundation 框架&lt;/li&gt;
&lt;li&gt;Media Player 框架&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-1-System-Sound-Services&quot;&gt;&lt;a href=&quot;#2-1-System-Sound-Services&quot; class=&quot;headerlink&quot; title=&quot;2.1  System Sound Services&quot;&gt;&lt;/a&gt;2.1  System Sound Services&lt;/h2&gt;&lt;h4 id=&quot;2-1-1-场景特点&quot;&gt;&lt;a href=&quot;#2-1-1-场景特点&quot; class=&quot;headerlink&quot; title=&quot;2.1.1 场景特点&quot;&gt;&lt;/a&gt;2.1.1 场景特点&lt;/h4&gt;&lt;p&gt;最底层也是简单的声音播放服务，此方法是适合播放提示警告类型的短小的声音&lt;/p&gt;
&lt;h4 id=&quot;2-1-2-存在限制&quot;&gt;&lt;a href=&quot;#2-1-2-存在限制&quot; class=&quot;headerlink&quot; title=&quot;2.1.2 存在限制&quot;&gt;&lt;/a&gt;2.1.2 存在限制&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;声音长度要小于 30 秒&lt;/li&gt;
&lt;li&gt;In linear PCM 或者 IMA4 (IMA/ADPCM) 格式的&lt;/li&gt;
&lt;li&gt;打包成 .caf, .aif, 或者 .wav 的文件&lt;/li&gt;
&lt;li&gt;不能控制播放的进度&lt;/li&gt;
&lt;li&gt;调用方法后立即播放声音&lt;/li&gt;
&lt;li&gt;没有循环播放和立体声控制：&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-1-3-使用方式&quot;&gt;&lt;a href=&quot;#2-1-3-使用方式&quot; class=&quot;headerlink&quot; title=&quot;2.1.3 使用方式&quot;&gt;&lt;/a&gt;2.1.3 使用方式&lt;/h4&gt;&lt;p&gt;调用 AudioServicesCreateSystemSoundID(CFURLRef inFileURL,SystemSoundID *outSystemSoundID) 该函数的第一个参数代表音频文件的URL（可通过NSURL转换成CFURLRef），第二个参数代表注册音频文件的SystemSoundID。&lt;/p&gt;
&lt;p&gt;调用AudioServicesAddSystemSoundCompletion()函数为制定SystemSoundID注册Callback函数。有了 CallBack 函数我们可以解决不少问题，比如可以克服 System Sound Services 本身不支持循环播放的问题。&lt;/p&gt;
&lt;p&gt;调用AudioServicePlaySystemSound函数或者AudioServicePlayAlertSound（调用系统振动功能）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad
{
[super viewDidLoad];

// 1. 定义要播放的音频文件的URL
NSURL *voiceURL = [[NSBundle mainBundle]URLForResource:@&amp;quot;CleanDidFinish&amp;quot; withExtension:@&amp;quot;aiff&amp;quot;];

// 2. 注册音频文件（第一个参数是音频文件的URL 第二个参数是音频文件的SystemSoundID）
AudioServicesCreateSystemSoundID((__bridge CFURLRef)(voiceURL),&amp;amp;ditaVoice);

// 3. 为crash播放完成绑定回调函数AudioServicesAddSystemSoundCompletion(ditaVoice,NULL,NULL,(void*)completionCallback,NULL);

// 4. 播放 ditaVoice 注册的音频 并控制手机震动
AudioServicesPlayAlertSound(ditaVoice);

//    AudioServicesPlaySystemSound(ditaVoice);
//    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate); // 控制手机振动

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2-2-AVFoundation-框架&quot;&gt;&lt;a href=&quot;#2-2-AVFoundation-框架&quot; class=&quot;headerlink&quot; title=&quot;2.2  AVFoundation 框架&quot;&gt;&lt;/a&gt;2.2  AVFoundation 框架&lt;/h2&gt;&lt;h4 id=&quot;2-2-1-场景特点&quot;&gt;&lt;a href=&quot;#2-2-1-场景特点&quot; class=&quot;headerlink&quot; title=&quot;2.2.1 场景特点&quot;&gt;&lt;/a&gt;2.2.1 场景特点&lt;/h4&gt;&lt;p&gt;如果播放较大的音频或者要对音频有精确的控制，则System Sound Service可能就很难满足实际需求了，通常这种情况会选择使用AVFoundation，它可以满足我们通常意义上的绝大部分的场景需求，包括音乐的交互、声音的制作等等，根据自己的业务需求实现自定义的定制化。如果你只是想实现音频的播放或者录制，没有其他需求，AVFoundation会很好的满足你，它的接口使用简单、不用关心其中的细节。&lt;/p&gt;
&lt;h4 id=&quot;2-2-2-关键点和API浏览&quot;&gt;&lt;a href=&quot;#2-2-2-关键点和API浏览&quot; class=&quot;headerlink&quot; title=&quot;2.2.2 关键点和API浏览&quot;&gt;&lt;/a&gt;2.2.2 关键点和API浏览&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Background Modes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;打开后台模式的音乐播放，或者在info.plist文件中添加Required Background Modes键，其值是App plays audio or streams audio/video using AirPlay&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AVAudioSession&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用于 iOS 系统中协调应用程序之间的音频播放的 API 的。例如，当有电话打进来时，音频的播放就会被暂停；在用户启动电影时，音乐的播放就会停止。我们需要使用这些 API 来确保一个应用程序能够正确响应并处理这类事件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AVAudioPlayer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个高层级的 API 为你提供一个简单的接口，用来播放本地或者内存中的音频。这是一个无界面的音频播放器 (也就是说没有提供 UI 元素)，使用起来也很直接简单。它不适用于网络音频流或者低延迟的实时音频播放。如果这些问题都不需要担心，那么 AVAudioPlayer 可能就是正确的选择。音频播放器的 API 也为我们带来了一些额外的功能，比如循环播放、获取音频的音量强度等等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AVAudioRecorder&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为与 AVAudioPlayer 相对应的 API，AVAudioRecorder 是将音频录制为文件的最简单的方法。除了用一个音量计接受音量的峰值和平均值以外，这个 API 简单粗暴，但要是你的使用场景很简单的话，这可能恰恰就是你想要的方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AVPlayer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AVPlayer 与上面提到的 API 相比，提供了更多的灵活性和可控性。它基于 AVPlayerItem 和 AVAsset，为你提供了颗粒度更细的权限来获取资源，比如选择指定的音轨。它还通过 AVQueuePlayer 子类支持播放列表，而且你可以控制这些资源是否能够通过 AirPlay 发送。&lt;/p&gt;
&lt;h4 id=&quot;与-AVAudioPlayer-最主要的区别是，AVPlayer-对来自网络的流媒体资源的-“开箱即用”-支持。这增加了处理播放状态的复杂性，但是你可以使用-KVO-来观测所有的状态参数来解决这个问题。&quot;&gt;&lt;a href=&quot;#与-AVAudioPlayer-最主要的区别是，AVPlayer-对来自网络的流媒体资源的-“开箱即用”-支持。这增加了处理播放状态的复杂性，但是你可以使用-KVO-来观测所有的状态参数来解决这个问题。&quot; class=&quot;headerlink&quot; title=&quot;与 AVAudioPlayer 最主要的区别是，AVPlayer 对来自网络的流媒体资源的 “开箱即用” 支持。这增加了处理播放状态的复杂性，但是你可以使用 KVO 来观测所有的状态参数来解决这个问题。&quot;&gt;&lt;/a&gt;与 AVAudioPlayer 最主要的区别是，AVPlayer 对来自网络的流媒体资源的 “开箱即用” 支持。这增加了处理播放状态的复杂性，但是你可以使用 KVO 来观测所有的状态参数来解决这个问题。&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt; AVAudioEngine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AVAudioEngine 是播放和录制的 Objective-C 接口。它提供了以前需要深入到 Audio Toolbox 框架的 C API 才能做的控制 (例如一些实时音频任务)。该音频引擎 API 对底层的 API 建立了优秀的接口。如果你不得不处理底层的问题，你仍然可以使用 Audio Toolbox 框架。&lt;/p&gt;
&lt;p&gt;这个 API 的基本概念是建立一个音频的节点图，从源节点 (播放器和麦克风) 以及过处理 (overprocessing) 节点 (混音器和效果器) 到目标节点 (硬件输出)。每一个节点都具有一定数量的输入和输出总线，同时这些总线也有良好定义的数据格式。这种结构使得它非常的灵活和强大。而且它集成了音频单元 (audio unit)。&lt;/p&gt;
&lt;h2 id=&quot;2-3-Media-Player-框架&quot;&gt;&lt;a href=&quot;#2-3-Media-Player-框架&quot; class=&quot;headerlink&quot; title=&quot;2.3 Media Player 框架&quot;&gt;&lt;/a&gt;2.3 Media Player 框架&lt;/h2&gt;&lt;h4 id=&quot;2-3-1-场景特点&quot;&gt;&lt;a href=&quot;#2-3-1-场景特点&quot; class=&quot;headerlink&quot; title=&quot;2.3.1 场景特点&quot;&gt;&lt;/a&gt;2.3.1 场景特点&lt;/h4&gt;&lt;p&gt;众所周知音乐是iOS的重要组成播放，无论是iPod、iTouch、iPhone还是iPad都可以在iTunes购买音乐或添加本地音乐到音乐库中同步到你的iOS设备。在MediaPlayer.frameowork中有一个MPMusicPlayerController用于播放音乐库中的音乐。Media Player 框架是 iOS 平台上一个用于音频和视频播放的高层级接口，它包含了一个你可以在应用中直接使用的默认的用户界面。你可以使用它来播放用户在 iPod 库中的项目，或者播放本地文件以及网络流。这个框架也包括了查找用户媒体库中内容的 API，同时还可以配置像是在锁屏界面或者控制中心里的音频控件。&lt;/p&gt;
&lt;h4 id=&quot;2-3-2-使用方式&quot;&gt;&lt;a href=&quot;#2-3-2-使用方式&quot; class=&quot;headerlink&quot; title=&quot;2.3.2 使用方式&quot;&gt;&lt;/a&gt;2.3.2 使用方式&lt;/h4&gt;&lt;p&gt;使用MPMusicPlayerController实例化对象来播放内置音乐库的媒体文件，有以下两种类方法来实例化对象：&lt;/p&gt;
&lt;p&gt;MPMusicPlayerController *playController = [MPMusicPlayerController systemMusicPlayer]; &lt;/p&gt;
&lt;p&gt;说明：播放内置媒体库项目取代用户目前播放状态（如果是用网易云音乐或QQQ音乐在播放歌曲）&lt;/p&gt;
&lt;p&gt;MPMusicPlayerController *playController = [MPMusicPlayerController applicationMusicPlayer]; &lt;/p&gt;
&lt;p&gt;说明：播放该应用内的歌曲，不影响本机自带音乐播放器的状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;判断有没有正在播放的媒体&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[MPMusicPlayerController indexOfNowPlayingItem] == NSNotFound
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建媒体队列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[MPMediaQuery songsQuery];
[MPMusicPlayerController setQueueWithQuery:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取媒体曲目的信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;MPMediaItem *currentItem = ....
NSString *artist = [currentItem valueForProperty:MPMediaItemPropertyArtist];
NSString *songName = [currentItem valueForProperty:MPMediaItemPropertyTitle];
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;监听媒体通知&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];[notificationCenter addObserver:self
              selector:@selector()
                       name:MPMusicPlayerControllerNowPlayingItemDidChangeNotification
                     object:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-4-更多音频方案&quot;&gt;&lt;a href=&quot;#2-4-更多音频方案&quot; class=&quot;headerlink&quot; title=&quot;2.4 更多音频方案&quot;&gt;&lt;/a&gt;2.4 更多音频方案&lt;/h2&gt;&lt;p&gt;CoreAudio的接口层次：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/api.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-4-1-OpenAL&quot;&gt;&lt;a href=&quot;#2-4-1-OpenAL&quot; class=&quot;headerlink&quot; title=&quot;2.4.1 OpenAL&quot;&gt;&lt;/a&gt;2.4.1 OpenAL&lt;/h4&gt;&lt;p&gt;OpenAL 是一个跨平台的 API。它提供了位置 (3D) 和低延迟的音频服务。它主要用于跨平台游戏的开发。它有意地模仿了 OpenGL 中 API 的风格。&lt;/p&gt;
&lt;h4 id=&quot;2-4-2-Audio-Unit-框架&quot;&gt;&lt;a href=&quot;#2-4-2-Audio-Unit-框架&quot; class=&quot;headerlink&quot; title=&quot;2.4.2  Audio Unit 框架&quot;&gt;&lt;/a&gt;2.4.2  Audio Unit 框架&lt;/h4&gt;&lt;p&gt;Audio Unit 框架是一个底层的 API；所有 iOS 中的音频技术都构建在 Audio Unit 这个框架之上。音频单元是用来加工音频数据的插件。一个音频单元链叫做音频处理图。&lt;/p&gt;
&lt;p&gt;如果你需要非常低的延迟 (如 VoIP 或合成乐器)、回声消除、混音或者音调均衡的话，你可能需要直接使用音频单元，或者自己写一个音频单元。但是其中的大部分工作可以使用 AVAudioEngine 的 API 来完成。如果你不得不写自己的音频单元的话，你可以将它们与 AVAudioUnit 节点一起集成在 AVAudioEngine 处理图中。&lt;/p&gt;
&lt;h4 id=&quot;2-4-2-AudioToolBox-框架&quot;&gt;&lt;a href=&quot;#2-4-2-AudioToolBox-框架&quot; class=&quot;headerlink&quot; title=&quot;2.4.2 AudioToolBox 框架&quot;&gt;&lt;/a&gt;2.4.2 AudioToolBox 框架&lt;/h4&gt;&lt;p&gt;通过AudioToolbox框架，可以将短声音注册到system sound服务上，被注册到system sound服务上的声音称之为 system sounds。&lt;br&gt;前面常用的System Sound Services 就来自这里的框架。&lt;/p&gt;
&lt;p&gt;它必须满足下面几个条件：&lt;/p&gt;
&lt;p&gt;(1).播放的时间不能超过30秒&lt;/p&gt;
&lt;p&gt;(2).数据必须是 PCM或者IMA4流格式&lt;/p&gt;
&lt;p&gt;(3).必须被打包成下面三个格式之一：Core Audio Format (.caf), Waveform audio (.wav), 或者 Audio Interchange File (.aiff)&lt;/p&gt;
&lt;p&gt;(4）声音文件必须放到设备的本地文件夹下面。通过AudioServicesCreateSystemSoundID方法注册这个声音文件.&lt;/p&gt;
&lt;h4 id=&quot;2-4-3-CoreMIDI-和-CoreAudioKit-框架&quot;&gt;&lt;a href=&quot;#2-4-3-CoreMIDI-和-CoreAudioKit-框架&quot; class=&quot;headerlink&quot; title=&quot;2.4.3 CoreMIDI 和 CoreAudioKit 框架&quot;&gt;&lt;/a&gt;2.4.3 CoreMIDI 和 CoreAudioKit 框架&lt;/h4&gt;&lt;p&gt;在 iOS 上，Core MIDI 和 CoreAudioKit 可以被用来使应用程序表现为 MIDI 设备。在 OS X 上，Music Sequencing 服务提供了基于 MIDI 的控制和对音乐数据访问的权限。Core MIDI 服务为服务器和驱动程序提供了支持。&lt;/p&gt;
&lt;h4 id=&quot;2-4-4-QTKit-和-QuickTime-框架&quot;&gt;&lt;a href=&quot;#2-4-4-QTKit-和-QuickTime-框架&quot; class=&quot;headerlink&quot; title=&quot;2.4.4 QTKit 和 QuickTime 框架&quot;&gt;&lt;/a&gt;2.4.4 QTKit 和 QuickTime 框架&lt;/h4&gt;&lt;p&gt;现在已经过时了，它们不应该被用在以后的开发中。我们应该使用 AVFoundation (和 AVKit) 来代替它们&lt;/p&gt;
&lt;h1 id=&quot;三、今日头条嘉宾聊天室音频实践&quot;&gt;&lt;a href=&quot;#三、今日头条嘉宾聊天室音频实践&quot; class=&quot;headerlink&quot; title=&quot;三、今日头条嘉宾聊天室音频实践&quot;&gt;&lt;/a&gt;三、今日头条嘉宾聊天室音频实践&lt;/h1&gt;&lt;h2 id=&quot;3-1-背景&quot;&gt;&lt;a href=&quot;#3-1-背景&quot; class=&quot;headerlink&quot; title=&quot;3.1 背景&quot;&gt;&lt;/a&gt;3.1 背景&lt;/h2&gt;&lt;p&gt;嘉宾聊天室是头条16年初新起的一个项目服务，目标是为了引进明星嘉宾访谈类型和体育赛事线上直播的节目，丰富头条在直播领域的内容，聊天室一期是属于图文、语音、短视频直播，后期发展可成为视频线上直播。表现形式与网易直播频道类似，但更丰富。&lt;/p&gt;
&lt;h2 id=&quot;3-2-IOS端实现&quot;&gt;&lt;a href=&quot;#3-2-IOS端实现&quot; class=&quot;headerlink&quot; title=&quot;3.2 IOS端实现&quot;&gt;&lt;/a&gt;3.2 IOS端实现&lt;/h2&gt;&lt;p&gt;根据聊天室在语音和视频的需求，使用系统自带实现的MPMoviePlayerController没法符合自定义的需求，包括功能与交互设计，并且MPMoviePlayerController已经不被苹果官方提倡，将要通过AVPlayer方案代替。需求本身的属于基本的语音和视频沟通，只对音频视频的录制与播放，符合音质画质要求和大小要求，因此采用AVFoundation框架即可，能够满足聊天室的需求。主要使用了AVPlayer、AVAudioRecorder、AVAudioSession等主要的类。&lt;/p&gt;
&lt;p&gt;实现类有如下等：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;TTAudioRecorder.h&amp;quot;
#import &amp;quot;TTAudioPlayer.h&amp;quot;
#import &amp;quot;TTLiveCameraViewController.h&amp;quot;
#import &amp;quot;TTUploadVideoAudioManager.h&amp;quot;
#import &amp;quot;TTLiveAudioManager.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;3-3-问题与解决&quot;&gt;&lt;a href=&quot;#3-3-问题与解决&quot; class=&quot;headerlink&quot; title=&quot;3.3 问题与解决&quot;&gt;&lt;/a&gt;3.3 问题与解决&lt;/h2&gt;&lt;p&gt;整个需求的实现过程还算顺利，按照API说明理解即可，提两三点说明下都会遇见哪一类的问题。&lt;/p&gt;
&lt;h4 id=&quot;3-1-音频格式为AMR&quot;&gt;&lt;a href=&quot;#3-1-音频格式为AMR&quot; class=&quot;headerlink&quot; title=&quot;3.1 音频格式为AMR&quot;&gt;&lt;/a&gt;3.1 音频格式为AMR&lt;/h4&gt;&lt;p&gt;AVPlayer来播放视频音频都相当强大，但是它也存在着一些不可回避的问题，那就是目前IOS已经不再支持AMR格式的播放。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AMR format is no longer supported by Apple (since iOS 4.3)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;与安卓同步开发的时候对接确立的通用的格式为AMR，因为AAC文件在网络传输下载播放的时候显得很大，AMR相对来说会好很多，同时我们也看了微博和微信的实现都是使用AMR，鉴于头条的用户量和使用体验，于是就采用了同样的方式。安卓可以很好支持AMR，在iOS平台上需要进行WAV和AMR之间的转换，好在libopencore可以解决这个事。网络上有好些所谓的相互转化的库，仔细看了下，都没有脱离这个core本身。&lt;/p&gt;
&lt;p&gt;libopencore库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interf_dec.h 
interf_enc.h
dec_if.h
if_rom.h
libopencore-amrnb.a
libopencore-amrwb.a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主要方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EncodeWAVEFileToAMRFile 、 DecodeAMRFileToWAVEFile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;封装一个mannager：        &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;

@interface VoiceConverter : NSObject

+ (int)amrToWav:(NSString*)_amrPath wavSavePath:(NSString*)_savePath;

+ (int)wavToAmr:(NSString*)_wavPath amrSavePath:(NSString*)_savePath;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3-2-WAV转化AMR声音变形：&quot;&gt;&lt;a href=&quot;#3-2-WAV转化AMR声音变形：&quot; class=&quot;headerlink&quot; title=&quot;3.2 WAV转化AMR声音变形：&quot;&gt;&lt;/a&gt;3.2 WAV转化AMR声音变形：&lt;/h4&gt;&lt;p&gt;录制WAV格式本地正常播放，转化为AMR后，把AMR格式文件在电脑端播放，声音严重变形，无法识别，再转化会WAV,，手机还是无法识别。&lt;br&gt;原因与解决&lt;br&gt;声音格式转化采用的是”amrFileCodec.h”，它对转化的音频输入源是有格式要求的，要求转化的采样率为标准的8k，如果录制的音频频率采用高频率44.1K的话就会出现变形，我想这里的设定依据来自于amr格式的采样率通常为8K。通过AVAudioRecorder把采样率设置为8K后，可以正常互相转化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AMR维基百科：&lt;/p&gt;
&lt;p&gt;采样率 8 kHz/13-bit (160 采样点每20ms)，滤波后只保留 200-3400 Hz 范围内的信号.&lt;/p&gt;
&lt;p&gt;编码器使用8个位速：12.2、10.2、7.95、7.40、6.70、5.90、5.15和4.75 kbit/s.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;NSMutableDictionary *settings=[NSMutableDictionary dictionary];
[settings setObject:@(kAudioFormatLinearPCM) forKey:AVFormatIDKey];
[settings setObject:@(8000) forKey:AVSampleRateKey]; //必须和amr文件解码参数保持一致
[settings setObject:@(1) forKey:AVNumberOfChannelsKey];
[settings setObject:@(16) forKey:AVLinearPCMBitDepthKey];
[settings setObject:@(NO) forKey:AVLinearPCMIsFloatKey];
[settings setValue:@(NO) forKey:AVLinearPCMIsNonInterleaved];
[settings setValue:@(NO) forKey:AVLinearPCMIsBigEndianKey];
[settings setValue:@(AVAudioQualityHigh) forKey:AVEncoderAudioQualityKey];
AVAudioRecorder *recorderTemp = [[AVAudioRecorder alloc] initWithURL:fileUrl settings:settings error:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3-3-AVPlayer的准备状态&quot;&gt;&lt;a href=&quot;#3-3-AVPlayer的准备状态&quot; class=&quot;headerlink&quot; title=&quot;3.3 AVPlayer的准备状态&quot;&gt;&lt;/a&gt;3.3 AVPlayer的准备状态&lt;/h4&gt;&lt;p&gt;当AVPlayer的status变为AVPlayerStatusReadyToPlay后，依旧可能无法开始播放？&lt;/p&gt;
&lt;p&gt;AVPlayerStatusReadyToPlay属性只是表明了AVPlayer已经成功的载入了AVPlayerItem，并且准备好，但是实际的是否能播放时由AVPlayerItem的status到达AVPlayerItemStatusReadyToPlay的时候，才能开始正常播放的。&lt;br&gt;如果我们的App使用CPU过多，I/O读写过多时，有可能导致直接无法播放，我们再调用play或者seekToTime:方法都无法正常播放，尤其是视频。所以我们需要做一个真正播放状态准备好的判断，也可以通过KVO去监听AVPlayerItem的status。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//播放器是否准备好
if (self.videoPrePlayer.status == AVPlayerStatusReadyToPlay) 
{
    //视频是否加载成功
    if(self.videoPrePlayer.currentItem.status == AVPlayerItemStatusFailed){   
        return;
    }
        [self.videoPrePlayer play];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;四、小结&quot;&gt;&lt;a href=&quot;#四、小结&quot; class=&quot;headerlink&quot; title=&quot;四、小结&quot;&gt;&lt;/a&gt;四、小结&lt;/h1&gt;&lt;p&gt;文章主要对音频的使用范畴做了概括，并列举了两三实践点，其他的并没有做详细的论述，因为本篇比较偏向音频知识的介绍，知道用什么工具框架后再具体解决就好。比如如何播放流畅的网络音频，如何实现音频的快放与慢放等具体问题，此次需求内容并不复杂没有涉及，他们都可以通过 AudioToolBox框架实现。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;IOS-音频一览&quot;&gt;&lt;a href=&quot;#IOS-音频一览&quot; class=&quot;headerlink&quot; title=&quot;IOS 音频一览&quot;&gt;&lt;/a&gt;IOS 音频一览&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;前言：&lt;br&gt;做嘉宾聊天室这个需求的时候接触了音频和视频上的开发，
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>IOS视频录制</title>
    <link href="http://xuzichao.com/2015/01/28/IOS%E8%A7%86%E9%A2%91%E5%BD%95%E5%88%B6--AVFoudation/"/>
    <id>http://xuzichao.com/2015/01/28/IOS视频录制--AVFoudation/</id>
    <published>2015-01-28T11:09:59.000Z</published>
    <updated>2017-01-24T10:34:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;IOS-视频录制-—-AVFoundation&quot;&gt;&lt;a href=&quot;#IOS-视频录制-—-AVFoundation&quot; class=&quot;headerlink&quot; title=&quot;IOS 视频录制 — AVFoundation&quot;&gt;&lt;/a&gt;IOS 视频录制 — AVFoundation&lt;/h1&gt;&lt;p&gt;AVFoundation是为数不多的几个框架,您可以使用和创建基于时间的视听媒体。它提供了一个objective - c接口用于工作与基于时间的视听数据详细的级别。例如,您可以使用它来检查,创建、编辑或reencode媒体文件。你也可以输入流从设备和操作视频实时捕捉和回放。&lt;/p&gt;
&lt;h2 id=&quot;一、概念引导：&quot;&gt;&lt;a href=&quot;#一、概念引导：&quot; class=&quot;headerlink&quot; title=&quot;一、概念引导：&quot;&gt;&lt;/a&gt;一、概念引导：&lt;/h2&gt;&lt;h3 id=&quot;1、ASSets媒体文件&quot;&gt;&lt;a href=&quot;#1、ASSets媒体文件&quot; class=&quot;headerlink&quot; title=&quot;1、ASSets媒体文件:&quot;&gt;&lt;/a&gt;1、ASSets媒体文件:&lt;/h3&gt;&lt;p&gt;1）AVAsset&lt;/p&gt;
&lt;p&gt;一个抽象类来表示时间等视听媒体视频和声音。每个资产包含一组跟踪旨在呈现或加工在一起,一个统一的媒体类型,包括但不限于音频、视频、文本、关闭字幕,字幕。&lt;/p&gt;
&lt;p&gt;AVURLAsset *anAsset = [[AVURLAsset alloc] initWithURL:url options:nil];属性有&lt;br&gt;tracks、duration、preferredVolume、preferredTransform等等。&lt;/p&gt;
&lt;p&gt;2) 一个AVAssetTrack&lt;/p&gt;
&lt;p&gt;对象提供了所有资产提供track-level检查接口,方便对ASSets进行更具体的属性获取以及对应的操作。&lt;/p&gt;
&lt;p&gt;3）AVAssetImageGenerator&lt;/p&gt;
&lt;p&gt;对象提供缩略图或预览图像的资产独立于回放，可以生成单独的图片，也可以生成图片队列，这是获取视频缩略图的方式之一，还有另外两种ALAsset的thumbnail 和 - (UIImage *)imageFromSampleBuffer:(CMSampleBufferRef)sampleBuffer。&lt;/p&gt;
&lt;p&gt;4）AVAssetExportSession&lt;/p&gt;
&lt;p&gt;针对AVAsset源对象的内容进行转码，创建一个被指定输出形式的资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/AVAssetExportSession.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、Playback播放控制&quot;&gt;&lt;a href=&quot;#2、Playback播放控制&quot; class=&quot;headerlink&quot; title=&quot;2、Playback播放控制:&quot;&gt;&lt;/a&gt;2、Playback播放控制:&lt;/h3&gt;&lt;p&gt;1) AVPlayer&lt;/p&gt;
&lt;p&gt;你使用一个AVPlayer对象来实现控制器和用户接口单一或多种条目回放。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;-  (instancetype)initWithPlayerItem:(AVPlayerItem *)item&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;play 、 parse 、 end&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;- (void)seekToTime:(CMTime)time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2) AVPlayerLayer&lt;/p&gt;
&lt;p&gt;用于显示视频内容，相当于大屏幕。里面有videoGravity，默认值 AVLayerVideoGravityResizeAspect.&lt;/p&gt;
&lt;p&gt;3) AVPlayerItem&lt;/p&gt;
&lt;p&gt;一个AVPlayerItem代表资产的表现状态,由一个AVPlayer对象和可以观察到的状态。对视频播放状态修改一起监听的过程多数发生在正对这个对象的操作操作上，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;seekToTime，从哪里开始播放&lt;/li&gt;
&lt;li&gt;各种资源播放状态的通知AVPlayerItemFailedToPlayToEndTimeNotification&lt;br&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4) AVPlayerItemTrack &lt;/p&gt;
&lt;p&gt;你用一个AVPlayerItemTrack对象修改资产的表现状态跟踪(AVAssetTrack)一个AVPlayer对象。通常视频的加载播放有各种状态，我们需要KVO监听或者添加通知去知道播放器的准备、进行、暂停、停止等状态。&lt;/p&gt;
&lt;p&gt;5) AVQueuePlayer&lt;/p&gt;
&lt;p&gt;按照队列播放视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;queuePlayerWithItems，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;insertItem:(AVPlayerItem *)item&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;afterItem:(AVPlayerItem *)afterItem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3、Editing资源编辑&quot;&gt;&lt;a href=&quot;#3、Editing资源编辑&quot; class=&quot;headerlink&quot; title=&quot;3、Editing资源编辑:&quot;&gt;&lt;/a&gt;3、Editing资源编辑:&lt;/h3&gt;&lt;p&gt;AVFoundation框架提供了一个功能丰富的组类促进视听资产的编辑。AVFoundation的编辑API的核心成分，就是一组追踪从一个或多个不同的媒体资产。AVMutableComposition类提供了一个接口,用于插入和删除操作的痕迹,以及管理自己时间排序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/AVMutableComposition.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1）AVMutableComposition&lt;/p&gt;
&lt;p&gt;是一个可变的AVComposition子类，当您想要从现有资产创建一个新的资源。你可以添加和删除跟踪,可以添加、删除和时间范围。&lt;br&gt;比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;– insertEmptyTimeRange：可以增加一段空白时间&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;– insertTimeRange:ofAsset:atTime:error:&lt;br&gt;插入的所有跟踪给定的时间范围内指定的资产到接收机。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;
&lt;pre&gt;&lt;code&gt;AVAsset *videoAsset = &amp;lt;#AVAsset with at least one video track#&amp;gt;;
AVAsset *anotherVideoAsset = &amp;lt;#another AVAsset with at least one video track#&amp;gt;;
// Get the first video track from each asset.
AVAssetTrack *videoAssetTrack = [[videoAsset tracksWithMediaType:AVMediaTypeVideo] objectAtIndex:0];
AVAssetTrack *anotherVideoAssetTrack = [[anotherVideoAsset tracksWithMediaType:AVMediaTypeVideo] objectAtIndex:0];
// Add them both to the composition.
[mutableCompositionVideoTrack insertTimeRange:CMTimeRangeMake(kCMTimeZero,videoAssetTrack.timeRange.duration) ofTrack:videoAssetTrack atTime:kCMTimeZero error:nil];
[mutableCompositionVideoTrack insertTimeRange:CMTimeRangeMake(kCMTimeZero,anotherVideoAssetTrack.timeRange.duration) ofTrack:anotherVideoAssetTrack atTime:videoAssetTrack.timeRange.duration error:nil];&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2) AVMutableAudioMix &lt;/p&gt;
&lt;p&gt;一个AVMutableAudioMix对象管理混合音轨的输入参数。它允许自定义音频处理在回放期间音轨或执行其他操作。&lt;/p&gt;
&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;AVMutableAudioMix *mutableAudioMix = [AVMutableAudioMix audioMix];
// Create the audio mix input parameters object.
AVMutableAudioMixInputParameters *mixParameters = [AVMutableAudioMixInputParameters audioMixInputParametersWithTrack:mutableCompositionAudioTrack];
// Set the volume ramp to slowly fade the audio out over the duration of the composition.
[mixParameters setVolumeRampFromStartVolume:1.f toEndVolume:0.f timeRange:CMTimeRangeMake(kCMTimeZero, mutableComposition.duration)];
// Attach the input parameters to the audio mix.
mutableAudioMix.inputParameters = @[mixParameters];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4、Media-Capture媒体捕捉&quot;&gt;&lt;a href=&quot;#4、Media-Capture媒体捕捉&quot; class=&quot;headerlink&quot; title=&quot;4、Media Capture媒体捕捉:&quot;&gt;&lt;/a&gt;4、Media Capture媒体捕捉:&lt;/h3&gt;&lt;p&gt;1) AVCaptureDevice &lt;/p&gt;
&lt;p&gt;代表输入设备,如摄像头或麦克风&lt;/p&gt;
&lt;p&gt;2) AVCaptureInput &lt;/p&gt;
&lt;p&gt;输入设备的配置端口，我们可以理解为输入&lt;/p&gt;
&lt;p&gt;3）AVCaptureSession&lt;/p&gt;
&lt;p&gt;协调数据流从输入到输出,用startRunning开始从输入到输出的数据流,并调用stopRunning停止流动。采取关闭代理，保证取景器一直流动。&lt;/p&gt;
&lt;p&gt;4) AVCaptureOutput &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AVCaptureMovieFileOutput，输入到视频文件，代理AVCaptureFileOutputRecordingDelegate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AVCaptureVideoDataOutput，如果想要实时的处理每一帧数据，或想要有自己的图形动画，代理AVCaptureVideoDataOutputSampleBufferDelegate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AVCaptureAudioDataOutput ，音频数据，代理AVCaptureVideoDataOutputSampleBufferDelegate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AVCaptureStillImageOutput ，图片数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5）AVCaptureVideoPreviewLayer &lt;/p&gt;
&lt;p&gt;实时展示被session传出出来的视频流数据，也就是我们的取景器&lt;/p&gt;
&lt;p&gt;6）AVCaptureConnection &lt;/p&gt;
&lt;p&gt;代表捕获之间的连接输入和输出对象关联到一个捕获会话。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/AVCaptureConnection.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5、Export媒体输出&quot;&gt;&lt;a href=&quot;#5、Export媒体输出&quot; class=&quot;headerlink&quot; title=&quot;5、Export媒体输出:&quot;&gt;&lt;/a&gt;5、Export媒体输出:&lt;/h3&gt;&lt;p&gt;1) AVAssetExportSession&lt;/p&gt;
&lt;p&gt;针对AVAsset对象转码，创建一个输出的形式被指定出口预设内容。包括对输出媒体资源的属性设定，可以设置presetName进行视频品质压缩，AVAssetExportPresetLowQuality等。也可以设置属性包括：outputFileType&lt;br&gt;、fileLengthLimit、timeRange&lt;br&gt;等。&lt;/p&gt;
&lt;p&gt;2）AVAssetReader &lt;/p&gt;
&lt;p&gt;直接从媒体读取存储样本,获得样本解码成可渲染的形式。组合资产多个音轨和组合多个视频跟踪(通过使用AVAssetReaderAudioMixOutput和AVAssetReaderVideoCompositionOutput)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;addOutPut&lt;/li&gt;
&lt;li&gt;startReading&lt;/li&gt;
&lt;li&gt;cancelReading&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读取一个音频：&lt;/p&gt;
&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;AVAudioMix *audioMix = &amp;lt;#An AVAudioMix that specifies how the audio tracks from the AVAsset are mixed#&amp;gt;;
// Assumes that assetReader was initialized with an AVComposition object.
AVComposition *composition = (AVComposition *)assetReader.asset;
// Get the audio tracks to read.
NSArray *audioTracks = [composition tracksWithMediaType:AVMediaTypeAudio];
// Get the decompression settings for Linear PCM.
NSDictionary *decompressionAudioSettings = @{ AVFormatIDKey : [NSNumber numberWithUnsignedInt:kAudioFormatLinearPCM] };
// Create the audio mix output with the audio tracks and decompression setttings.
AVAssetReaderOutput *audioMixOutput = [AVAssetReaderAudioMixOutput assetReaderAudioMixOutputWithAudioTracks:audioTracks audioSettings:decompressionAudioSettings];
// Associate the audio mix used to mix the audio tracks being read with the output.
audioMixOutput.audioMix = audioMix;
// Add the output to the reader if possible.
if ([assetReader canAddOutput:audioMixOutput])
[assetReader addOutput:audioMixOutput];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3) AVAssetWriter&lt;/p&gt;
&lt;p&gt;使用一个AVAssetWriter对象媒体数据写入新文件指定视听的容器类型,如QuickTime电影文件或一个mp4文件,支持自动交叉媒体数据的多个并发的痕迹。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initWithURL:fileType:error:&lt;/li&gt;
&lt;li&gt;startWriting&lt;/li&gt;
&lt;li&gt;startSessionAtSourceTime&lt;/li&gt;
&lt;li&gt;addInput&lt;/li&gt;
&lt;li&gt;endSessionAtSourceTime&lt;/li&gt;
&lt;li&gt;finishWritingWithCompletionHandler&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;二、代码实践：&quot;&gt;&lt;a href=&quot;#二、代码实践：&quot; class=&quot;headerlink&quot; title=&quot;二、代码实践：&quot;&gt;&lt;/a&gt;二、代码实践：&lt;/h2&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;import-“TTCameraViewController-h”&quot;&gt;&lt;a href=&quot;#import-“TTCameraViewController-h”&quot; class=&quot;headerlink&quot; title=&quot;#import “TTCameraViewController.h”&quot;&gt;&lt;/a&gt;#import “TTCameraViewController.h”&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;三、问题回顾：&quot;&gt;&lt;a href=&quot;#三、问题回顾：&quot; class=&quot;headerlink&quot; title=&quot;三、问题回顾：&quot;&gt;&lt;/a&gt;三、问题回顾：&lt;/h2&gt;&lt;h3 id=&quot;1、视频文件写入崩溃：&quot;&gt;&lt;a href=&quot;#1、视频文件写入崩溃：&quot; class=&quot;headerlink&quot; title=&quot;1、视频文件写入崩溃：&quot;&gt;&lt;/a&gt;1、视频文件写入崩溃：&lt;/h3&gt;&lt;h4 id=&quot;现象：&quot;&gt;&lt;a href=&quot;#现象：&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;相机开始拍摄就会出现崩溃，时而出现，有时难以复现。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：&quot;&gt;&lt;a href=&quot;#原因与解决：&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;p&gt;1）startSessionAtSourceTime只能在 AVAssetWriterStatusWriting的之后调用，但是startWriting调用之后writer并没有立即变为writing状态，而已有一个极短的开始时间，参照苹果规范使用文档，只需要前面调用之后后面就可以跟着执行startSessionAtSourceTime，然而，我遇见了这问题，说明它并不是。随后我到stackoverflow上查了问题，发现有人早就提过，并没有答案，说是升级IOS8以后就没有了，可我这里是IOS9…随后我只能判断writer状态如果是writing就开始执行，如果不是就调用startWriting。&lt;/p&gt;
&lt;p&gt;2）[videoWriterInput appendSampleBuffer：xxx]这只能在startSessionAtSourceTime开始之后调用，和1是同样的情况，明明第一行调用了startSessionAtSourceTime，第二调用appendSampleBuffer就会崩溃，并且依旧是偶尔发生。但是这里的问题是没有一个状态可以判断是否已经开始startSessionAtSourceTime，这里就有点血崩了，不能像问题1一样判断解决，后来只好try catch了,稳住局面防止崩溃，丢失极少的毫秒级帧数。&lt;/p&gt;
&lt;h3 id=&quot;2、相机拍摄闪烁抖动：&quot;&gt;&lt;a href=&quot;#2、相机拍摄闪烁抖动：&quot; class=&quot;headerlink&quot; title=&quot;2、相机拍摄闪烁抖动：&quot;&gt;&lt;/a&gt;2、相机拍摄闪烁抖动：&lt;/h3&gt;&lt;h4 id=&quot;现象：-1&quot;&gt;&lt;a href=&quot;#现象：-1&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;开始拍摄时候，取景器闪烁抖动，引起一小部分可见范围内的视频内容发送抖动，并被存入文件中，体验差。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：-1&quot;&gt;&lt;a href=&quot;#原因与解决：-1&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;p&gt;在开始拍摄的时候，再去创建connection并传递设备和拍摄方向，有利于视频获取oritation，自然而然的横着拍摄也会竖着播放，但是问题在于connection的建立产生较大的链接，引起视频抖动，此抖动将被录制进入视频文件中。于是我采取在初始化input的时候就把connection就增加进去，当开始拍摄的时候不会发生抖动，但是牺牲的是视频的oritation需要自己根据用户拍摄的方向去手动修改视频方向。&lt;/p&gt;
&lt;h3 id=&quot;3、视频方向混乱：&quot;&gt;&lt;a href=&quot;#3、视频方向混乱：&quot; class=&quot;headerlink&quot; title=&quot;3、视频方向混乱：&quot;&gt;&lt;/a&gt;3、视频方向混乱：&lt;/h3&gt;&lt;h4 id=&quot;现象：-2&quot;&gt;&lt;a href=&quot;#现象：-2&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;背面摄像头拍摄，home键在下，拍摄出来的视频文件，在播放的时候，底部在手机右边，而不是底边，一次类推，home键在底部与视频的底部角度成90垂直关系。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：-2&quot;&gt;&lt;a href=&quot;#原因与解决：-2&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;self.videoOutPut = [[AVCaptureVideoDataOutput alloc] init];
NSDictionary * outputSettings = [[NSDictionary alloc] initWithObjectsAndKeys:[NSNumber numberWithInt:kCVPixelFormatType_32BGRA],(id)kCVPixelBufferPixelFormatTypeKey, nil];
[self.videoOutPut setVideoSettings:outputSettings];

//必须
if ([self.session canAddOutput:self.videoOutPut]) {
    [self.session addOutput:self.videoOutPut];
}

//先于
self.videoConnection = [self.videoOutPut connectionWithMediaType:AVMediaTypeVideo];
self.videoConnection.enabled = NO;
[self.videoConnection setVideoOrientation:AVCaptureVideoOrientationPortrait];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4、横着拍摄的视频横着播放：&quot;&gt;&lt;a href=&quot;#4、横着拍摄的视频横着播放：&quot; class=&quot;headerlink&quot; title=&quot;4、横着拍摄的视频横着播放：&quot;&gt;&lt;/a&gt;4、横着拍摄的视频横着播放：&lt;/h3&gt;&lt;h4 id=&quot;现象：-3&quot;&gt;&lt;a href=&quot;#现象：-3&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;横着拍摄的视频，放的时候是竖着的。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：-3&quot;&gt;&lt;a href=&quot;#原因与解决：-3&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;p&gt;因为上面解决视频抖动，导致不能直接设定拍摄时候的视频方向，从而需要根据手动的拍摄方向去修改视频的视图的方向。&lt;br&gt;考虑到用户可能锁住屏幕旋转，于是就CMMotionManager获取重力方向来判断，在VC出现或者开始拍摄的时候开启，在VC退出或者拍摄完成的的时候关闭。获得方向后，在视频的写入里直接修改方向即可。&lt;/p&gt;
&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;[videoWriterInput setTransform:CGAffineTransformScale(CGAffineTransformMakeRotation(-M_PI_2), 1.0, 1.0)];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5、录制视频有右边和底边绿色线条：&quot;&gt;&lt;a href=&quot;#5、录制视频有右边和底边绿色线条：&quot; class=&quot;headerlink&quot; title=&quot;5、录制视频有右边和底边绿色线条：&quot;&gt;&lt;/a&gt;5、录制视频有右边和底边绿色线条：&lt;/h3&gt;&lt;h4 id=&quot;现象：-4&quot;&gt;&lt;a href=&quot;#现象：-4&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;手机全屏录制的时候，设置视频输出宽度为手机的宽高，当宽高为基数的时候视频录制里面会出现绿色线条。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：-4&quot;&gt;&lt;a href=&quot;#原因与解决：-4&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;p&gt;不知道原因，神奇的bug，参照着段子的视频方法解决的，直接修改视频输出宽高为偶数。&lt;/p&gt;
&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;NSInteger videoWidth = [[NSNumber numberWithFloat:self.view.frame.size.width] integerValue];
NSInteger videoHeight = [[NSNumber numberWithFloat:self.view.frame.size.height] integerValue];
if (videoWidth % 2 == 1) {
    videoWidth = videoWidth - 1;
}
if (videoHeight % 2 == 1) {
    videoHeight = videoHeight - 1;
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IOS-视频录制-—-AVFoundation&quot;&gt;&lt;a href=&quot;#IOS-视频录制-—-AVFoundation&quot; class=&quot;headerlink&quot; title=&quot;IOS 视频录制 — AVFoundation&quot;&gt;&lt;/a&gt;IOS 视频录制 — AVFoun
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo一下，博客诞生</title>
    <link href="http://xuzichao.com/2014/11/07/Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://xuzichao.com/2014/11/07/Hexo-个人博客使用介绍/</id>
    <published>2014-11-07T11:09:59.000Z</published>
    <updated>2016-06-08T13:32:48.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;个人博客搭建推荐Hexo&quot;&gt;&lt;a href=&quot;#个人博客搭建推荐Hexo&quot; class=&quot;headerlink&quot; title=&quot;个人博客搭建推荐Hexo&quot;&gt;&lt;/a&gt;个人博客搭建推荐Hexo&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;事实上，好早之前就尝试过自己搭建的个人博客，想积累写写技术知识点和生活上的见闻，希望它作为自己个人的一块土地去耕耘。通常我们会在一些博客网站注册，比如博客园，然后开始作文，但这样的博客网站的界面UI设计挺糟糕的，作为还有一些审美的我不太乐意去使用，虽然同为苦逼码农。后来出了一些品质比较高的静态博客等，也尝试去使用过，最后还是选择了使用博客组件去搭建，因为总觉得独立的才是自己的，大概程序员的内心都流淌着这样的独白。&lt;/p&gt;
&lt;p&gt;博客搭建框架组件很多，从WordPress到FarBox、Jekyll、Octopress、ghost、marboo、Hexo等等，他们基本都配合github使用,在网上各路大神的推荐之下，试过几款框架,基本都是在读完安装说明并开始有点小激动的时候，痛苦的安装过程让我放弃了这一方式。现在回想，一方面是由于个人那些年的电脑和网络都很烂，另一方面也是自己年轻冲动没经验和耐心，搭建过程很多东西都需要一点点的搜索去学习，电脑一卡一慢就各种不爽就搞不下去了。不过最后我还是搭建了自己的博客，并没有使用上述的哪种框架,前面的过程学习并知道了博客的搭建方式，索性自己就用FW设计了个人博客的UI界面，正好也会前端FE，就手写了博客页面Css和JS，这样博客的结界面就出来了，自己动手丰衣足食，然而它只是个静态的…到编译这一环节过不去了，毕竟JS属于前端的江湖，咋整…于是找了个python脚本(这里感谢@上山打老虎的友情赞助)，动态编译产生静态文件，只需要专心的写文字就好，随后可上传到github通过域名映射直接展示。这样，我就搭建好了自己的博客，高端大气上档次，简直满意的不得了！结果是非常符合我自己的审美设计要求，内心那个开心呐，随后开始了我的博客之路。&lt;/p&gt;
&lt;p&gt;到后来接触了Hexo,它就是我上述过程的一个更为优化的方案，功能完善，扩展强大。通过Hexo的使用也发现上手很快，我几乎是在几分钟之内就搭建起了博客，这速度让我为之欢呼，所以我决定转到Hexo来写作，那么，这里就写个文章来推荐一下吧。&lt;/p&gt;
&lt;h3 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;安装说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;一、准备工作&quot;&gt;&lt;a href=&quot;#一、准备工作&quot; class=&quot;headerlink&quot; title=&quot;一、准备工作&quot;&gt;&lt;/a&gt;一、准备工作&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;你得有自己的域名，买域名的地方比较多，有的坑有的好，我是在godaddy上买的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注册github账号，你将会免费使用到它提供的各种便利而强大的功能，免费的存储空间，下载开源项目等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装Node.js, npm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装git,生成SSH-KEY管理权限，配置域名到github关联，网上多查查&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;二、安装Hexo&quot;&gt;&lt;a href=&quot;#二、安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;二、安装Hexo&quot;&gt;&lt;/a&gt;二、安装Hexo&lt;/h5&gt;&lt;p&gt;1、hexo程序环境&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install -g hexo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、hexo工程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ hexo init 文件夹名称&lt;/p&gt;
&lt;p&gt;$ cd 文件夹名称&lt;/p&gt;
&lt;p&gt;$ npm install&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、会得到文件夹目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;├ ── _config.yml&lt;/p&gt;
&lt;p&gt;├ ── package.json&lt;/p&gt;
&lt;p&gt;├ ── scaffolds&lt;/p&gt;
&lt;p&gt;├ ── source&lt;/p&gt;
&lt;p&gt;├ ── _drafts&lt;/p&gt;
&lt;p&gt;└ ── _posts&lt;/p&gt;
&lt;p&gt;└ ── themes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4、按照命令行操作，此时到这里，别管这些文件是干啥的，来，我们接着往下走。&lt;/p&gt;
&lt;h5 id=&quot;三、生成第一篇文章&quot;&gt;&lt;a href=&quot;#三、生成第一篇文章&quot; class=&quot;headerlink&quot; title=&quot;三、生成第一篇文章&quot;&gt;&lt;/a&gt;三、生成第一篇文章&lt;/h5&gt;&lt;p&gt;1、创建文章&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo new 你的文章名称&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、编辑你的文章&lt;/p&gt;
&lt;p&gt;上面一步在你对应的文件夹下新建了一个Markdown文件，此时需要你使用对应的语法去编写文档，不知道的可以去学习下，用语言命令号来写Word文档，该有的有，不该有的没有，简直就是最爱&lt;/p&gt;
&lt;p&gt;3、编译&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo generate&lt;/p&gt;
&lt;p&gt;hexo server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时打开你的浏览器，默认地址是（ &lt;a href=&quot;http://0.0.0.0:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:4000/&lt;/a&gt; ），你就可以看到你的文章了，就是你刚才编写的文章。  &lt;/p&gt;
&lt;h5 id=&quot;四、发布到github&quot;&gt;&lt;a href=&quot;#四、发布到github&quot; class=&quot;headerlink&quot; title=&quot;四、发布到github&quot;&gt;&lt;/a&gt;四、发布到github&lt;/h5&gt;&lt;p&gt;由于前面你做好了准备工作，所以这里只需要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git commit -a -m “&lt;em&gt;*&lt;/em&gt;文章”&lt;/p&gt;
&lt;p&gt;git push&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时打开你的浏览器，比如你买的域名是( &lt;a href=&quot;http://baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://baidu.com/&lt;/a&gt; )，你打开它，和你在（ &lt;a href=&quot;http://0.0.0.0:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:4000&lt;/a&gt; ）看到的一毛一样，可以发给你的朋友看了。 &lt;/p&gt;
&lt;h3 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;p&gt;对于Hexo的使用，前后只介绍了关键的几个命令，为了可以可以快速搭建，都是基础入门很方便，麻烦的到是前面的准备工作，得一步步挨着来，有不懂的可以搜索和咨询。Hexo可以更换主题，也可以参照他人的主题制作，比如本站的主题yilia就是从github上找的开源主题，作者是我科的学长，已经获得了近2000颗星，这就是开源的力量，感谢学长litten的贡献。Hexo的其他扩展功能，请直接浏览Hexo的官网学习，我这里就不做没有必要的翻译了。&lt;/p&gt;
&lt;p&gt;写作此文时候的内心OS：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/aoteman.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;个人博客搭建推荐Hexo&quot;&gt;&lt;a href=&quot;#个人博客搭建推荐Hexo&quot; class=&quot;headerlink&quot; title=&quot;个人博客搭建推荐Hexo&quot;&gt;&lt;/a&gt;个人博客搭建推荐Hexo&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>对 Run Loop 的理解</title>
    <link href="http://xuzichao.com/2014/11/05/%E5%AF%B9%20Run%20Loop%20%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://xuzichao.com/2014/11/05/对 Run Loop 的理解/</id>
    <published>2014-11-05T06:34:12.000Z</published>
    <updated>2017-01-25T03:06:42.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;对-Run-Loop-的理解&quot;&gt;&lt;a href=&quot;#对-Run-Loop-的理解&quot; class=&quot;headerlink&quot; title=&quot;对 Run Loop 的理解&quot;&gt;&lt;/a&gt;对 Run Loop 的理解&lt;/h1&gt;&lt;h2 id=&quot;一、Run-Loop为何存在&quot;&gt;&lt;a href=&quot;#一、Run-Loop为何存在&quot; class=&quot;headerlink&quot; title=&quot;一、Run Loop为何存在?&quot;&gt;&lt;/a&gt;一、Run Loop为何存在?&lt;/h2&gt;&lt;p&gt;我们从编写命令式的语句开始理解，一般我们写一个运行函数，只要顺序执行，一遍就过了，比如简单的NSLog一个“hello word”，这样我们就算完成了一个问候世界的程序。好简单的程序，但是一个复杂的系统，一个能称之为系统的程序，比如我们的手机App，它是不可能按照执行顺序一下执行完成就结束的，它包含了我们各类需求，会接受我们不同的操作，所以这个程序需要有一个设计的模式能够符合这样的应用场景，能够响应操作。所以，有了Event驱动的模式。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序可以一直运行并且接受用户的输入&lt;/li&gt;
&lt;li&gt;决定程序应该处理哪些Event&lt;/li&gt;
&lt;li&gt;主调方不能被被调方卡主，所以需要调用解耦。主调方就发个消息就完事了，就不管了，就可以去做别的了，被调防根据消息去派发、操作等等。这个概念就是(Message Queue) &lt;/li&gt;
&lt;li&gt;节省了CPU时间，比如时间片执行，这就是操作系统里的概念。&lt;/li&gt;
&lt;li&gt;没事的时候闲着，有事的时候激活它&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;二、Run-Loop-都包含了什么相关内容？&quot;&gt;&lt;a href=&quot;#二、Run-Loop-都包含了什么相关内容？&quot; class=&quot;headerlink&quot; title=&quot;二、Run Loop 都包含了什么相关内容？&quot;&gt;&lt;/a&gt;二、Run Loop 都包含了什么相关内容？&lt;/h2&gt;&lt;h3 id=&quot;1、CF层和F层&quot;&gt;&lt;a href=&quot;#1、CF层和F层&quot; class=&quot;headerlink&quot; title=&quot;1、CF层和F层&quot;&gt;&lt;/a&gt;1、CF层和F层&lt;/h3&gt;&lt;p&gt;CF层是C写的，跨平台，F层其实不干事的。GCD 有部分联系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_CF.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、常用&quot;&gt;&lt;a href=&quot;#2、常用&quot; class=&quot;headerlink&quot; title=&quot;2、常用&quot;&gt;&lt;/a&gt;2、常用&lt;/h3&gt;&lt;p&gt;NSTimer 完全依赖于RunLoop，UIEvent 都是RunLoop 跑的，AutoRelease 面试问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_normal.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;三、RunLoop调用堆栈&quot;&gt;&lt;a href=&quot;#三、RunLoop调用堆栈&quot; class=&quot;headerlink&quot; title=&quot;三、RunLoop调用堆栈&quot;&gt;&lt;/a&gt;三、RunLoop调用堆栈&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/images/RL_zhan.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;四、RunLoop构成元素&quot;&gt;&lt;a href=&quot;#四、RunLoop构成元素&quot; class=&quot;headerlink&quot; title=&quot;四、RunLoop构成元素&quot;&gt;&lt;/a&gt;四、RunLoop构成元素&lt;/h2&gt;&lt;h3 id=&quot;1、构成元素&quot;&gt;&lt;a href=&quot;#1、构成元素&quot; class=&quot;headerlink&quot; title=&quot;1、构成元素&quot;&gt;&lt;/a&gt;1、构成元素&lt;/h3&gt;&lt;p&gt;thread里面不是只能起一个RL，是可以多个的，但是必须嵌套。&lt;br&gt;RunLoop机制存在的一对多的关系，比如Mode和Timer&lt;br&gt;CFRunLoopSurece、CFRunLoopTimer、CFRunLoopObserver，主要的核心就是这三个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_consist.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、对CFRunLoopTimer的封装&quot;&gt;&lt;a href=&quot;#2、对CFRunLoopTimer的封装&quot; class=&quot;headerlink&quot; title=&quot;2、对CFRunLoopTimer的封装&quot;&gt;&lt;/a&gt;2、对CFRunLoopTimer的封装&lt;/h3&gt;&lt;p&gt;NSTimer、 performSelector:after 、 displayLink&lt;/p&gt;
&lt;h3 id=&quot;3、对CFRunLoopSurece的理解&quot;&gt;&lt;a href=&quot;#3、对CFRunLoopSurece的理解&quot; class=&quot;headerlink&quot; title=&quot;3、对CFRunLoopSurece的理解&quot;&gt;&lt;/a&gt;3、对CFRunLoopSurece的理解&lt;/h3&gt;&lt;p&gt;source是RL的数据源的抽象类，类似proctol，定义了两个version的source：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;source0：处理APP内部的世界、APP自己管理触发，比如UIEvent、CFSocket&lt;/li&gt;
&lt;li&gt;source1: 又RL和内核管理，Mach port 驱动 ，进程兼通讯的方式，往某个进程方法可以发到这个port上，对面的进程监听这个port 就是可以获得消息。比如：CFMachPort，CFMessagePort&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_Source0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4、对CFRunLoopServer对外报告状态&quot;&gt;&lt;a href=&quot;#4、对CFRunLoopServer对外报告状态&quot; class=&quot;headerlink&quot; title=&quot;4、对CFRunLoopServer对外报告状态&quot;&gt;&lt;/a&gt;4、对CFRunLoopServer对外报告状态&lt;/h3&gt;&lt;p&gt;比如我们在CAAnimation数组，多个动画，RL会通过判断依次的状态，将全部收集到一起后再开始执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_Observer.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5、CFRunLoopMode&quot;&gt;&lt;a href=&quot;#5、CFRunLoopMode&quot; class=&quot;headerlink&quot; title=&quot;5、CFRunLoopMode&quot;&gt;&lt;/a&gt;5、CFRunLoopMode&lt;/h3&gt;&lt;p&gt;RunLoop在同一时间段内，只能在唯一的特点的mode下Run。&lt;br&gt;更换Mode时，需要停止当前的Loop，然后重启动新的Loop。&lt;br&gt;Mode是个保证IOS滑动顺畅的关键，在这个mode下只执行滑动计算相关&lt;br&gt;可以创建自己的mode&lt;/p&gt;
&lt;p&gt;NSDefaultRunLoopMode: 默认的&lt;br&gt;UITrackingRunLoopMode:scrollView滑动&lt;br&gt;UIInitializationRunLoopMode: 启动的时候，私有的&lt;br&gt;NSRunLoopCommomModes: 1和2都能执行，作为一个数组，并无优先级&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相关Topic：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NSTimer 默认被加入NSDefaultRunLoopMode中，如果不希望被SCrollView影响，让滑动的时候timer也依然进行运行，就需要添加到NSRunLoopCommomModes中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RunLoopMode切换&lt;br&gt;都是重新起，不是切换回原来的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_Mode_Change.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCD和Run Loop的联系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GCD的计时器是它自己的计时器，只有main queue的时候有关系。Run Loop 会问一下 GCD 你这边在搞事情吗？有的话就抛出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_GCD.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auto Release&lt;br&gt;UIKit 通过的RunLoopServer在RunLoop两次Sleep间对Autorelease进行Pop和Push将这次Loop中产生的AutoRelease对象释放。两圈之间自动释放UI上自动释放池的东西，比如UITouch。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;六、RunLoop的挂起和唤醒&quot;&gt;&lt;a href=&quot;#六、RunLoop的挂起和唤醒&quot; class=&quot;headerlink&quot; title=&quot;六、RunLoop的挂起和唤醒&quot;&gt;&lt;/a&gt;六、RunLoop的挂起和唤醒&lt;/h3&gt;&lt;p&gt;CGRunLoopServiceMachPort 的作用就是发送消息，表示暂停还是激活，与内核进行交互。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_Port.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;七、RunLoop的实践&quot;&gt;&lt;a href=&quot;#七、RunLoop的实践&quot; class=&quot;headerlink&quot; title=&quot;七、RunLoop的实践&quot;&gt;&lt;/a&gt;七、RunLoop的实践&lt;/h3&gt;&lt;p&gt;1、AFNetworking&lt;br&gt;常驻线程，NSURLConnetion需要一个RL常驻，不然跑一次就没了。&lt;br&gt;比如有个需求需要一直在线程里面呆着。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)networkRequestThreadEntryPoint:(id)__unused object {
@autoreleasepool {
    [[NSThread currentThread] setName:@&amp;quot;AFNetworking&amp;quot;];

    NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
    [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];
    [runLoop run];
}
}
+ (NSThread *)networkRequestThread {
static NSThread *_networkRequestThread = nil;
static dispatch_once_t oncePredicate;
dispatch_once(&amp;amp;oncePredicate, ^{
    _networkRequestThread = [[NSThread alloc] initWithTarget:self selector:@selector(networkRequestThreadEntryPoint:) object:nil];
    [_networkRequestThread start];
});

return _networkRequestThread;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;2、 延迟加载tableview的图片&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UIImage *downLoadImage = ...;  
[self.avatarImageView performSelector:@selector(setImage:)  
                    withObject:downloadImage  
                    afterDelay:0  
                    inModes:@[NSDefaultRunLoopMode]];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、让Crash的APP回光返照&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 创建RunLoop
CFRunLoopRef runLoop = CFRunLoopGetCurrent();
// 设置Mode
NSArray *allModes = CFBridgingRelease(CFRunLoopCopyAllModes(runLoop));
// 弹窗告知 程序挂了
UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@&amp;quot;程序崩溃了&amp;quot; message:@&amp;quot;崩溃信息&amp;quot; delegate:nil cancelButtonTitle:@&amp;quot;取消&amp;quot; otherButtonTitles:nil];
[alertView show];
while (1) {
for (NSString *mode in allModes) {
// 快速的切换 Mode  就能处理滚动、点击等事件
CFRunLoopRunInMode((CFStringRef)mode, 0.001, false);
}
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对-Run-Loop-的理解&quot;&gt;&lt;a href=&quot;#对-Run-Loop-的理解&quot; class=&quot;headerlink&quot; title=&quot;对 Run Loop 的理解&quot;&gt;&lt;/a&gt;对 Run Loop 的理解&lt;/h1&gt;&lt;h2 id=&quot;一、Run-Loop为何存在&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>再见，My Hust</title>
    <link href="http://xuzichao.com/2014/06/12/%E5%86%8D%E8%A7%81%EF%BC%8CMy%20Hust/"/>
    <id>http://xuzichao.com/2014/06/12/再见，My Hust/</id>
    <published>2014-06-12T11:09:59.000Z</published>
    <updated>2017-01-25T03:31:00.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;后续&quot;&gt;&lt;a href=&quot;#后续&quot; class=&quot;headerlink&quot; title=&quot;后续&quot;&gt;&lt;/a&gt;后续&lt;/h3&gt;&lt;p&gt;不需要华丽的辞藻去颂赞，你的美与伟大一直浸染着每个Huster的心。&lt;/p&gt;
&lt;p&gt;大学四年，匆匆，不曾写过什么日记，好像是少了些记忆，从来都认为自己大学过的很对，走的路很直，如今毕业工作再回头看，迷迷茫茫，忙忙碌碌，勤勤恳恳，便是那过去的日子。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;后续&quot;&gt;&lt;a href=&quot;#后续&quot; class=&quot;headerlink&quot; title=&quot;后续&quot;&gt;&lt;/a&gt;后续&lt;/h3&gt;&lt;p&gt;不需要华丽的辞藻去颂赞，你的美与伟大一直浸染着每个Huster的心。&lt;/p&gt;
&lt;p&gt;大学四年，匆匆，不曾写过什么日记，好像是少了些记忆，从来
    
    </summary>
    
    
      <category term="时光相册" scheme="http://xuzichao.com/tags/%E6%97%B6%E5%85%89%E7%9B%B8%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>彩云之南</title>
    <link href="http://xuzichao.com/2014/05/12/%E5%BD%A9%E4%BA%91%E4%B9%8B%E5%8D%97/"/>
    <id>http://xuzichao.com/2014/05/12/彩云之南/</id>
    <published>2014-05-12T11:09:59.000Z</published>
    <updated>2016-06-08T14:12:31.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;跨入华科校门的时候，我说我要在大学结识一群好伙伴，到后来，我就遇见了你们，这次把我们的毕业旅行选在了彩云之南。&lt;/p&gt;
&lt;h3 id=&quot;记忆不散的相册&quot;&gt;&lt;a href=&quot;#记忆不散的相册&quot; class=&quot;headerlink&quot; title=&quot;记忆不散的相册&quot;&gt;&lt;/a&gt;记忆不散的相册&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/9.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;跨入华科校门的时候，我说我要在大学结识一群好伙伴，到后来，我就遇见了你们，这次把我们的毕业旅行选在了彩云之南。&lt;/p&gt;
&lt;h3 id=&quot;记忆
    
    </summary>
    
    
      <category term="时光相册" scheme="http://xuzichao.com/tags/%E6%97%B6%E5%85%89%E7%9B%B8%E5%86%8C/"/>
    
  </entry>
  
</feed>
