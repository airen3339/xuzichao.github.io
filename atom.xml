<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>徐子超的博客</title>
  <subtitle>毕业于华中科技大学，今日头条在职</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuzichao.com/"/>
  <updated>2017-06-20T11:54:32.000Z</updated>
  <id>http://xuzichao.com/</id>
  
  <author>
    <name>东境</name>
    <email>529841962@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>将机器学习模型转化为CoreML格式</title>
    <link href="http://xuzichao.com/2017/06/06/%E5%B0%86%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E8%BD%AC%E5%8C%96%E4%B8%BACoreML%E6%A0%BC%E5%BC%8F%20/"/>
    <id>http://xuzichao.com/2017/06/06/将机器学习模型转化为CoreML格式 /</id>
    <published>2017-06-06T04:42:52.000Z</published>
    <updated>2017-06-20T11:54:32.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;将机器学习模型转化为CoreML格式&quot;&gt;&lt;a href=&quot;#将机器学习模型转化为CoreML格式&quot; class=&quot;headerlink&quot; title=&quot;将机器学习模型转化为CoreML格式&quot;&gt;&lt;/a&gt;将机器学习模型转化为CoreML格式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;接上篇：机器学习在IOS开发中的应用 CoreML&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;四、创建自己的Core-Ml-Model&quot;&gt;&lt;a href=&quot;#四、创建自己的Core-Ml-Model&quot; class=&quot;headerlink&quot; title=&quot;四、创建自己的Core Ml Model&quot;&gt;&lt;/a&gt;四、创建自己的Core Ml Model&lt;/h2&gt;&lt;h3 id=&quot;4-1-Apple支持的模型&quot;&gt;&lt;a href=&quot;#4-1-Apple支持的模型&quot; class=&quot;headerlink&quot; title=&quot;4.1 Apple支持的模型&quot;&gt;&lt;/a&gt;4.1 Apple支持的模型&lt;/h3&gt;&lt;p&gt;苹果支持由第三方工具和框架训练出来的机器学习模型转化，我们可以只用苹果提供的转化工具,将个人已经训练好的数据模型转化为CoreML进行支持。工具为 Core ML Tools ，是基于Python开发的工具，需要自己安装配置，到这里，上面一二节的概念理解就有作用了，前面提到了机器学习所使用到的思想算法，这里工具有对应的类型支持转化。我从官网对照理解过来如下图：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;学习模型&lt;/th&gt;
&lt;th&gt;子算法类型&lt;/th&gt;
&lt;th&gt;工具框架&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;人工神经网络&lt;/td&gt;
&lt;td&gt;多层向前反馈网络（Multilayer Feedforward Network）、CNN卷积神经网络（Convolution Neural Network、RNN递归神经网络（Recurrent Neural Networks）&lt;/td&gt;
&lt;td&gt;Caffe、Keras 1.2.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;集成算法&lt;/td&gt;
&lt;td&gt;随机森林（Random forests）、迭代树（boosted trees）、决策树（decision trees）&lt;/td&gt;
&lt;td&gt;scikit-learn 0.18、XGBoost 0.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;支持向量机&lt;/td&gt;
&lt;td&gt;线性回归（Scalar regression）、多分类器（multiclass classification）&lt;/td&gt;
&lt;td&gt;scikit-learn 0.18、LIBSVM 3.22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;广义线性模型&lt;/td&gt;
&lt;td&gt;线性回归（Linear regression）、多分类器（multiclass classification）、标量回归（Scalar regression）&lt;/td&gt;
&lt;td&gt;scikit-learn 0.18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;特征工程&lt;/td&gt;
&lt;td&gt;稀疏向量化（Sparse vectorization）、密集向量化（ dense vectorization）、分类处理（categorical processing）&lt;/td&gt;
&lt;td&gt;scikit-learn 0.18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机器学习流&lt;/td&gt;
&lt;td&gt;马尔可夫链（Sequentially chained models）&lt;/td&gt;
&lt;td&gt;scikit-learn 0.18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;4-2-转换你的学习模型&quot;&gt;&lt;a href=&quot;#4-2-转换你的学习模型&quot; class=&quot;headerlink&quot; title=&quot;4.2 转换你的学习模型&quot;&gt;&lt;/a&gt;4.2 转换你的学习模型&lt;/h3&gt;&lt;h2 id=&quot;五、时光相册的机器学习&quot;&gt;&lt;a href=&quot;#五、时光相册的机器学习&quot; class=&quot;headerlink&quot; title=&quot;五、时光相册的机器学习&quot;&gt;&lt;/a&gt;五、时光相册的机器学习&lt;/h2&gt;&lt;h2 id=&quot;六、小结&quot;&gt;&lt;a href=&quot;#六、小结&quot; class=&quot;headerlink&quot; title=&quot;六、小结&quot;&gt;&lt;/a&gt;六、小结&lt;/h2&gt;&lt;p&gt;从本次实践看来..&lt;/p&gt;
&lt;p&gt;写本文的目的不仅仅是对WWDC新技术的探索和分享，更是自己对机器学习的兴趣，搜索查询完成IOS的demo测试，完成本篇的时候，我对机器学习有了基础的认识，仿佛有了一种貌似学完python就能转行的自信，😀，加油吧，少年。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;将机器学习模型转化为CoreML格式&quot;&gt;&lt;a href=&quot;#将机器学习模型转化为CoreML格式&quot; class=&quot;headerlink&quot; title=&quot;将机器学习模型转化为CoreML格式&quot;&gt;&lt;/a&gt;将机器学习模型转化为CoreML格式&lt;/h3&gt;&lt;blockquo
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>机器学习在IOS开发中的应用 CoreML</title>
    <link href="http://xuzichao.com/2017/06/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8IOS%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%20CoreML/"/>
    <id>http://xuzichao.com/2017/06/05/机器学习在IOS开发中的应用 CoreML/</id>
    <published>2017-06-05T04:42:52.000Z</published>
    <updated>2017-06-20T11:50:24.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;机器学习在IOS开发中的应用-CoreML&quot;&gt;&lt;a href=&quot;#机器学习在IOS开发中的应用-CoreML&quot; class=&quot;headerlink&quot; title=&quot;机器学习在IOS开发中的应用 CoreML&quot;&gt;&lt;/a&gt;机器学习在IOS开发中的应用 CoreML&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;前言：2017年的WWDC大会苹果赋予了开发者们新能力，能够将机器学习应用在移动端上，这着实是一次让人感到兴奋的事情，一颗赛艇有木有！！积极开展的Session学习活动，本篇在第一节和第二节引用了一些概念和背景来帮助理解，熟练工请忽略，跳至第三节直接开始操作，本文同时请教了时光相册的同事，完成了在图片学习的demo。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、AI-ML-DL&quot;&gt;&lt;a href=&quot;#一、AI-ML-DL&quot; class=&quot;headerlink&quot; title=&quot;一、AI.ML.DL&quot;&gt;&lt;/a&gt;一、AI.ML.DL&lt;/h2&gt;&lt;h3 id=&quot;1、-人工智能&quot;&gt;&lt;a href=&quot;#1、-人工智能&quot; class=&quot;headerlink&quot; title=&quot;1、 人工智能&quot;&gt;&lt;/a&gt;1、 人工智能&lt;/h3&gt;&lt;h4 id=&quot;1-1-定义：&quot;&gt;&lt;a href=&quot;#1-1-定义：&quot; class=&quot;headerlink&quot; title=&quot;1.1 定义：&quot;&gt;&lt;/a&gt;1.1 定义：&lt;/h4&gt;&lt;p&gt;让人工制造出来的系统或者机器，其运作行为看起来就像是人所表现出的智能行为一样，即机器“像人一样思考”、“像人一样行动”、“理性地思考”和“理性地行动”。人工智能的研究是高度技术性和专业的，比如机器学习就是属于学习方向的课题，让机器具有人一样的学习行为。&lt;/p&gt;
&lt;h4 id=&quot;1-2-研究课题：&quot;&gt;&lt;a href=&quot;#1-2-研究课题：&quot; class=&quot;headerlink&quot; title=&quot;1.2 研究课题：&quot;&gt;&lt;/a&gt;1.2 研究课题：&lt;/h4&gt;&lt;p&gt;演绎推理和解决问题、知识表示法、规划、学习、自然语言处理、运动和控制、知觉、社交、创造力、多元智能、伦理管理、经济冲击&lt;/p&gt;
&lt;h3 id=&quot;2、机器学习&quot;&gt;&lt;a href=&quot;#2、机器学习&quot; class=&quot;headerlink&quot; title=&quot;2、机器学习&quot;&gt;&lt;/a&gt;2、机器学习&lt;/h3&gt;&lt;h4 id=&quot;2-1-定义：&quot;&gt;&lt;a href=&quot;#2-1-定义：&quot; class=&quot;headerlink&quot; title=&quot;2.1 定义：&quot;&gt;&lt;/a&gt;2.1 定义：&lt;/h4&gt;&lt;p&gt;通过在大量数据中寻找模式,从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法.因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论，涵盖一切有关数据训练的学习算法。&lt;/p&gt;
&lt;h4 id=&quot;2-2-方式分类：&quot;&gt;&lt;a href=&quot;#2-2-方式分类：&quot; class=&quot;headerlink&quot; title=&quot;2.2 方式分类：&quot;&gt;&lt;/a&gt;2.2 方式分类：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;监督学习：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。训练集中的目标是由人标注的。类似概念还有半监督学习和无监督学习。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增强学习：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过观察来学习做成如何的动作。每个动作都会对环境有所影响，学习对象根据观察到的周围环境的反馈来做出判断。 &lt;/p&gt;
&lt;h4 id=&quot;2-3-使用算法：&quot;&gt;&lt;a href=&quot;#2-3-使用算法：&quot; class=&quot;headerlink&quot; title=&quot;2.3 使用算法：&quot;&gt;&lt;/a&gt;2.3 使用算法：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;构造间隔理论分布：聚类分析和模式识别&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人工神经网络&lt;br&gt;决策树&lt;br&gt;感知器&lt;br&gt;支持向量机&lt;br&gt;集成学习AdaBoost&lt;br&gt;降维与度量学习&lt;br&gt;聚类&lt;br&gt;贝叶斯分类器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造条件概率：回归分析和统计分类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;高斯过程回归&lt;br&gt;线性判别分析&lt;br&gt;最近邻居法&lt;br&gt;径向基函数核&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过再生模型构造概率密度函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最大期望算法&lt;br&gt;概率图模型：包括贝叶斯网和Markov随机场&lt;br&gt;Generative Topographic Mapping&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;近似推断技术：&lt;br&gt;马尔可夫链&lt;br&gt;蒙特卡罗方法&lt;br&gt;变分法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;苹果的 Core ML 框架支持神经网络、树组合、支持向量机、广义线性模型、特征工程和流水线模型&lt;/p&gt;
&lt;h3 id=&quot;3、深度学习&quot;&gt;&lt;a href=&quot;#3、深度学习&quot; class=&quot;headerlink&quot; title=&quot;3、深度学习&quot;&gt;&lt;/a&gt;3、深度学习&lt;/h3&gt;&lt;h4 id=&quot;3-1-定义：&quot;&gt;&lt;a href=&quot;#3-1-定义：&quot; class=&quot;headerlink&quot; title=&quot;3.1 定义：&quot;&gt;&lt;/a&gt;3.1 定义：&lt;/h4&gt;&lt;p&gt;深度学习是机器学习中一种基于对数据进行表征学习的方法，起源于人工神经网络，在前期机器学习并没有深度学习这样的学习模型。所以我们现在也认为它是属于深度学习属于机器学习范畴内。它试图使用包含复杂结构或由多重非线性变换构成的多个处理层对数据进行高层抽象的算法。&lt;/p&gt;
&lt;h4 id=&quot;3-2-关系图：&quot;&gt;&lt;a href=&quot;#3-2-关系图：&quot; class=&quot;headerlink&quot; title=&quot;3.2 关系图：&quot;&gt;&lt;/a&gt;3.2 关系图：&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/assets/images/AIMLDL.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;二、机器学习的应用发展：&quot;&gt;&lt;a href=&quot;#二、机器学习的应用发展：&quot; class=&quot;headerlink&quot; title=&quot;二、机器学习的应用发展：&quot;&gt;&lt;/a&gt;二、机器学习的应用发展：&lt;/h2&gt;&lt;h3 id=&quot;2-1-发展：&quot;&gt;&lt;a href=&quot;#2-1-发展：&quot; class=&quot;headerlink&quot; title=&quot;2.1  发展：&quot;&gt;&lt;/a&gt;2.1  发展：&lt;/h3&gt;&lt;p&gt;1956年，达特茅斯会议提出了“人工智能”的概念。其后，人工智能就一直萦绕于人们的脑海之中，并在科研实验室中慢慢孵化。之后的几十年，人工智能一直在两极反转，或被称作人类文明耀眼未来的预言；或者被当成技术疯子的狂想扔到垃圾堆里，直到2012年之前，这两种声音还在同时存在。主要问题来自于运算需求难以得到满足，即使是最基本的神经网络，也需要大量的运算。过去几年，尤其是2015年以来，人工智能开始大爆发，很大一部分是由于GPU的广泛应用，使得并行计算变得更快、更便宜、更有效。当然，无限拓展的存储能力和骤然爆发的数据洪流（大数据）的组合拳，也使得图像数据、文本数据、交易数据、映射数据全面海量爆发。&lt;/p&gt;
&lt;h3 id=&quot;2-2-应用：&quot;&gt;&lt;a href=&quot;#2-2-应用：&quot; class=&quot;headerlink&quot; title=&quot;2.2 应用：&quot;&gt;&lt;/a&gt;2.2 应用：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;领域列举&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人等等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;场景举例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;句子翻译、动态手势识别、个人化推荐、美化的图像处理、云歌曲推荐、无人机航拍的视频实时分类路况信息等等&lt;/p&gt;
&lt;h3 id=&quot;2-3-大公司&quot;&gt;&lt;a href=&quot;#2-3-大公司&quot; class=&quot;headerlink&quot; title=&quot;2.3 大公司&quot;&gt;&lt;/a&gt;2.3 大公司&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;FaceBook&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Facebook AI研究项目（FAIR）专注于基础科学以及长期研究,另外一个叫应用机器学习部门（AML）,将技术用于现有Facebook产品。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微软1991年就已经开始涉足机器学习，有数百名科学家和工程师。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Google Assistant是谷歌深度学习研究的集大成者。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Amazon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其CEO贝索斯称，已经悄悄研究了AI四年，目前在其语音识别生态系统上投入的人力有1000人。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Baidu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2014年，百度重金挖来谷歌深度学习项目负责人Andrew Ng，发力AI研究。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WWDC2017，苹果宣布面向开发者的机器学习框架Core ML ，加速在 iPhone、iPad、Apple Watch 上的人工智能任务。&lt;/p&gt;
&lt;h2 id=&quot;三、在IOS中使用机器学习&quot;&gt;&lt;a href=&quot;#三、在IOS中使用机器学习&quot; class=&quot;headerlink&quot; title=&quot;三、在IOS中使用机器学习&quot;&gt;&lt;/a&gt;三、在IOS中使用机器学习&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用Core ML，你可以将训练好的机器学习模型整合到你的应用中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-1-Core-ML简介&quot;&gt;&lt;a href=&quot;#3-1-Core-ML简介&quot; class=&quot;headerlink&quot; title=&quot;3.1 Core ML简介&quot;&gt;&lt;/a&gt;3.1 Core ML简介&lt;/h3&gt;&lt;p&gt;Core ML是一个训练好的模型Model，一个机器学习算法应用到一个训练数据集之后所得到的结果。利用该模型可以基于新的输入数据而进行预测，也就是利用了机器学习的结果。比如，如果一个模型在一个地区的历史房价数据上进行了训练，那么它就可能能够根据房子的卧室和浴室数量来预测房价。&lt;/p&gt;
&lt;p&gt;Core ML 为设备性能进行了优化，从而减少了内存占用和功耗。严格在设备上运行能够确保用户数据的隐私，并且能保证你的应用在没有网络连接时也能够工作和响应。&lt;/p&gt;
&lt;p&gt;Core ML 框架本身构建于低层面的原语（primitives）之上，比如 Accelerate、BNNS 和 Metal Performance Shaders；&lt;/p&gt;
&lt;p&gt;构建完成的Core Ml又作为其他更高级框架的基础，比如支持用于图像分析的 Vision 框架，用于自然语言处理的 Foundation类，以及用于评估已经学习到的决策树的 GameplayKit。结构图如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/CoreMl.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-2-如何获得CoreMl-Model&quot;&gt;&lt;a href=&quot;#3-2-如何获得CoreMl-Model&quot; class=&quot;headerlink&quot; title=&quot;3.2 如何获得CoreMl Model&quot;&gt;&lt;/a&gt;3.2 如何获得CoreMl Model&lt;/h3&gt;&lt;p&gt;从如上定义看出，CoreMl框架只是将机器学习后的成果拿来应用，本身并不涉及机器学习的运行环境和过程。获得这些结果的方式有两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;苹果爸爸为你提供的现在model&lt;br&gt;根据自己的需要下载：&lt;a href=&quot;https://developer.apple.com/machine-learning&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/machine-learning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自己创建model&lt;br&gt;苹果爸爸为开发者提供了生成方法，不满意官方或者使用不足的时候，可以自己去机器学习完成，在创建应用，即第四节的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-3-将CoreML模型用在你的应用中&quot;&gt;&lt;a href=&quot;#3-3-将CoreML模型用在你的应用中&quot; class=&quot;headerlink&quot; title=&quot;3.3 将CoreML模型用在你的应用中&quot;&gt;&lt;/a&gt;3.3 将CoreML模型用在你的应用中&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;新建demo工程，在工程target中在Build Phase的Link Binary With Libraries里，加上CoreML.framework系统框架。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将获得的 CoreMl Model 添加至工程中，我们以GoogLeNetPlaces.mlmodel为例:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/GoogLeNetPlaces.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意中间有个Model Class ，点击查看api调用，有两点注意，输入参数为 CVPixelBufferRef 格式,图片需要是224X224像素的大小，所以需要自己写方法去转化为合适的参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/GoogleAPI.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用示例&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;GoogLeNetPlaces *model = [[GoogLeNetPlaces alloc] init];
UIImage *scaledImage = [self imageScaleToSize224:CGSizeMake(224, 224)];
CVPixelBufferRef buffer = [self pixelBufferFromImage:scaledImage];
GoogLeNetPlacesInput *input = [[GoogLeNetPlacesInput alloc] initWithSceneImage:buffer];
GoogLeNetPlacesOutput *output = [model predictionFromFeatures:input error:nil];
NSLog(@&amp;quot;Scene label is: %@&amp;quot;, output.sceneLabel);
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;结论&lt;/p&gt;
&lt;p&gt;百度搜索图片，下载常规的桌子、卧室图片，利用google此个model进行判断输出，正确。输入健身房的图片，判断输出为博物馆。由此可以看出，训练样本过少，当输入数据变复杂的时候就不能判断正确，侧面激励开发者们自己开展训练模型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;本篇续文：将机器学习模型转化为CoreML格式 &lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;机器学习在IOS开发中的应用-CoreML&quot;&gt;&lt;a href=&quot;#机器学习在IOS开发中的应用-CoreML&quot; class=&quot;headerlink&quot; title=&quot;机器学习在IOS开发中的应用 CoreML&quot;&gt;&lt;/a&gt;机器学习在IOS开发中的应用 CoreML&lt;/
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用CocoaPods创建私有仓库</title>
    <link href="http://xuzichao.com/2016/11/22/%E4%BD%BF%E7%94%A8CocoaPods%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <id>http://xuzichao.com/2016/11/22/使用CocoaPods创建私有仓库/</id>
    <published>2016-11-22T11:09:59.000Z</published>
    <updated>2017-06-04T07:12:13.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;CocoaPods创建私有仓库&quot;&gt;&lt;a href=&quot;#CocoaPods创建私有仓库&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods创建私有仓库&quot;&gt;&lt;/a&gt;CocoaPods创建私有仓库&lt;/h1&gt;&lt;h2 id=&quot;一、两个概念：&quot;&gt;&lt;a href=&quot;#一、两个概念：&quot; class=&quot;headerlink&quot; title=&quot;一、两个概念：&quot;&gt;&lt;/a&gt;一、两个概念：&lt;/h2&gt;&lt;h3 id=&quot;1、XXX-podspec-配置文件&quot;&gt;&lt;a href=&quot;#1、XXX-podspec-配置文件&quot; class=&quot;headerlink&quot; title=&quot;1、XXX.podspec   配置文件&quot;&gt;&lt;/a&gt;1、XXX.podspec   配置文件&lt;/h3&gt;&lt;p&gt;spec 配置文件是cocoapods的每一个代码仓库所对应的信息管理文件，主要是对仓库的行为进行配置，每一个版本的代码仓库都对应有一个配置文件。&lt;/p&gt;
&lt;p&gt;包括仓库的名称、版本号、描述、主页地址、证书说明、作者、版本指定方式、工程的目标版本号、文件和资源的路径、依赖的库关系等。举例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Be sure to run `pod lib lint ios-category.podspec&#39; to ensure this is a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# valid spec before submitting.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Any lines starting with a # are optional, but their use is encouraged&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pod::Spec.&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |s|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.name             = &lt;span class=&quot;string&quot;&gt;&#39;ios-category&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.version          = &lt;span class=&quot;string&quot;&gt;&#39;0.0.2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.summary          = &lt;span class=&quot;string&quot;&gt;&#39;ios-category is used for ios-network&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# This description is used to generate tags and improve search results.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   * Think: What does it do? Why did you write it? What is the focus?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   * Try to keep it short, snappy and to the point.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   * Write the description between the DESC delimiters below.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   * Finally, don&#39;t worry about the indent, CocoaPods strips it!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.description      = &amp;lt;&amp;lt;-DESC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.homepage         = &lt;span class=&quot;string&quot;&gt;&#39;http://www.example.com&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.screenshots     = &#39;www.example.com/screenshots_1&#39;, &#39;www.example.com/screenshots_2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.license          = &amp;#123; :type =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;MIT&#39;&lt;/span&gt;, :file =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;LICENSE&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.author           = &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;xuzichao&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;xuzichao03@gmail.com&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.source           = &amp;#123; :git =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;git@code.xuzichao.org:tt_pods_ios-category.git&#39;&lt;/span&gt;, :tag =&amp;gt; s.version.to_s  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.social_media_url = &#39;https://twitter.com/&amp;lt;TWITTER_USERNAME&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.ios.deployment_target = &lt;span class=&quot;string&quot;&gt;&#39;6.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.source_files = &lt;span class=&quot;string&quot;&gt;&#39;ios-category/Classes/**/*&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.resource_bundles = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;ios-category&#39;&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;string&quot;&gt;&#39;ios-category/Resources/*&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.public_header_files = &#39;Pod/Classes/**/*.h&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.frameworks = &#39;UIKit&#39;, &#39;MapKit&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.dependency &#39;ios-categorying&#39;, &#39;~&amp;gt; 2.3&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、Spec-repo&quot;&gt;&lt;a href=&quot;#2、Spec-repo&quot; class=&quot;headerlink&quot; title=&quot;2、Spec repo&quot;&gt;&lt;/a&gt;2、Spec repo&lt;/h3&gt;&lt;p&gt;组合词，表示仓库的概念，主要是用于存储pod代码库对应的podspec文件，管理各个仓库的各个版本的代码，它其实就是一个容器。Cocoapods会默认在本地建立一个容器，包含了你各个工程对应的代码仓库，当你使用了Cocoapods后，它们就会被clone到本地的~/.cocoapods/repos目录下。这里指代的是Cocoapods默认创建的仓库，其实我们不需要关心。&lt;/p&gt;
&lt;p&gt;当我们创建私有库的时候，我们需要有自己的容器，用于存放自己的各个代码库，和上面的Cocoapods创建的是区别开的。我们自己创建的容器，其实就是一个远端的git仓库，我们把代码库对应的各个版本配置文件提交上去。&lt;/p&gt;
&lt;h2 id=&quot;二、创建的操作：&quot;&gt;&lt;a href=&quot;#二、创建的操作：&quot; class=&quot;headerlink&quot; title=&quot;二、创建的操作：&quot;&gt;&lt;/a&gt;二、创建的操作：&lt;/h2&gt;&lt;h3 id=&quot;1、使用cocoapods：&quot;&gt;&lt;a href=&quot;#1、使用cocoapods：&quot; class=&quot;headerlink&quot; title=&quot;1、使用cocoapods：&quot;&gt;&lt;/a&gt;1、使用cocoapods：&lt;/h3&gt;&lt;p&gt;1.1 命令&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo gem &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; cocoapods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch podfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;1.2 pod install 、 pod update&lt;/p&gt;
&lt;p&gt;pod install 将pod的版本写入Podfile.lock文件中.对于已经在Podfile.lock中有记录的Pod下载对应的版本，即便有新的版本，也不会去更新.对于没有记录的，根据Podfile中的约定，下载版本，并把版本信息写入Podfile.lock中.&lt;/p&gt;
&lt;p&gt;只有当需要更新pod版本时，才用pod update,其余时间都用pod install&lt;/p&gt;
&lt;h3 id=&quot;2、私有库&quot;&gt;&lt;a href=&quot;#2、私有库&quot; class=&quot;headerlink&quot; title=&quot;2、私有库&quot;&gt;&lt;/a&gt;2、私有库&lt;/h3&gt;&lt;p&gt;2.1 创建并设置一个私有的Spec Repo。&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;pod repo add TestSpecs &lt;span class=&quot;symbol&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;regexp&quot;&gt;/coding.net/test&lt;/span&gt;.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.2 创建Pod的所需要的项目工程文件，并且有可访问的项目版本控制地址。&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;git commit -s -m &lt;span class=&quot;string&quot;&gt;&quot;我的工程代码文件&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;git remote add origin git&lt;span class=&quot;variable&quot;&gt;@coding&lt;/span&gt;.&lt;span class=&quot;symbol&quot;&gt;net:&lt;/span&gt;ios-category.git     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;git push origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.3 创建Pod所对应的podspec文件。&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pod &lt;span class=&quot;keyword&quot;&gt;spec&lt;/span&gt; create ios-category.podspec&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.4 本地测试配置好的podspec文件是否可用。&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pod &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lint&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pod &lt;span class=&quot;string&quot;&gt;&#39;ios-category&#39;&lt;/span&gt;, :podspec =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;~/Users/ios-category.podspec&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#指定podspec文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.5 向私有的Spec Repo中提交podspec。&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;pod&lt;/span&gt; repo &lt;span class=&quot;keyword&quot;&gt;push &lt;/span&gt;TestSpecs ios-category.podspec&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.6 在个人项目中的Podfile中增加刚刚制作的好的Pod并使用。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# private&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;https://coding.net/test.git&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# public&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;https://github.com/CocoaPods/Specs.git&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target &lt;span class=&quot;string&quot;&gt;&#39;ReactiveCocoaDemo&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&quot;ios-category&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;三、其他说明&quot;&gt;&lt;a href=&quot;#三、其他说明&quot; class=&quot;headerlink&quot; title=&quot;三、其他说明&quot;&gt;&lt;/a&gt;三、其他说明&lt;/h2&gt;&lt;p&gt;按照阶段二进行操作，即可顺利完成pod工程的引用，其他介绍说明文档中可能出现的，testpod 工程，其实可以不用管。比如：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod spec create PodTestLibrary git&lt;span class=&quot;meta&quot;&gt;@coding&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;net:&lt;/span&gt;test.gitt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以及由于pod的各个版本变化，spec文件有可能本来是正确的，但是pod lib lint这一步始终不能通过，这样pod repo push这一步就无法完成。可以直接将spec文件通过git 提交的方式放进远端的Spec Repo中，依然可以正常运行。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CocoaPods创建私有仓库&quot;&gt;&lt;a href=&quot;#CocoaPods创建私有仓库&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods创建私有仓库&quot;&gt;&lt;/a&gt;CocoaPods创建私有仓库&lt;/h1&gt;&lt;h2 id=&quot;一、两个概念：&quot;&gt;&lt;a h
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>今日头条IOS热修复解决方案</title>
    <link href="http://xuzichao.com/2016/09/11/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1IOS%E7%83%AD%E4%BF%AE%E5%A4%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://xuzichao.com/2016/09/11/今日头条IOS热修复解决方案/</id>
    <published>2016-09-11T14:59:12.000Z</published>
    <updated>2017-06-04T05:30:32.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;TTSparkRescue&quot;&gt;&lt;a href=&quot;#TTSparkRescue&quot; class=&quot;headerlink&quot; title=&quot;TTSparkRescue&quot;&gt;&lt;/a&gt;TTSparkRescue&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;备注：2017年4月开始出现使用热修复审核不通过的情况，经过混淆的方式后，绕过了苹果的检测，但是到5月初的时候，苹果全方面严打IOS热修复策略，各方APP包括头条在内的方案被迫下架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;p&gt;TTSparkRescue是头条公司层面的通用的热修复库，同时提供给其他产品线使用。设计包括如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动崩溃计数修改为3秒后清除&lt;/li&gt;
&lt;li&gt;启动初始化的预清理&lt;/li&gt;
&lt;li&gt;启动崩溃本地有缓存预先执行&lt;/li&gt;
&lt;li&gt;启动崩溃第二次，启动上报逻辑和预处理&lt;/li&gt;
&lt;li&gt;启动崩溃第三次，开始启动修复逻辑&lt;/li&gt;
&lt;li&gt;启动后修复&lt;/li&gt;
&lt;li&gt;补丁下发更新机制&lt;/li&gt;
&lt;li&gt;客户端本地处理下发的patch错误&lt;/li&gt;
&lt;li&gt;下发JS空白&lt;/li&gt;
&lt;li&gt;下发前，本地预先运行，验证JS脚本&lt;/li&gt;
&lt;li&gt;本地模拟crash&lt;/li&gt;
&lt;li&gt;管理的系统版本号粒度更精细&lt;/li&gt;
&lt;li&gt;增加端监控，传出参数，由TTMonitor在外部配合调到 &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-快速集成&quot;&gt;&lt;a href=&quot;#2-快速集成&quot; class=&quot;headerlink&quot; title=&quot;2. 快速集成&quot;&gt;&lt;/a&gt;2. 快速集成&lt;/h1&gt;&lt;h2 id=&quot;2-1-Podfile引用&quot;&gt;&lt;a href=&quot;#2-1-Podfile引用&quot; class=&quot;headerlink&quot; title=&quot;2.1 Podfile引用&quot;&gt;&lt;/a&gt;2.1 Podfile引用&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;头条内部的git地址&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;TTSparkRescue&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2.3&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-2-代码块替换&quot;&gt;&lt;a href=&quot;#2-2-代码块替换&quot; class=&quot;headerlink&quot; title=&quot;2.2 代码块替换&quot;&gt;&lt;/a&gt;2.2 代码块替换&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;方法A: &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;APP原本的didFinishLaunchingWithOptions的全部逻辑didFinishLaunchingWithOptions&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;方法B :&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;新建并复制，参数和函数体与方法A保持一致&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(BOOL)&lt;/span&gt;application:&lt;span class=&quot;params&quot;&gt;(UIApplication *)&lt;/span&gt;application&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; normalLaunchProcessWithOptions:&lt;span class=&quot;params&quot;&gt;(NSDictionary *)&lt;/span&gt;launchOptions&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用TTJSPatch结构替换方法A，下面部分可以直接复制即可用：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)application:(&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; *)application didFinishLaunchingWithOptions:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)launchOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) wself = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#if DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//默认注释关闭&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//    [[TTSparkRescue shareInstance] setTestPatch:YES simulationCrash:YES];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//内部监控上报&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[TTSparkRescue shareInstance] setReportBlock:^(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *key, &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *info) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//crash的预处理逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([key isEqualToString:TTJSPatchLaunchCrash]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//优先清理coredata缓存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//解决可能造成的crash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//连续崩溃第四次才启用安全模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[TTMonitor shareManager] trackService:key status:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; extra:info];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//运行错误处理，内部已加监控, type == 1 for JS, type == 2 for OC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[TTSparkRescue shareInstance] setJSCrashHanlder:^(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; type, &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//CompletionBlock:头条正常启动逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[TTSparkRescue shareInstance] setBoolCompletionBlock:^&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#if DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//本地测试的时候模拟crash，不必注释，由前面的开关控制即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[TTSparkRescue shareInstance] simulationLauchCrash];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[TTSparkRescue shareInstance] simulationLauchDelayCrash];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[TTSparkRescue shareInstance] simulationActiveCrash];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [wself application:application normalLaunchProcessWithOptions:launchOptions];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//启动执行逻辑，完成后调用CompletionBlock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [[TTSparkRescue shareInstance] launchContinuousCrashProcess];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;3-功能设计&quot;&gt;&lt;a href=&quot;#3-功能设计&quot; class=&quot;headerlink&quot; title=&quot;3. 功能设计&quot;&gt;&lt;/a&gt;3. 功能设计&lt;/h1&gt;&lt;h2 id=&quot;3-1、说明：&quot;&gt;&lt;a href=&quot;#3-1、说明：&quot; class=&quot;headerlink&quot; title=&quot;3.1、说明：&quot;&gt;&lt;/a&gt;3.1、说明：&lt;/h2&gt;&lt;h4 id=&quot;1、启动崩溃计数修改为12秒后清除&quot;&gt;&lt;a href=&quot;#1、启动崩溃计数修改为12秒后清除&quot; class=&quot;headerlink&quot; title=&quot;1、启动崩溃计数修改为12秒后清除&quot;&gt;&lt;/a&gt;1、启动崩溃计数修改为12秒后清除&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;如果启动过程中，出现延迟操作，操作时间在原先的5秒之外，那么这次操作如果出现崩溃将无法被记录下。也就无法再启动中修复。&lt;br&gt;     将清除时间调大，设置为一个网络请求的返回时间，覆盖了延迟造作造成的crash。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;2、启动初始化的预清理&quot;&gt;&lt;a href=&quot;#2、启动初始化的预清理&quot; class=&quot;headerlink&quot; title=&quot;2、启动初始化的预清理&quot;&gt;&lt;/a&gt;2、启动初始化的预清理&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;当我们判断当前版本号发生变化时，直接清除本地的patch文件，避免升级覆盖安装后，还持有原先逻辑或者错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;3、启动崩溃本地有缓存预先执行&quot;&gt;&lt;a href=&quot;#3、启动崩溃本地有缓存预先执行&quot; class=&quot;headerlink&quot; title=&quot;3、启动崩溃本地有缓存预先执行&quot;&gt;&lt;/a&gt;3、启动崩溃本地有缓存预先执行&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;因为是修复崩溃的逻辑，之前需要达到崩溃条件后才开始请求下发，原本就体验差了，如果再遇上网络缓慢的时候，启动会很慢，&lt;br&gt;  体验更差。并且每次都会崩溃后重新启动。此次修改后，出现一次之后同步请求返回patch,正常启动，下次进入，判断有缓存就直接执行，&lt;br&gt;  执行异步的请求更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;4、启动崩溃第二次，启动上报逻辑和预处理&quot;&gt;&lt;a href=&quot;#4、启动崩溃第二次，启动上报逻辑和预处理&quot; class=&quot;headerlink&quot; title=&quot;4、启动崩溃第二次，启动上报逻辑和预处理&quot;&gt;&lt;/a&gt;4、启动崩溃第二次，启动上报逻辑和预处理&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;APPDelegate 上报和预处理逻辑 ReportBlock，当出现第二次崩溃的时候，可以删除本地的一些可能会导致crash的东西，&lt;br&gt;比如本地的数据库可以先清理掉，等等。然后统计上报。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;5、启动崩溃第三次，开始启动修复逻辑&quot;&gt;&lt;a href=&quot;#5、启动崩溃第三次，开始启动修复逻辑&quot; class=&quot;headerlink&quot; title=&quot;5、启动崩溃第三次，开始启动修复逻辑&quot;&gt;&lt;/a&gt;5、启动崩溃第三次，开始启动修复逻辑&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;如果本地有缓存，则网络异步更新，因为后面的逻辑保证本地已有的缓存patchJS执行没错，所以可以先执行。&lt;br&gt;如果本地无缓存，则网络同步请求，返回补丁，运行成功后再启动APP正常流程。&lt;br&gt;不会再出现再次崩溃3此的情况。&lt;br&gt;只要出现3次崩溃，忽略本地缓存，直接请求更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;6、启动后修复&quot;&gt;&lt;a href=&quot;#6、启动后修复&quot; class=&quot;headerlink&quot; title=&quot;6、启动后修复&quot;&gt;&lt;/a&gt;6、启动后修复&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;启动中的时候，判断本地有缓存文件，预先执行，之后，每次active就会请求更新文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;7、补丁下发更新机制&quot;&gt;&lt;a href=&quot;#7、补丁下发更新机制&quot; class=&quot;headerlink&quot; title=&quot;7、补丁下发更新机制&quot;&gt;&lt;/a&gt;7、补丁下发更新机制&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;本地无缓存，直接存储，有缓存，判断版本号。&lt;br&gt; 我们在后台下发补丁的时候，目前依旧保持，升级版本号，全量覆盖。也就是说，app每个版本，在客户端里依旧保持唯一一个补丁，启动前和启动后各自有对应的唯一一个。&lt;br&gt;此处，服务端也有策略，我们上传的参数包含当前，版本，如果服务端有更高版本，就会升级。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;8、客户端本地处理下发的patch错误&quot;&gt;&lt;a href=&quot;#8、客户端本地处理下发的patch错误&quot; class=&quot;headerlink&quot; title=&quot;8、客户端本地处理下发的patch错误&quot;&gt;&lt;/a&gt;8、客户端本地处理下发的patch错误&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;(void)handleException:(void (^)(NSInteger crashType,NSString *msg))exceptionBlock;&lt;br&gt;crashType == 1 的时候是 JS环境 运行的Crash&lt;br&gt;crashType == 2 的时候是  OC环境 运行的Crash&lt;br&gt;当我们下发的脚本有问题的时候，客户端本地直接删除全部补丁文件，包括启动前和启动后。&lt;br&gt;APPDelegate 中 JSCrashHanlder 被调用，可以填写上报逻辑和反馈运行的错误原因。&lt;br&gt;在此条件下，当用户退到后台之后，自动崩溃，重新打开客户端没有patch，这个留出来及时下发修正后Patch的时机。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;9、下发JS空白&quot;&gt;&lt;a href=&quot;#9、下发JS空白&quot; class=&quot;headerlink&quot; title=&quot;9、下发JS空白&quot;&gt;&lt;/a&gt;9、下发JS空白&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;直接删除本地补丁文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;10、下发前，本地预先运行，验证JS脚本&quot;&gt;&lt;a href=&quot;#10、下发前，本地预先运行，验证JS脚本&quot; class=&quot;headerlink&quot; title=&quot;10、下发前，本地预先运行，验证JS脚本&quot;&gt;&lt;/a&gt;10、下发前，本地预先运行，验证JS脚本&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;直接将要在后台要下发的JS代码，非BASE64编码，贴到工程里的test.js 文件里，此处文件名固定。&lt;br&gt;并在APPDelegate 打开测试运行的开关，然后直接运行即可，测试完毕，防止错误，必须关闭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;11、本地模拟crash&quot;&gt;&lt;a href=&quot;#11、本地模拟crash&quot; class=&quot;headerlink&quot; title=&quot;11、本地模拟crash&quot;&gt;&lt;/a&gt;11、本地模拟crash&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;增加错误的OC代码导致crash，用于模拟各种情况，包括启动中，启动中延时，启动后。&lt;br&gt;并设置了开关，默认都是关闭的，随测试方法的开关一起，正式提交时，必须关闭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;2、管理的系统版本号粒度更精细&quot;&gt;&lt;a href=&quot;#2、管理的系统版本号粒度更精细&quot; class=&quot;headerlink&quot; title=&quot;2、管理的系统版本号粒度更精细&quot;&gt;&lt;/a&gt;2、管理的系统版本号粒度更精细&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;整数示例：8，9，10   —-   后台命中：8.x,9.x,10.x   IOS系统版本&lt;br&gt;精确示例：9.1.2 — 后台命中：9.1.2 IOS系统版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;13、下发补丁一并写注释&quot;&gt;&lt;a href=&quot;#13、下发补丁一并写注释&quot; class=&quot;headerlink&quot; title=&quot;13、下发补丁一并写注释&quot;&gt;&lt;/a&gt;13、下发补丁一并写注释&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;每次下发补丁，需要填写说明，包括：【事故原因】【下发人】【下发日期】&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;14、启动后的下发调用改为通知&quot;&gt;&lt;a href=&quot;#14、启动后的下发调用改为通知&quot; class=&quot;headerlink&quot; title=&quot;14、启动后的下发调用改为通知&quot;&gt;&lt;/a&gt;14、启动后的下发调用改为通知&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;不需要在applicationDidBecomeActive中再显示调用原来的makePatchRequestAfterLaunch，manager内部监听通知即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;15、增加端监控，传出参数，由TTMonitor在外部配合调到&quot;&gt;&lt;a href=&quot;#15、增加端监控，传出参数，由TTMonitor在外部配合调到&quot; class=&quot;headerlink&quot; title=&quot;15、增加端监控，传出参数，由TTMonitor在外部配合调到&quot;&gt;&lt;/a&gt;15、增加端监控，传出参数，由TTMonitor在外部配合调到&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;监控请求成功和失败、下发更新、版本升级删除的等等用于统计patch的使用情况，后期有利于生成分布和图形。&lt;br&gt;TTSparkRescueLaunchCrash&lt;br&gt;APPDelegate 上报和预处理逻辑 ReportBlock，当出现第二次崩溃的时候，可以删除本地的一些可能会导致crash的东西，&lt;br&gt;比如本地的数据库可以先清理掉，等等。然后统计上报。&lt;br&gt;TTSparkRescueServerCloseCrash&lt;br&gt;服务器端下发关闭运行JSPatch的统计&lt;br&gt;TTSparkRescueDeleteFile&lt;br&gt;删除清空本地文件的统计，下发空白、错误、运行错误、升级都会删除之前的缓存文件，用action字段区分。&lt;br&gt;TTSparkRescueError&lt;br&gt;内部运行的错误报告，文件请求失败和运行失败等。&lt;br&gt;TTSparkRescueUpdateFile&lt;br&gt;统计更新成功的事件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;3-2、测试Case&quot;&gt;&lt;a href=&quot;#3-2、测试Case&quot; class=&quot;headerlink&quot; title=&quot;3.2、测试Case&quot;&gt;&lt;/a&gt;3.2、测试Case&lt;/h2&gt;&lt;p&gt;1、启动中，有崩溃，包括延时崩溃，无缓存文件。正常同步请求返回，APP启动完成。&lt;/p&gt;
&lt;p&gt;2、启动中，有崩溃，包括延时崩溃，有缓存文件。&lt;br&gt;直接读取本地文件，APP启动完成。&lt;/p&gt;
&lt;p&gt;3、启动中，有崩溃，包括延时崩溃，下发JS语法的patch文件。&lt;br&gt;无法正常启动，连续crash3次后走同步请求。&lt;/p&gt;
&lt;p&gt;4、启动后，有崩溃，无缓存文件。正常异步请求返回，APP正常运行。&lt;/p&gt;
&lt;p&gt;5、启动后，有崩溃，有缓存文件。直接读取本地文件，正常同步请求返回更新文件，APP正常运行。&lt;/p&gt;
&lt;p&gt;6、启动后，下发错误JS语法的patch文件。客户端判断文件出错，删除全部补丁缓存文件，清零，开始重新请求更新。&lt;/p&gt;
&lt;p&gt;7、以上case通过线上下发运行一次，再本地测试开关运行一次。testPatch.js 在主工程被正确添加后，都可以正确执行。&lt;/p&gt;
&lt;p&gt;8、升级版本号，覆盖安装。删除本地原有的补丁文件，清零。&lt;/p&gt;
&lt;p&gt;9、监控点事件上报。正常对外输出事件和外带信息到APPDelegate中&lt;/p&gt;
&lt;h1 id=&quot;4-使用说明&quot;&gt;&lt;a href=&quot;#4-使用说明&quot; class=&quot;headerlink&quot; title=&quot;4. 使用说明&quot;&gt;&lt;/a&gt;4. 使用说明&lt;/h1&gt;&lt;h2 id=&quot;4-1-补丁后台管理&quot;&gt;&lt;a href=&quot;#4-1-补丁后台管理&quot; class=&quot;headerlink&quot; title=&quot;4.1 补丁后台管理&quot;&gt;&lt;/a&gt;4.1 补丁后台管理&lt;/h2&gt;&lt;p&gt;客户端的修复需要后端的支持，提供接口和后端管理平台，用于托管修复文件，控制版本和保证传输安全。客户端根据反馈的崩溃信息(版本、名称、设备、用户)，针对某一批用户或者某一个版本号，在后台进行选择对应的版本JS文件，进行下发即可。&lt;/p&gt;
&lt;h3 id=&quot;4-1-1-热修复接口定义&quot;&gt;&lt;a href=&quot;#4-1-1-热修复接口定义&quot; class=&quot;headerlink&quot; title=&quot;4.1.1 热修复接口定义&quot;&gt;&lt;/a&gt;4.1.1 热修复接口定义&lt;/h3&gt;&lt;p&gt;应用名称和应用ID作用一致，为了兼容老的已经发出去的版本，我们保留app_name，之后的都是用app_id，两者等效力，&lt;br&gt;参数命中其中一个，至少有一个就行，就可以返回值。  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数ID&lt;/th&gt;
&lt;th&gt;举例说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用版本号&lt;/td&gt;
&lt;td&gt;app_version&lt;/td&gt;
&lt;td&gt;5.6.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用名称&lt;/td&gt;
&lt;td&gt;app_name&lt;/td&gt;
&lt;td&gt;今日头条&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用ID&lt;/td&gt;
&lt;td&gt;app_id&lt;/td&gt;
&lt;td&gt;com.iphone.text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;启动前后&lt;/td&gt;
&lt;td&gt;app_launch&lt;/td&gt;
&lt;td&gt;0前1后&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;设备ID&lt;/td&gt;
&lt;td&gt;device_id&lt;/td&gt;
&lt;td&gt;用户的手机设备ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;编号&lt;/td&gt;
&lt;td&gt;无，客户端不作请求参数&lt;/td&gt;
&lt;td&gt;服务端后台的文件号，随意定，不重复即可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;百分比&lt;/td&gt;
&lt;td&gt;无，客户端不作请求参数&lt;/td&gt;
&lt;td&gt;服务端后台按量下发补丁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ON/OFF&lt;/td&gt;
&lt;td&gt;无，客户端不作请求参数&lt;/td&gt;
&lt;td&gt;服务端后台控制补丁开关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逗号分隔&lt;/td&gt;
&lt;td&gt;无，客户端不作请求参数&lt;/td&gt;
&lt;td&gt;服务端后台下发补丁，支持不同的版本，逗号分隔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用版本号扩展&lt;/td&gt;
&lt;td&gt;无，客户端不作请求参数&lt;/td&gt;
&lt;td&gt;服务端后台下发的补丁，补丁本身的版本号，格式约定：应用版本号整数数字.补丁版本号整数数字，比如：570.1，591.21&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;4-1-2-数据格式&quot;&gt;&lt;a href=&quot;#4-1-2-数据格式&quot; class=&quot;headerlink&quot; title=&quot;4.1.2 数据格式&quot;&gt;&lt;/a&gt;4.1.2 数据格式&lt;/h3&gt;&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;status:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;message:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;data:&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;     js_crash:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;//修复代码本身出错的时候打开&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;     js_version:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;560.4&lt;/span&gt;,         &lt;span class=&quot;comment&quot;&gt;//5.6.0版本的第四个JS版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;     js_value:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot; sfkdsfnldjgdfnkgndkfngdsfgmdfngfjshdbfkhrwnf&quot;&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;//js的BASE64编码值，客户端直接解码运行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-2-客户端运行：&quot;&gt;&lt;a href=&quot;#4-2-客户端运行：&quot; class=&quot;headerlink&quot; title=&quot;4.2 客户端运行：&quot;&gt;&lt;/a&gt;4.2 客户端运行：&lt;/h2&gt;&lt;p&gt;补丁分为启动前和启动后，和前面快速集成代码块一样，只需要这里，就已经是全部，启动前后的划分在内部执行，通知监听，不需要手动再调用。&lt;/p&gt;
&lt;h2 id=&quot;4-3、具体案例：&quot;&gt;&lt;a href=&quot;#4-3、具体案例：&quot; class=&quot;headerlink&quot; title=&quot;4.3、具体案例：&quot;&gt;&lt;/a&gt;4.3、具体案例：&lt;/h2&gt;&lt;p&gt;案例：5.7.0版本上bug修复&lt;/p&gt;
&lt;p&gt;当我们需要完全替换方法的时候，我们需要注意替换原则，就是尽量使用原生的Native方法，这样JSpatch在转化的过程中可以遵循原生方法规则，生成对应代码，在解析的时候可以还原。&lt;br&gt;比如：&lt;/p&gt;
&lt;h3 id=&quot;4-3-1-使用注意&quot;&gt;&lt;a href=&quot;#4-3-1-使用注意&quot; class=&quot;headerlink&quot; title=&quot;4.3.1 使用注意&quot;&gt;&lt;/a&gt;4.3.1 使用注意&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; setAutoresizingMaskFlexibleWidthAndHeight(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *view)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    view.autoresizingMask = &lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleWidth&lt;/span&gt;|&lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleHeight&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;setAutoresizingMaskFlexibleWidthAndHeight(self.footerView);&lt;br&gt;我们在写的时候得写成：&lt;br&gt;self.footerView.autoresizingMask = 2|16;&lt;br&gt;系统自定义的常量，比如：UIViewAutoresizingFlexibleWidth,在JSPtatch中将被转化为同名的变量，然而这个变量，却在JS环境中没有定义，从而会报错。&lt;br&gt;所以我们直接使用对应的常量数字 2.&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[[self.footerView footerScrollView]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;tt_addDelegate&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:self&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;asMainDelegate&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:NO&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用于JSPatch自定义的语法为使用下划线区分方法名称，所以当转化为的JS再次被转回来OC方法的时候，会出现[[self.footerView footerScrollView] tt:addDelegate:self asMainDelegate:NO];&lt;br&gt;这样就崩溃了。&lt;/p&gt;
&lt;h3 id=&quot;4-3-2-示例&quot;&gt;&lt;a href=&quot;#4-3-2-示例&quot; class=&quot;headerlink&quot; title=&quot;4.3.2  示例&quot;&gt;&lt;/a&gt;4.3.2  示例&lt;/h3&gt;&lt;p&gt;Native源代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TTDetailWebviewContainer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addFooterView:(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt;&amp;lt;TTDetailFooterViewProtocol&amp;gt; *)footerView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  detailFooterAddType:(TTDetailNatantStyle)natantStyle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.natantStyle = natantStyle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerView = footerView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerView addObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; forKeyPath:&lt;span class=&quot;string&quot;&gt;@&quot;footerScrollView&quot;&lt;/span&gt; options:&lt;span class=&quot;built_in&quot;&gt;NSKeyValueObservingOptionOld&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;NSKeyValueObservingOptionNew&lt;/span&gt; context:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerView footerScrollView] tt_addDelegate:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; asMainDelegate:&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footScrollView = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerView.footerScrollView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerView.frame = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bounds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//footerScrollView被赋值后，刷新scrollEnable和scrollToTop的状态；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerStatus = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerStatus;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setAutoresizingMaskFlexibleWidthAndHeight(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.footerView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; shouldOpenInsertionOptimization]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addFooterView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addFooterView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;目标JS代码：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;defineClass&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;TTDetailWebviewContainer&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;addFooterView_detailFooterAddType&lt;/span&gt;: function(footerView, natantStyle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.setNatantStyle(natantStyle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.setFooterView&lt;/span&gt;(footerView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.footerView&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.addObserver_forKeyPath_options_context&lt;/span&gt;(self, &lt;span class=&quot;string&quot;&gt;&quot;footerScrollView&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;|&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.footerView&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.footerScrollView&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.tt__addDelegate_asMainDelegate&lt;/span&gt;(self, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.setFootScrollView&lt;/span&gt;(self.footerView().footerScrollView());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.footerView&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.setFrame&lt;/span&gt;(self.bounds());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.setFooterStatus&lt;/span&gt;(self.footerStatus());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.footerView&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.setAutoresizingMask&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; | &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt; (self.shouldOpenInsertionOptimization()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.addFooterView&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.addFooterView&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;5-原理介绍&quot;&gt;&lt;a href=&quot;#5-原理介绍&quot; class=&quot;headerlink&quot; title=&quot;5. 原理介绍&quot;&gt;&lt;/a&gt;5. 原理介绍&lt;/h1&gt;&lt;h2 id=&quot;5-1-三方库&quot;&gt;&lt;a href=&quot;#5-1-三方库&quot; class=&quot;headerlink&quot; title=&quot;5.1 三方库&quot;&gt;&lt;/a&gt;5.1 三方库&lt;/h2&gt;&lt;p&gt;JSPatch(Github链接)诞生于2015年5月，最初是腾讯广研高级iOS开发@bang的个人项目。在Github.com上开源后获得了几千个star和几百个fork，广受关注，目前已被应用在大量腾讯/阿里/百度的App中。只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。所以我们通过下发 JS 脚本替换原生 Objective-C 代码，就可以实时修复线上 bug。针对头条客户端用于解决客户端发布后的崩溃修复问题，尤其是解决客户端的启动崩溃问题。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;objc/runtime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;objc/message.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-2-TTSparkRescue&quot;&gt;&lt;a href=&quot;#5-2-TTSparkRescue&quot; class=&quot;headerlink&quot; title=&quot;5.2 TTSparkRescue&quot;&gt;&lt;/a&gt;5.2 TTSparkRescue&lt;/h2&gt;&lt;h3 id=&quot;5-2-1-修复类型&quot;&gt;&lt;a href=&quot;#5-2-1-修复类型&quot; class=&quot;headerlink&quot; title=&quot;5.2.1 修复类型&quot;&gt;&lt;/a&gt;5.2.1 修复类型&lt;/h3&gt;&lt;h4 id=&quot;5-2-1-1-启动进行中&quot;&gt;&lt;a href=&quot;#5-2-1-1-启动进行中&quot; class=&quot;headerlink&quot; title=&quot;5.2.1.1 启动进行中&quot;&gt;&lt;/a&gt;5.2.1.1 启动进行中&lt;/h4&gt;&lt;p&gt;当发生启动崩溃的时候，通过同步的网络请求，下发JS脚本执行修复。下发的条件由本地的崩溃计数决定，应用每次启动都会在本地增加一次崩溃计数，并在3秒之后将计数清理，如果3秒内崩溃，则判定为一次真实的崩溃。当崩溃次数达到设置的条件的时候，比如连续崩溃3次，客户端就开始执行修复的逻辑过程，向后端发起对此接口的同步请求，由接口信息告知是否需要使用JS修复，是否需要更新JS文件，文件版本号以及JS文件内容的加密值。请求返回后，由客户端本地判断更新文件，下载，并执行。如果本地之前没有修复的JS 文件，默认需要请求更新。更新文件成功后，对应更新本地的文件版本号和MD5值。&lt;/p&gt;
&lt;p&gt;同步请求：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_semaphore_t &lt;/span&gt;semaphore = &lt;span class=&quot;keyword&quot;&gt;dispatch_semaphore_create(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t &lt;/span&gt;queue = &lt;span class=&quot;keyword&quot;&gt;dispatch_queue_create(&quot;queue&quot;, &lt;/span&gt;NULL)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_async(queue, &lt;/span&gt;^(void) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HandlerBlock semaphoreBlock = ^(TTSparkRescueCrashType type,NSString *msg)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;dispatch_semaphore_signal(semaphore);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &amp;#125;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self getLaunchRequestBlock:semaphoreBlock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_semaphore_wait(semaphore, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;DISPATCH_TIME_FOREVER);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请求返回保存本地&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;updateLaunchLocalJS:&lt;span class=&quot;params&quot;&gt;(NSString *)&lt;/span&gt;launchJS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                versionCode:&lt;span class=&quot;params&quot;&gt;(NSNumber *)&lt;/span&gt;versionCode&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行本地JS代码&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;exvalueBase64Script:&lt;span class=&quot;params&quot;&gt;(NSString *)&lt;/span&gt;base64Script;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;exvalueRescueScript:&lt;span class=&quot;params&quot;&gt;(NSString *)&lt;/span&gt;jsScript;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;监听是否有执行错误&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;setJSCrashHanlder:&lt;span class=&quot;params&quot;&gt;(HandlerBlock)&lt;/span&gt;handlerBlock;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;5-2-1-2-启动完成后，使用中&quot;&gt;&lt;a href=&quot;#5-2-1-2-启动完成后，使用中&quot; class=&quot;headerlink&quot; title=&quot;5.2.1.2 启动完成后，使用中&quot;&gt;&lt;/a&gt;5.2.1.2 启动完成后，使用中&lt;/h4&gt;&lt;p&gt;当到达启动崩溃条件的时候，我们直接执行启动热修复逻辑。启动的时间稍微加长，遇见网络慢的情况用户需要等待的时间就会更久，当然为了避免崩溃这都是必要的。还有，另外的情况是，当用户使用我们的应用的时候，在一个层级比较深的地方操作并出现崩溃，当用户用到这里之前才会崩溃都不会有，这种情况我们依然需要进行热修复。流程类似，为异步。&lt;/p&gt;
&lt;h3 id=&quot;5-2-2-补丁模拟自测&quot;&gt;&lt;a href=&quot;#5-2-2-补丁模拟自测&quot; class=&quot;headerlink&quot; title=&quot;5.2.2 补丁模拟自测&quot;&gt;&lt;/a&gt;5.2.2 补丁模拟自测&lt;/h3&gt;&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  测试环节，用一个方法控制开关&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  执行测试的testPatch.js,固定命名，测试完毕提交的时候必须关闭&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  模拟启动中崩溃,立刻&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  模拟启动中延迟崩溃，延迟启动中网络请求返回的默认时间10s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  模拟激活后崩溃,60s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt; (void)&lt;span class=&quot;symbol&quot;&gt;setTestPatch:&lt;/span&gt;(BOOL)testJsOn &lt;span class=&quot;symbol&quot;&gt;simulationCrash:&lt;/span&gt;(BOOL)crashOn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt; (void)simulationLauchCrash;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt; (void)simulationLauchDelayCrash;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt; (void)simulationActiveCrash;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;5-2-2-混淆方式，绕过审核&quot;&gt;&lt;a href=&quot;#5-2-2-混淆方式，绕过审核&quot; class=&quot;headerlink&quot; title=&quot;5.2.2 混淆方式，绕过审核&quot;&gt;&lt;/a&gt;5.2.2 混淆方式，绕过审核&lt;/h3&gt;&lt;h4 id=&quot;5-2-2-1-原理：&quot;&gt;&lt;a href=&quot;#5-2-2-1-原理：&quot; class=&quot;headerlink&quot; title=&quot;5.2.2.1 原理：&quot;&gt;&lt;/a&gt;5.2.2.1 原理：&lt;/h4&gt;&lt;p&gt;我们大致判断，苹果审核部检测应用是否使用JSPatch是通过运行时方法名检测。所以通过宏定义替换的方式，我们将与”JSPatch“有关的字段都用混淆的字符串进行宏定义替换，运行时检测到的都是混淆的不可读名称。&lt;/p&gt;
&lt;h4 id=&quot;5-2-2-2-脚本替换&quot;&gt;&lt;a href=&quot;#5-2-2-2-脚本替换&quot; class=&quot;headerlink&quot; title=&quot;5.2.2.2 脚本替换&quot;&gt;&lt;/a&gt;5.2.2.2 脚本替换&lt;/h4&gt;&lt;p&gt;shell脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/usr/bin/env bash  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;STRING_SYMBOL_FILE=&lt;span class=&quot;string&quot;&gt;&quot;func.list&quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HEAD_FILE=&lt;span class=&quot;string&quot;&gt;&quot;./confuseMacro.h&quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; LC_CTYPE=C  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;ramdomString&lt;/span&gt;&lt;/span&gt;()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    openssl rand -base64 64 | tr -cd &lt;span class=&quot;string&quot;&gt;&#39;a-zA-Z&#39;&lt;/span&gt; |head -c 16  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$HEAD_FILE&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch &lt;span class=&quot;variable&quot;&gt;$HEAD_FILE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;#ifndef Demo_codeObfuscation_h  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define Demo_codeObfuscation_h&#39;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;variable&quot;&gt;$HEAD_FILE&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;//confuse string at `date`&quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;variable&quot;&gt;$HEAD_FILE&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$STRING_SYMBOL_FILE&lt;/span&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; -ra line; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [[ ! -z &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt;&quot;&lt;/span&gt; ]]; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ramdom=`ramdomString`  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$ramdom&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;#define &lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$ramdom&lt;/span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;variable&quot;&gt;$HEAD_FILE&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;#endif&quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;variable&quot;&gt;$HEAD_FILE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;宏定义替换结果：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; Demo_codeObfuscation_h  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; Demo_codeObfuscation_h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//confuse string at 2017年 5月 9日 星期二 15时09分20秒 CST&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; JPEngine zLuEDxRvmBuomcFI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; JPExtension IoAZxAmFBjgEOaIg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; JPBoxing wzZsoLGKuQUTRFsi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; startEngine PRqvWWtwFlXUqdBe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; evaluateScriptWithPath cNHrlJKiZyWXkfKo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _evaluateScriptWithPath oDyiimPOHiIWBOEI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; addExtensions MbpkqoMunCfIBgxY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; defineStruct jIfCtJkMsIshJCvx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; formatPointerJSToOC IcHiIjXLjFucrQHR&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; formatRetainedCFTypeOCToJS lyCjsaHwzQaYUiBE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; formatPointerOCToJS DdwjOGMUveuHjYQq&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; formatJSToOC BBFoPIaVlHRWBNQx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; formatOCToJS PHwNpfqmydeeFhMY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; TTSparkRescue euibpyTZoKOvrKyO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; exvalueBase64Script fcXBLgUPqmsRqIWx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _JSOverideMethods FBOBELKtnClIUhEa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _TMPMemoryPool ysvnOHCwoCVvFwfY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _propKeys cnyhVgwVNuEVAvEp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _JSMethodSignatureCache inrkXDymTFAbwLRo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _JSMethodSignatureLock LmXaTYYBizrQBKzn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _JSMethodForwardCallLock YdmfSXxrtNuKsJkp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _protocolTypeEncodeDict NxHWlKlDFjjgpzYV&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _pointersToRelease pybucmDygKyxFMvj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; jp_methodSignatureForSelector cyzfrUQNsmWrwIgU&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; jp_fixMethodSignature vlSNUMpVTTXwTWJl&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; JPForwardInvocation gflqBWbUOmJHNfcL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; JPExecuteORIGForwardInvocation itGMsXKksYYFyCPL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _initJPOverideMethods hpoUXLPSkKsFbHRk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; overrideMethod KCgQjNlpCNXOixZS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; invokeVariableParameterMethod YITOuEIcAICefCkG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; convertJPSelectorString wwttXxSrZoFlmKML&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; getJSFunctionInObjectHierachy JjRtFUqUREPdZAgY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; unboxOCObjectToJS MeVMxsEAmgCokbXc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; makePatchRequestAfterLaunch icreqUfezHNyjLdw&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; setJSCrashHanlder hwsfKTIzZPvTEMmc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; getLaunchPatchVersionCode jqRICpprUZpVeKVy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; getActivePatchVersionCode zZIvunQsewkyABXu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TTSparkRescue&quot;&gt;&lt;a href=&quot;#TTSparkRescue&quot; class=&quot;headerlink&quot; title=&quot;TTSparkRescue&quot;&gt;&lt;/a&gt;TTSparkRescue&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;备注：2017年4月开始出
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>2016年重庆高考选择专业</title>
    <link href="http://xuzichao.com/2016/06/12/2016%E9%87%8D%E5%BA%86%E9%AB%98%E8%80%83%E6%AF%95%E4%B8%9A%E7%94%9F%E6%9C%AC%E7%A7%91%E4%B8%93%E4%B8%9A%E9%80%89%E6%8B%A9%E6%8E%A8%E8%8D%90/"/>
    <id>http://xuzichao.com/2016/06/12/2016重庆高考毕业生本科专业选择推荐/</id>
    <published>2016-06-12T11:09:59.000Z</published>
    <updated>2017-06-04T07:13:21.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;普通高校本科专业选择推荐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;此文针对2016届高考毕业生就读普通大学本科专业推荐，推荐凭借自己的社会认识和对众多所在对应专业的同学学习从业动向判定而得，等高考成绩出来了，结合本省排名、个人意向、专业招生人数、专业往年招生分数，即可快速定位。本文是我表弟16年重庆高考结束，成绩还没出来前特意针对他个人给预备着的，所以带有些许的个人色彩。&lt;/p&gt;
&lt;p&gt;徐子超 (&lt;a href=&quot;http://xuzichao.com&quot;&gt;http://xuzichao.com&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;2016.6.12&lt;/p&gt;
&lt;h2 id=&quot;可选专业&quot;&gt;&lt;a href=&quot;#可选专业&quot; class=&quot;headerlink&quot; title=&quot;可选专业&quot;&gt;&lt;/a&gt;可选专业&lt;/h2&gt;&lt;h3 id=&quot;01学科门类：哲学-（所有门类不考虑）&quot;&gt;&lt;a href=&quot;#01学科门类：哲学-（所有门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;01学科门类：哲学 （所有门类不考虑）&quot;&gt;&lt;/a&gt;01学科门类：哲学 &lt;font color=&quot;blue&quot;&gt;（所有门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;h3 id=&quot;02学科门类：经济学-（所有门类可选）&quot;&gt;&lt;a href=&quot;#02学科门类：经济学-（所有门类可选）&quot; class=&quot;headerlink&quot; title=&quot;02学科门类：经济学  （所有门类可选）&quot;&gt;&lt;/a&gt;02学科门类：经济学  &lt;font color=&quot;red&quot;&gt;（所有门类可选）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; 0201 经济学类 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 020101 经济学

* 020102 经济统计学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0202 财政学类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 020201K 财政学

* 020202 税收学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0203 金融学类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 020301K 金融学

* 020302 金融工程

* 020303 保险学

* 020304 投资学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0204 经济与贸易类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 020401 国际经济与贸易

* 020402 贸易经济
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;03学科门类：法学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#03学科门类：法学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;03学科门类：法学  （其他门类不考虑）&quot;&gt;&lt;/a&gt;03学科门类：法学  &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;030101K 法学 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;04学科门类：教育学-（所有门类不考虑）&quot;&gt;&lt;a href=&quot;#04学科门类：教育学-（所有门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;04学科门类：教育学  （所有门类不考虑）&quot;&gt;&lt;/a&gt;04学科门类：教育学  &lt;font color=&quot;blue&quot;&gt;（所有门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;h3 id=&quot;05学科门类：文学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#05学科门类：文学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;05学科门类：文学  （其他门类不考虑）&quot;&gt;&lt;/a&gt;05学科门类：文学  &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;0502 外国语言文学类 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;0503 新闻传播学类 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;050301 新闻学

050302 广播电视学

050303 广告学

050304 传播学

050305 编辑出版学
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;06学科门类：历史学-（所有门类不考虑）&quot;&gt;&lt;a href=&quot;#06学科门类：历史学-（所有门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;06学科门类：历史学  （所有门类不考虑）&quot;&gt;&lt;/a&gt;06学科门类：历史学  &lt;font color=&quot;blue&quot;&gt;（所有门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;h3 id=&quot;07学科门类：理学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#07学科门类：理学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;07学科门类：理学  （其他门类不考虑）&quot;&gt;&lt;/a&gt;07学科门类：理学  &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;0701 数学类  &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;070101 数学与应用数学

070102 信息与计算科学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0712 统计学类 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;071201 统计学

071202 应用统计学
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;08学科门类：工学-（全部门类可选，分程度）&quot;&gt;&lt;a href=&quot;#08学科门类：工学-（全部门类可选，分程度）&quot; class=&quot;headerlink&quot; title=&quot;08学科门类：工学 （全部门类可选，分程度）&quot;&gt;&lt;/a&gt;08学科门类：工学 &lt;font color=&quot;red&quot;&gt;（全部门类可选，分程度）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;0801 力学类  &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080101 理论与应用力学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0802 机械类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080201 机械工程

080202 机械设计制造及其自动化

080203 材料成型及控制工程

080204 机械电子工程

080205 工业设计

080206 过程装备与控制工程

080207 车辆工程

080208 汽车服务工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0803 仪器类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080301 测控技术与仪器
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0804 材料类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080401 材料科学与工程

080402 材料物理（注：可授工学或理学学士学位）

080403 材料化学（注：可授工学或理学学士学位）

080404 冶金工程

080405 金属材料工程

080406 无机非金属材料工程

080407 高分子材料与工程

080408 复合材料与工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0805 能源动力类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080501 能源与动力工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0806 电气类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080601 电气工程及其自动化
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0807 电子信息类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080701 电子信息工程（注：可授工学或理学学士学位）

080702 电子科学与技术（注：可授工学或理学学士学位）

080703 通信工程

080704 微电子科学与工程（注：可授工学或理学学士学位）

080705光电信息科学与工程（注：可授工学或理学学士学位）

080706 信息工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0808 自动化类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080801 自动化
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0809 计算机类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;080901 计算机科学与技术（注：可授工学或理学学士学位）

080902 软件工程

080903 网络工程

080904K 信息安全（注：可授工学或理学或管理学学士学位）

080905 物联网工程

080906 数字媒体技术
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0810 土木类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081001 土木工程

081002 建筑环境与能源应用工程

081003 给排水科学与工程

081004 建筑电气与智能化
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0811 水利类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081101 水利水电工程

081102 水文与水资源工程

081103 港口航道与海岸工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0812 测绘类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081201 测绘工程

081202 遥感科学与技术
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0813 化工与制药类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081301 化学工程与工艺

081302 制药工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0814 地质类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081401 地质工程

081402 勘查技术与工程

081403 资源勘查工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0815 矿业类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081501 采矿工程

081502 石油工程

081503 矿物加工工程

081504 油气储运工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0816 纺织类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081601 纺织工程

081602 服装设计与工程（注：可授工学或艺术学学士学位）
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0817 轻工类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081701 轻化工程

081702 包装工程

081703 印刷工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0818 交通运输类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081801 交通运输

081802 交通工程

081803K 航海技术

081804K 轮机工程

081805K 飞行技术
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0819 海洋工程类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;081901 船舶与海洋工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0820 航空航天类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082001 航空航天工程

082002 飞行器设计与工程

082003 飞行器制造工程

082004 飞行器动力工程

082005 飞行器环境与生命保障工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0821 兵器类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082101 武器系统与工程

082102 武器发射工程

082103 探测制导与控制技术

082104 弹药工程与爆炸技术

082105 特种能源技术与工程

082106 装甲车辆工程

082107 信息对抗技术
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0822 核工程类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082201 核工程与核技术

082202 辐射防护与核安全

082203 工程物理

082204 核化工与核燃料工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0823 农业工程类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082301 农业工程

082302 农业机械化及其自动化

082303 农业电气化

082304 农业建筑环境与能源工程

082305 农业水利工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0824 林业工程类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082401 森林工程

082402 木材科学与工程

082403 林产化工
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0825 环境科学与工程类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082501 环境科学与工程

082502 环境工程

082503 环境科学（注：可授工学或理学学士学位）

082504 环境生态工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0826 生物医学工程类&lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082601 生物医学工程（注：可授工学或理学学士学位）
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0827 食品科学与工程类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082701 食品科学与工程（注：可授工学或农学学士学位）

082702 食品质量与安全

082703 粮食工程

082704 乳品工程

082705 酿酒工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0828 建筑类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082801 建筑学

082802 城乡规划

082803 风景园林（注：可授工学或艺术学学士学位）
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0829 安全科学与工程类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;082901 安全工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0830 生物工程类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;083001 生物工程
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;0831 公安技术类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;083101K 刑事科学技术

083102K 消防工程
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;09学科门类：农学-（所有门类不考虑）&quot;&gt;&lt;a href=&quot;#09学科门类：农学-（所有门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;09学科门类：农学 （所有门类不考虑）&quot;&gt;&lt;/a&gt;09学科门类：农学 &lt;font color=&quot;blue&quot;&gt;（所有门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;h3 id=&quot;10学科门类：医学-（所有门类可考虑，分程度）&quot;&gt;&lt;a href=&quot;#10学科门类：医学-（所有门类可考虑，分程度）&quot; class=&quot;headerlink&quot; title=&quot;10学科门类：医学 （所有门类可考虑，分程度）&quot;&gt;&lt;/a&gt;10学科门类：医学 &lt;font color=&quot;red&quot;&gt;（所有门类可考虑，分程度）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1001 基础医学类  &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100101K 基础医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1002 临床医学类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100201K 临床医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1003 口腔医学类 &lt;font color=&quot;green&quot;&gt;（优先）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100301K 口腔医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1004 公共卫生与预防医学类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100401K 预防医学

100402 食品卫生与营养学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1005 其次医学类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100501K 其次医学

100502K 针灸推拿学

100503K 藏医学

100504K 蒙医学

100505K 维医学

100506K 壮医学

100507K 哈医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1006 其次西医结合类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100601K 其次西医临床医学
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1007 药学类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt; 100701 药学

100702 药物制剂
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1008 其次药学类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;100801 其次药学

100802 其次药资源与开发
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1009 法医学类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;1010 医学技术类 &lt;font color=&quot;green&quot;&gt;（其次）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;101001 医学检验技术

101002 医学实验技术

101003 医学影像技术

101004 眼视光学

101005 康复治疗学

101006 口腔医学技术

101007 卫生检验与检疫
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1011 护理学类 &lt;font color=&quot;green&quot;&gt;（最后）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;101101 护理学
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;12学科门类：管理学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#12学科门类：管理学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;12学科门类：管理学 （其他门类不考虑）&quot;&gt;&lt;/a&gt;12学科门类：管理学 &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1201 管理科学与工程类  &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;120101 管理科学

120102 信息管理与信息系统

120103 工程管理

120104 房地产开发与管理

120105 工程造价
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;1202 工商管理类  &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;120201K 工商管理

120202 市场营销

120203K 会计学

120204 财务管理

120205 国际商务

120206 人力资源管理

120207 审计学

120208 资产评估
120209 物业管理

120210 文化产业管理
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;13学科门类：艺术学-（其他门类不考虑）&quot;&gt;&lt;a href=&quot;#13学科门类：艺术学-（其他门类不考虑）&quot; class=&quot;headerlink&quot; title=&quot;13学科门类：艺术学   （其他门类不考虑）&quot;&gt;&lt;/a&gt;13学科门类：艺术学   &lt;font color=&quot;blue&quot;&gt;（其他门类不考虑）&lt;/font&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1305 设计学类 &lt;font color=&quot;red&quot;&gt;（可选）&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;130501 艺术设计学

130502 视觉传达设计

130503 环境设计

130504 产品设计

130505 服装与服饰设计

130506 公共艺术

130507 工艺美术

130508 数字媒体艺术
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;普通高校本科专业选择推荐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;此文针对2016届高考毕业生就读普通大学本科专
    
    </summary>
    
    
      <category term="随笔小结" scheme="http://xuzichao.com/tags/%E9%9A%8F%E7%AC%94%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>参加Iweb峰会记录</title>
    <link href="http://xuzichao.com/2016/05/12/2016iweb%20%E5%B3%B0%E4%BC%9A/"/>
    <id>http://xuzichao.com/2016/05/12/2016iweb 峰会/</id>
    <published>2016-05-12T11:09:59.000Z</published>
    <updated>2017-06-04T05:11:32.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;16年的时候，赶上周末去参加了一趟北京的iweb峰会，会上来自各个公司的人分享和宣传自己的产品和技术，我作为一名普通开发者的角度去听大会，并了解和记录当前的一些技术发展。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、主题峰会-9-00-–-12-00&quot;&gt;&lt;a href=&quot;#一、主题峰会-9-00-–-12-00&quot; class=&quot;headerlink&quot; title=&quot;一、主题峰会 9:00 – 12:00&quot;&gt;&lt;/a&gt;一、主题峰会 9:00 – 12:00&lt;/h2&gt;&lt;h4 id=&quot;1、主持人开场-–-田爱娜-HTML5梦工场-创始人&quot;&gt;&lt;a href=&quot;#1、主持人开场-–-田爱娜-HTML5梦工场-创始人&quot; class=&quot;headerlink&quot; title=&quot;1、主持人开场    – 田爱娜 HTML5梦工场  创始人&quot;&gt;&lt;/a&gt;1、主持人开场    – 田爱娜 HTML5梦工场  创始人&lt;/h4&gt;&lt;p&gt;HTML5梦工场是中国最有影响力的技术社区团队，由国内最早一批HTML5探索者和狂热拥护者发起，为广大开发者搭建一个开放、自由的互动交流平台，旨在推动HTML5在中国的应用与普及。“梦工场”也被誉为最接地气的草根公益组织。&lt;/p&gt;
&lt;h4 id=&quot;2、HTML5发行的力量-–-凌海-蝴蝶互动-CEO&quot;&gt;&lt;a href=&quot;#2、HTML5发行的力量-–-凌海-蝴蝶互动-CEO&quot; class=&quot;headerlink&quot; title=&quot;2、HTML5发行的力量    – 凌海  蝴蝶互动  CEO&quot;&gt;&lt;/a&gt;2、HTML5发行的力量    – 凌海  蝴蝶互动  CEO&lt;/h4&gt;&lt;p&gt;公司的创始人凌海、王峰都来自于中国互联网上市公司核心高管，有业界极为丰富的互联网产品经验和创新精神。凌海曾任盛大集团高级副总裁，盛大游戏总 裁，韩国上市公司ACTOZ董事长。王峰曾任盛大游戏技术副总裁。&lt;br&gt;《传世H5》工作室组建于2015年初，由策划团队、美术团队、技术研发团队、运营团队、测试团队等组成。&lt;br&gt;除了《传世H5》蝴蝶互动又相继推出了《鬼吹灯》、《天天赚钱》、《蛮荒创世》等优秀的HTML5游戏，收到用户和业界的不断好评，之后蝴蝶互动即将推出《武 神》、《鹿鼎记》等。&lt;/p&gt;
&lt;h4 id=&quot;3、天下武功，唯快不破-–-陈书艺-白鹭时代-CEO&quot;&gt;&lt;a href=&quot;#3、天下武功，唯快不破-–-陈书艺-白鹭时代-CEO&quot; class=&quot;headerlink&quot; title=&quot;3、天下武功，唯快不破 – 陈书艺 白鹭时代  CEO&quot;&gt;&lt;/a&gt;3、天下武功，唯快不破 – 陈书艺 白鹭时代  CEO&lt;/h4&gt;&lt;p&gt;白鹭移动游戏解决方案包含白鹭引擎、工具和白鹭开放平台，提供从游戏开发、上线到商业化运营的一站式免费服务。白鹭引擎（Egret Engine）、HTML5加速器(Egret Runtime)、骨骼动画工具(Dragon Bones)、可视化编辑器(Egret Wing)等共计14款核心产品，可以帮助开发者高效地开发出HTML5游戏。白鹭开放平台联动开发者、发行商、渠道商、第三方服务商，让HTML5游戏实现了从开发、上线到商业化运营生态连线，并且让所有技术服务和商业化服务，得以落地。案例：围住神经猫、访问量三天过亿&lt;/p&gt;
&lt;h4 id=&quot;4、-社交生态下的HTML5游戏新契-–-王哲-触控科技副总裁&quot;&gt;&lt;a href=&quot;#4、-社交生态下的HTML5游戏新契-–-王哲-触控科技副总裁&quot; class=&quot;headerlink&quot; title=&quot;4、    社交生态下的HTML5游戏新契 – 王哲 触控科技副总裁&quot;&gt;&lt;/a&gt;4、    社交生态下的HTML5游戏新契 – 王哲 触控科技副总裁&lt;/h4&gt;&lt;p&gt;公司起步于2008年初创建的CocoaChina社区，专注于苹果产品和iOS系统开发。2010年11月12日触控科技正式组建团队，并在之后2年间获得北极光、迪士尼思伟创投、红杉创投以及纪源资本（GGV）的风险投资，融资总规模3200万美金。2011年凭借一款《捕鱼达人》游戏一战成名。&lt;/p&gt;
&lt;h4 id=&quot;5、-HTML5和Docker容器如何重构和颠覆应用产业-–-李明-很快-创始人兼CEO&quot;&gt;&lt;a href=&quot;#5、-HTML5和Docker容器如何重构和颠覆应用产业-–-李明-很快-创始人兼CEO&quot; class=&quot;headerlink&quot; title=&quot;5、 HTML5和Docker容器如何重构和颠覆应用产业 – 李明 很快  创始人兼CEO&quot;&gt;&lt;/a&gt;5、 HTML5和Docker容器如何重构和颠覆应用产业 – 李明 很快  创始人兼CEO&lt;/h4&gt;&lt;h4 id=&quot;6、WeX5移动开发云-马科-CEO&quot;&gt;&lt;a href=&quot;#6、WeX5移动开发云-马科-CEO&quot; class=&quot;headerlink&quot; title=&quot;6、WeX5移动开发云 马科 CEO&quot;&gt;&lt;/a&gt;6、WeX5移动开发云 马科 CEO&lt;/h4&gt;&lt;p&gt;WeX5开发H5 app，遵循Apache开源协议，完全开源免费，上百个组件框架，全部开放，可视化的组件框架，开发者可自定义组件，集成第三方组件，采用MVC设计模式，数据和视图分离，页面描述和代码逻辑分离，支持浏览器调试、真机调试、原生调试，等多种调试模式，开发者可掌握每一行代码。WeX5一直坚持采用H5+CSS3+JS标准技术，一次开发，多端任意部署.&lt;/p&gt;
&lt;h4 id=&quot;7、-Web-前端的实时化-–-江小丹-英特尔-Web技术研发总监&quot;&gt;&lt;a href=&quot;#7、-Web-前端的实时化-–-江小丹-英特尔-Web技术研发总监&quot; class=&quot;headerlink&quot; title=&quot;7、 Web 前端的实时化 – 江小丹 英特尔  Web技术研发总监&quot;&gt;&lt;/a&gt;7、 Web 前端的实时化 – 江小丹 英特尔  Web技术研发总监&lt;/h4&gt;&lt;h4 id=&quot;8、移动互联网下半场，不用好HTML5将无法生存-–-肖光宇-野狗实时后端云-联合创始人&quot;&gt;&lt;a href=&quot;#8、移动互联网下半场，不用好HTML5将无法生存-–-肖光宇-野狗实时后端云-联合创始人&quot; class=&quot;headerlink&quot; title=&quot;8、移动互联网下半场，不用好HTML5将无法生存 – 肖光宇 野狗实时后端云  联合创始人&quot;&gt;&lt;/a&gt;8、移动互联网下半场，不用好HTML5将无法生存 – 肖光宇 野狗实时后端云  联合创始人&lt;/h4&gt;&lt;p&gt;实时通信—包括消息订阅，推送，双向通信等功能。网络延迟小，服务响应速度快，API简单易用。&lt;br&gt;数据存储—提供了一个Key-Value的云端数据存储，直接通过API就可以对数据进行存取操作。操作简单，按需扩展。&lt;/p&gt;
&lt;h4 id=&quot;9、-H5游戏进入精品新时代-—-王安-Dcloud-CEO&quot;&gt;&lt;a href=&quot;#9、-H5游戏进入精品新时代-—-王安-Dcloud-CEO&quot; class=&quot;headerlink&quot; title=&quot;9、 H5游戏进入精品新时代 — 王安 Dcloud CEO&quot;&gt;&lt;/a&gt;9、 H5游戏进入精品新时代 — 王安 Dcloud CEO&lt;/h4&gt;&lt;p&gt;DCloud面向HTML5行业分别推出了开发工具HBuilder、手机强化引擎5+ Runtime、跨平台前端框架mui、应用发行产品流应用，通过系列产品对HTML5的强化支持，使得HTML5能达到原生的功能和体验，同时在发行上更优于原生应用。&lt;/p&gt;
&lt;p&gt;类似 : APICloud&lt;/p&gt;
&lt;h4 id=&quot;10-、谢成鸿-LayaBox-CEO&quot;&gt;&lt;a href=&quot;#10-、谢成鸿-LayaBox-CEO&quot; class=&quot;headerlink&quot; title=&quot;10 、谢成鸿 LayaBox  CEO&quot;&gt;&lt;/a&gt;10 、谢成鸿 LayaBox  CEO&lt;/h4&gt;&lt;p&gt;Layabox是HTML5引擎之一，引擎以HTML5技术为核心，定位于全平台的高性能引擎，让游戏开发者一次开发，可同时发布APP、HTML5、VR、Flash版本。开发语言支持Flash AS3、JavaScript、TypeScript三种，让开发者人才选择范围更广泛。引擎核心库仅100K左右，除了大型游戏和小型游戏、还可以用于HTML5应用、APP、广告、营销、教育、3D、VR等众多领域。另外，LayaPlayer运行器移动设备安装量覆盖超5亿，帮助Layabox引擎的开发者进行产品发行。&lt;br&gt;  Layabox是Laya中国实验室历经4年倾力打造的全球顶级HTML5技术框架，核心产品包括：Flash开发H5的框架（LayaFlash）、多语言H5开发引擎（LayaAir）、H5运行器（LayaPlayer）、嵌入式H5应用商店（LayaStore）。&lt;/p&gt;
&lt;h2 id=&quot;二、应用工具专场1-13：30-–-17：00&quot;&gt;&lt;a href=&quot;#二、应用工具专场1-13：30-–-17：00&quot; class=&quot;headerlink&quot; title=&quot;二、应用工具专场1 13：30 – 17：00&quot;&gt;&lt;/a&gt;二、应用工具专场1 13：30 – 17：00&lt;/h2&gt;&lt;h4 id=&quot;1、HTML5-App开发云实践-基于完全开源的WeX5开发框架&quot;&gt;&lt;a href=&quot;#1、HTML5-App开发云实践-基于完全开源的WeX5开发框架&quot; class=&quot;headerlink&quot; title=&quot;1、HTML5 App开发云实践-基于完全开源的WeX5开发框架&quot;&gt;&lt;/a&gt;1、HTML5 App开发云实践-基于完全开源的WeX5开发框架&lt;/h4&gt;&lt;p&gt;王洁 WeX5  首席技术运营&lt;/p&gt;
&lt;h4 id=&quot;2、-Web技术推进多样化人机交互方式&quot;&gt;&lt;a href=&quot;#2、-Web技术推进多样化人机交互方式&quot; class=&quot;headerlink&quot; title=&quot;2、 Web技术推进多样化人机交互方式&quot;&gt;&lt;/a&gt;2、 Web技术推进多样化人机交互方式&lt;/h4&gt;&lt;p&gt;吴栋霞 英特尔  软件工程师&lt;/p&gt;
&lt;h4 id=&quot;3、-Yo-去哪儿移动UI框架&quot;&gt;&lt;a href=&quot;#3、-Yo-去哪儿移动UI框架&quot; class=&quot;headerlink&quot; title=&quot;3、 Yo-去哪儿移动UI框架&quot;&gt;&lt;/a&gt;3、 Yo-去哪儿移动UI框架&lt;/h4&gt;&lt;p&gt;杜瑶 去哪儿网  前端开发总监&lt;/p&gt;
&lt;h4 id=&quot;4、-手机QQ-React-Web极致优化&quot;&gt;&lt;a href=&quot;#4、-手机QQ-React-Web极致优化&quot; class=&quot;headerlink&quot; title=&quot;4、 手机QQ React Web极致优化&quot;&gt;&lt;/a&gt;4、 手机QQ React Web极致优化&lt;/h4&gt;&lt;p&gt;李成熙 腾讯AlloyTeam  前端工程师&lt;/p&gt;
&lt;h4 id=&quot;5、-手机淘宝营销互动页面最佳实践&quot;&gt;&lt;a href=&quot;#5、-手机淘宝营销互动页面最佳实践&quot; class=&quot;headerlink&quot; title=&quot;5、 手机淘宝营销互动页面最佳实践&quot;&gt;&lt;/a&gt;5、 手机淘宝营销互动页面最佳实践&lt;/h4&gt;&lt;p&gt;黄华健  阿里巴巴  前端工程师&lt;/p&gt;
&lt;h4 id=&quot;6、大型SPA的复杂工程如何化简&quot;&gt;&lt;a href=&quot;#6、大型SPA的复杂工程如何化简&quot; class=&quot;headerlink&quot; title=&quot;6、大型SPA的复杂工程如何化简&quot;&gt;&lt;/a&gt;6、大型SPA的复杂工程如何化简&lt;/h4&gt;&lt;p&gt;陈恺睿 小米  高级前端工程师&lt;/p&gt;
&lt;h4 id=&quot;7、-UC前端业务套件体系&quot;&gt;&lt;a href=&quot;#7、-UC前端业务套件体系&quot; class=&quot;headerlink&quot; title=&quot;7、 UC前端业务套件体系&quot;&gt;&lt;/a&gt;7、 UC前端业务套件体系&lt;/h4&gt;&lt;p&gt;三桥 阿里巴巴UC移动事业群  高级前端工程师&lt;/p&gt;
&lt;h2 id=&quot;三、应用工具专场2-13：30-–-17：00&quot;&gt;&lt;a href=&quot;#三、应用工具专场2-13：30-–-17：00&quot; class=&quot;headerlink&quot; title=&quot;三、应用工具专场2 13：30 – 17：00&quot;&gt;&lt;/a&gt;三、应用工具专场2 13：30 – 17：00&lt;/h2&gt;&lt;h4 id=&quot;1、Web-Components-—-Web-前端开发的未来趋势&quot;&gt;&lt;a href=&quot;#1、Web-Components-—-Web-前端开发的未来趋势&quot; class=&quot;headerlink&quot; title=&quot;1、Web Components — Web 前端开发的未来趋势&quot;&gt;&lt;/a&gt;1、Web Components — Web 前端开发的未来趋势&lt;/h4&gt;&lt;p&gt;1、陈本峰 云适配  创始人兼CEO&lt;/p&gt;
&lt;p&gt;云适配由前微软美国总部专家、美通云动（北京）科技公司CEO陈本峰在美国西雅图研发，只需在原网站中插入一行代码，即能创建移动化网站，并实现网址不变、内容实时更新，它颠覆了传统手工移动网站建设模式，可快速打开移动营销六大入口。&lt;/p&gt;
&lt;p&gt;2、 web  Components : &lt;/p&gt;
&lt;p&gt;组件化给前端开发带来了极大的效率提升，组件化的UI框架也因此层出不穷，从EXTJs、YUI到 jQuery UI ，再到 Bootstrap、React、Ratchet、Ionic等等等等等等，几乎每年都有很多新的UI框架冒出来，它们或者借鉴或者颠覆其他已存在的框架。简单对比一下就会发现这些框架的很大一部分模块在功能上是重合的，但也仅仅在功能层面重合，代码层面确完全不兼容。&lt;/p&gt;
&lt;p&gt;Web Components 的出现给组件标准化带来了很好的契机：&lt;/p&gt;
&lt;p&gt;WEB组件目前仍然依靠各种类似”Hack”的方式来模拟，模拟方式也各有不同，很难统一和标准化，而 Web Components 则直接提供了标准化的组件定义方式，这是组件标准化的基石，使得未来的组件能够统一创建、方法调用、事件监听、属性访问等。&lt;br&gt;基于标准化的组件定义方式，我们便可以像W3C等标准组织一样来定义组件标准，无需再依赖、等待“内置”组件，这也使得我们获得了“渔”的能力&lt;/p&gt;
&lt;h4 id=&quot;2、语音智能与H5的结合&quot;&gt;&lt;a href=&quot;#2、语音智能与H5的结合&quot; class=&quot;headerlink&quot; title=&quot;2、语音智能与H5的结合&quot;&gt;&lt;/a&gt;2、语音智能与H5的结合&lt;/h4&gt;&lt;p&gt;陈家军 科大讯飞  云平台事业部研发主管&lt;/p&gt;
&lt;h4 id=&quot;3、-浅析HTML5中的无障碍标签及用处&quot;&gt;&lt;a href=&quot;#3、-浅析HTML5中的无障碍标签及用处&quot; class=&quot;headerlink&quot; title=&quot;3、 浅析HTML5中的无障碍标签及用处&quot;&gt;&lt;/a&gt;3、 浅析HTML5中的无障碍标签及用处&lt;/h4&gt;&lt;p&gt;张昆 中国信息无障碍产品联盟  首席专家&lt;/p&gt;
&lt;h4 id=&quot;4、HTML5多屏互动平台实践&quot;&gt;&lt;a href=&quot;#4、HTML5多屏互动平台实践&quot; class=&quot;headerlink&quot; title=&quot;4、HTML5多屏互动平台实践&quot;&gt;&lt;/a&gt;4、HTML5多屏互动平台实践&lt;/h4&gt;&lt;p&gt;苏震巍 苏州盛派网络  CEO&lt;/p&gt;
&lt;h4 id=&quot;5、iWeb-议题：Weex-开发者工具探究&quot;&gt;&lt;a href=&quot;#5、iWeb-议题：Weex-开发者工具探究&quot; class=&quot;headerlink&quot; title=&quot;5、iWeb 议题：Weex 开发者工具探究&quot;&gt;&lt;/a&gt;5、iWeb 议题：Weex 开发者工具探究&lt;/h4&gt;&lt;p&gt;勾三股四（阿里巴巴 前端工程师）、梧叶（阿里巴巴 高级技术专家）&lt;/p&gt;
&lt;p&gt;手淘和天猫曾经尝试过React Native，然后放弃了。但是把它的思想吸收过来，结合Web Component和Vue.js，然后就成了Weex.&lt;/p&gt;
&lt;h4 id=&quot;6、小米应用商店Hybrid性能优化实践&quot;&gt;&lt;a href=&quot;#6、小米应用商店Hybrid性能优化实践&quot; class=&quot;headerlink&quot; title=&quot;6、小米应用商店Hybrid性能优化实践&quot;&gt;&lt;/a&gt;6、小米应用商店Hybrid性能优化实践&lt;/h4&gt;&lt;p&gt;杨伟贤 小米  高级前端工程师&lt;/p&gt;
&lt;h4 id=&quot;7、Vue-js从入门到上线&quot;&gt;&lt;a href=&quot;#7、Vue-js从入门到上线&quot; class=&quot;headerlink&quot; title=&quot;7、Vue.js从入门到上线&quot;&gt;&lt;/a&gt;7、Vue.js从入门到上线&lt;/h4&gt;&lt;p&gt;陈陆扬 精雕细课  前端负责人&lt;/p&gt;
&lt;h2 id=&quot;四、游戏专场1-13：30-–-17：00&quot;&gt;&lt;a href=&quot;#四、游戏专场1-13：30-–-17：00&quot; class=&quot;headerlink&quot; title=&quot;四、游戏专场1 13：30 – 17：00&quot;&gt;&lt;/a&gt;四、游戏专场1 13：30 – 17：00&lt;/h2&gt;&lt;h4 id=&quot;1、文学连接游戏-阅文集团“泛娱乐2-0”迎接H5领域新时代&quot;&gt;&lt;a href=&quot;#1、文学连接游戏-阅文集团“泛娱乐2-0”迎接H5领域新时代&quot; class=&quot;headerlink&quot; title=&quot;1、文学连接游戏 阅文集团“泛娱乐2.0”迎接H5领域新时代&quot;&gt;&lt;/a&gt;1、文学连接游戏 阅文集团“泛娱乐2.0”迎接H5领域新时代&lt;/h4&gt;&lt;p&gt;朱靖 阅文集团  副总裁&lt;/p&gt;
&lt;p&gt;腾讯COO任宇昕与副总裁程武宣布正式成立阅文集团，统一管理和运营原本属于盛大文学和腾讯文学旗下的起点中文网、创世中文网、小说阅读网、潇湘书院、红袖添香、云起书院、榕树下、QQ阅读、中智博文、华文天下等网文品牌。&lt;/p&gt;
&lt;h4 id=&quot;2、Cocos-Creator：全面提升-H5-游戏的开发和运行速度&quot;&gt;&lt;a href=&quot;#2、Cocos-Creator：全面提升-H5-游戏的开发和运行速度&quot; class=&quot;headerlink&quot; title=&quot;2、Cocos Creator：全面提升 H5 游戏的开发和运行速度&quot;&gt;&lt;/a&gt;2、Cocos Creator：全面提升 H5 游戏的开发和运行速度&lt;/h4&gt;&lt;p&gt;王楠 触控科技  产品总监&lt;/p&gt;
&lt;p&gt;Cocos Creator 是以内容创作为核心的游戏开发工具，在 Cocos2d-x 基础上实现了彻底脚本化、组件化和数据驱动等特点&lt;/p&gt;
&lt;h4 id=&quot;3、快创互娱，人人都是HTML5游戏创想家&quot;&gt;&lt;a href=&quot;#3、快创互娱，人人都是HTML5游戏创想家&quot; class=&quot;headerlink&quot; title=&quot;3、快创互娱，人人都是HTML5游戏创想家&quot;&gt;&lt;/a&gt;3、快创互娱，人人都是HTML5游戏创想家&lt;/h4&gt;&lt;p&gt;段会锋 快创互娱  合伙人兼技术副总&lt;/p&gt;
&lt;p&gt;快创互娱是由大连文森软件特科技有限公司设计开发的一款HTML5在线开发平台。快创互娱是一款可视化、零代码、拖拽式编程的在线开发平台，基于HTML5及MIT开源协议，具有跨平台的强大性能。使用者可通过鼠标拖拽的简单方法，创造属于自己的故事、动画、游戏、课件，同时一键分享，轻松将作品上传至网络。&lt;/p&gt;
&lt;h4 id=&quot;4、Yahoo-Y5平台飛躍出海、強勢出航！&quot;&gt;&lt;a href=&quot;#4、Yahoo-Y5平台飛躍出海、強勢出航！&quot; class=&quot;headerlink&quot; title=&quot;4、Yahoo Y5平台飛躍出海、強勢出航！&quot;&gt;&lt;/a&gt;4、Yahoo Y5平台飛躍出海、強勢出航！&lt;/h4&gt;&lt;p&gt;赖俊光 Yahoo台湾与香港游戏频道   负责人&lt;/p&gt;
&lt;h4 id=&quot;5、发行和渠道为什么推那个产品&quot;&gt;&lt;a href=&quot;#5、发行和渠道为什么推那个产品&quot; class=&quot;headerlink&quot; title=&quot;5、发行和渠道为什么推那个产品&quot;&gt;&lt;/a&gt;5、发行和渠道为什么推那个产品&lt;/h4&gt;&lt;p&gt;李力维 独角兽游戏  CEO&lt;/p&gt;
&lt;h4 id=&quot;6、腾讯浏览服务，鼎力服务H5游戏生态&quot;&gt;&lt;a href=&quot;#6、腾讯浏览服务，鼎力服务H5游戏生态&quot; class=&quot;headerlink&quot; title=&quot;6、腾讯浏览服务，鼎力服务H5游戏生态&quot;&gt;&lt;/a&gt;6、腾讯浏览服务，鼎力服务H5游戏生态&lt;/h4&gt;&lt;p&gt;魏晓海 腾讯浏览器  内核开发总监技术专家&lt;/p&gt;
&lt;h4 id=&quot;7、H5游戏2-0时代到来&quot;&gt;&lt;a href=&quot;#7、H5游戏2-0时代到来&quot; class=&quot;headerlink&quot; title=&quot;7、H5游戏2.0时代到来&quot;&gt;&lt;/a&gt;7、H5游戏2.0时代到来&lt;/h4&gt;&lt;p&gt;姬海江 交叉点  CEO   一个外包公司&lt;/p&gt;
&lt;h2 id=&quot;五、游戏专场2-13：30-–-17：00&quot;&gt;&lt;a href=&quot;#五、游戏专场2-13：30-–-17：00&quot; class=&quot;headerlink&quot; title=&quot;五、游戏专场2 13：30 – 17：00&quot;&gt;&lt;/a&gt;五、游戏专场2 13：30 – 17：00&lt;/h2&gt;&lt;h4 id=&quot;1、约三端，战未来&quot;&gt;&lt;a href=&quot;#1、约三端，战未来&quot; class=&quot;headerlink&quot; title=&quot;1、约三端，战未来&quot;&gt;&lt;/a&gt;1、约三端，战未来&lt;/h4&gt;&lt;p&gt;汪阔 Layabox  技术副总裁&lt;/p&gt;
&lt;h4 id=&quot;2、《小小战争》的设计经验分享&quot;&gt;&lt;a href=&quot;#2、《小小战争》的设计经验分享&quot; class=&quot;headerlink&quot; title=&quot;2、《小小战争》的设计经验分享&quot;&gt;&lt;/a&gt;2、《小小战争》的设计经验分享&lt;/h4&gt;&lt;p&gt;李瑞峰 圣堂科技  CEO     H5策略游戏&lt;/p&gt;
&lt;h4 id=&quot;3、H5游戏的未来发展&quot;&gt;&lt;a href=&quot;#3、H5游戏的未来发展&quot; class=&quot;headerlink&quot; title=&quot;3、H5游戏的未来发展&quot;&gt;&lt;/a&gt;3、H5游戏的未来发展&lt;/h4&gt;&lt;p&gt;赵鹏 横石科技  副总裁 在线网页游戏《弑沙》&lt;/p&gt;
&lt;h4 id=&quot;4、Lie-to-Me—聊聊HTML5多人实时在线游戏的优化&quot;&gt;&lt;a href=&quot;#4、Lie-to-Me—聊聊HTML5多人实时在线游戏的优化&quot; class=&quot;headerlink&quot; title=&quot;4、Lie to Me—聊聊HTML5多人实时在线游戏的优化&quot;&gt;&lt;/a&gt;4、Lie to Me—聊聊HTML5多人实时在线游戏的优化&lt;/h4&gt;&lt;p&gt;大城小胖  自由程序员 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://weibo.com/finscn?is_hot=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://weibo.com/finscn?is_hot=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/finscn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/finscn&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;5、强化渠道产品联动，升级用户游戏体验&quot;&gt;&lt;a href=&quot;#5、强化渠道产品联动，升级用户游戏体验&quot; class=&quot;headerlink&quot; title=&quot;5、强化渠道产品联动，升级用户游戏体验&quot;&gt;&lt;/a&gt;5、强化渠道产品联动，升级用户游戏体验&lt;/h4&gt;&lt;p&gt;林玮 北京游琥科技  副总经理&lt;/p&gt;
&lt;h4 id=&quot;6、从市场角度分析H5游戏该如何立项&quot;&gt;&lt;a href=&quot;#6、从市场角度分析H5游戏该如何立项&quot; class=&quot;headerlink&quot; title=&quot;6、从市场角度分析H5游戏该如何立项&quot;&gt;&lt;/a&gt;6、从市场角度分析H5游戏该如何立项&lt;/h4&gt;&lt;p&gt;谭德文 上海越山科技  CEO&lt;/p&gt;
&lt;h4 id=&quot;7、H5游戏的困境和破局&quot;&gt;&lt;a href=&quot;#7、H5游戏的困境和破局&quot; class=&quot;headerlink&quot; title=&quot;7、H5游戏的困境和破局&quot;&gt;&lt;/a&gt;7、H5游戏的困境和破局&lt;/h4&gt;&lt;p&gt;黄加阳 9G游戏  CEO&lt;/p&gt;
&lt;h2 id=&quot;六、数字营销专场-13：30-–-17：00&quot;&gt;&lt;a href=&quot;#六、数字营销专场-13：30-–-17：00&quot; class=&quot;headerlink&quot; title=&quot;六、数字营销专场 13：30 – 17：00&quot;&gt;&lt;/a&gt;六、数字营销专场 13：30 – 17：00&lt;/h2&gt;&lt;h4 id=&quot;1、后营销时代：借H5实现“移动互联网&quot;&gt;&lt;a href=&quot;#1、后营销时代：借H5实现“移动互联网&quot; class=&quot;headerlink&quot; title=&quot;1、后营销时代：借H5实现“移动互联网+&quot;&gt;&lt;/a&gt;1、后营销时代：借H5实现“移动互联网+&lt;/h4&gt;&lt;p&gt;张翔 白鹭时代、青雀移动  联合创始人、总经理&lt;/p&gt;
&lt;h4 id=&quot;2、-共享创赢移动网页大平台&quot;&gt;&lt;a href=&quot;#2、-共享创赢移动网页大平台&quot; class=&quot;headerlink&quot; title=&quot;2、    共享创赢移动网页大平台&quot;&gt;&lt;/a&gt;2、    共享创赢移动网页大平台&lt;/h4&gt;&lt;p&gt;马岳 Google  商业合作部行业总监&lt;/p&gt;
&lt;h4 id=&quot;3、-裂变·营销闭环·H5生态&quot;&gt;&lt;a href=&quot;#3、-裂变·营销闭环·H5生态&quot; class=&quot;headerlink&quot; title=&quot;3、    裂变·营销闭环·H5生态&quot;&gt;&lt;/a&gt;3、    裂变·营销闭环·H5生态&lt;/h4&gt;&lt;p&gt;刘旭 易企秀  联合创始人兼副总裁&lt;/p&gt;
&lt;p&gt;易企秀是一款针对移动互联网营销的手机幻灯片、H5场景应用制作工具，将原来只能在PC端制作和展示的各类复杂营销方案转移到更为便携和展示的手机上，用户随时随地根据自己的需要在PC端、手机端进行制作和展示，随时随地营销。&lt;/p&gt;
&lt;h4 id=&quot;4、-喵葩：天猫电商互动技术新思路&quot;&gt;&lt;a href=&quot;#4、-喵葩：天猫电商互动技术新思路&quot; class=&quot;headerlink&quot; title=&quot;4、    喵葩：天猫电商互动技术新思路&quot;&gt;&lt;/a&gt;4、    喵葩：天猫电商互动技术新思路&lt;/h4&gt;&lt;p&gt;续彬 天猫  高级技术专家&lt;/p&gt;
&lt;h4 id=&quot;5、-网络营销未来的五大发展趋势&quot;&gt;&lt;a href=&quot;#5、-网络营销未来的五大发展趋势&quot; class=&quot;headerlink&quot; title=&quot;5、    网络营销未来的五大发展趋势&quot;&gt;&lt;/a&gt;5、    网络营销未来的五大发展趋势&lt;/h4&gt;&lt;p&gt;葛甲 北京蓝时代  互联网分析师，自媒体人&lt;/p&gt;
&lt;h4 id=&quot;6、-H5数字营销的技术痛点&quot;&gt;&lt;a href=&quot;#6、-H5数字营销的技术痛点&quot; class=&quot;headerlink&quot; title=&quot;6、    H5数字营销的技术痛点&quot;&gt;&lt;/a&gt;6、    H5数字营销的技术痛点&lt;/h4&gt;&lt;p&gt;余悠 跳跳糖创意  CEO&lt;/p&gt;
&lt;h4 id=&quot;7、-纽约广告节最佳数字营销作品赏析&quot;&gt;&lt;a href=&quot;#7、-纽约广告节最佳数字营销作品赏析&quot; class=&quot;headerlink&quot; title=&quot;7、    纽约广告节最佳数字营销作品赏析&quot;&gt;&lt;/a&gt;7、    纽约广告节最佳数字营销作品赏析&lt;/h4&gt;&lt;p&gt;吴金君&lt;br&gt;纽约广告节  中国首席代表&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;16年的时候，赶上周末去参加了一趟北京的iweb峰会，会上来自各个公司的人分享和宣传自己的产品和技术，我作为一名普通开发者的角度去听大会，并了解和记录当前的一些技术发展。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、主题峰会-9-00
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>IOS 音频一览</title>
    <link href="http://xuzichao.com/2015/03/15/IOS%20%E9%9F%B3%E9%A2%91%E4%B8%80%E8%A7%88/"/>
    <id>http://xuzichao.com/2015/03/15/IOS 音频一览/</id>
    <published>2015-03-15T04:34:11.000Z</published>
    <updated>2016-10-24T10:51:51.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;IOS-音频一览&quot;&gt;&lt;a href=&quot;#IOS-音频一览&quot; class=&quot;headerlink&quot; title=&quot;IOS 音频一览&quot;&gt;&lt;/a&gt;IOS 音频一览&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;前言：&lt;br&gt;做嘉宾聊天室这个需求的时候接触了音频和视频上的开发，嘉宾可以发布视频和语音以及文字信息出来，观众则可以文字回复，这样主持人嘉宾和观众就形成一个良性的互动过程。在这里把相关整理一下，望给大家带来一些认识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、了解音频&quot;&gt;&lt;a href=&quot;#一、了解音频&quot; class=&quot;headerlink&quot; title=&quot;一、了解音频&quot;&gt;&lt;/a&gt;一、了解音频&lt;/h1&gt;&lt;p&gt;声音作为信息的一种媒介载体必不可少，在移动端体现为各类语音交流以及音乐等，开发中使用的音频文件通过声音采样、量化、编码几步从而成为人耳可听的声音，频率为20HZ到20KHZ，奈奎斯特的理论表明采样率高于最高频2倍时候，是可以将数字信号还原为原来的模拟信号的，所以通常我们在网上看到的音频文件的采样率为44.1KHZ。&lt;/p&gt;
&lt;p&gt;采样后通过量化的脉冲编码调制，我们得到了PCM类型的数据，比如在使用AVAudioRecorder采样的时候可以看到采样类型kAudioFormatLinearPCM。但是这样拿到的数据是很大的，不便于使用和传输，通过对人类不敏感的声音区域进行过滤压缩，就有了MP3、AAC、OGG、WMA等数据格式类型，这些都是有损压缩。&lt;/p&gt;
&lt;p&gt;码率代码了压缩质量，比如MP3常用码率有128kbit/s、160kbit/s、320kbit/s等等，越高代表着声音音质越好。MP3中的数据有ID3和音频数据组成，ID3用于存储歌名、演唱者、专辑、音轨等我们可以常见的信息。&lt;/p&gt;
&lt;h1 id=&quot;二、IOS对音频的操作&quot;&gt;&lt;a href=&quot;#二、IOS对音频的操作&quot; class=&quot;headerlink&quot; title=&quot;二、IOS对音频的操作&quot;&gt;&lt;/a&gt;二、IOS对音频的操作&lt;/h1&gt;&lt;p&gt;开发实际上是为了解决需求，需求对应的是使用场景，开发的方式很多，不同的使用场景可以使用的方法不同。IOS开发提供了以下几种常用方式供我们解决对应的音频需求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System Sound Services &lt;/li&gt;
&lt;li&gt;AVFoundation 框架&lt;/li&gt;
&lt;li&gt;Media Player 框架&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-1-System-Sound-Services&quot;&gt;&lt;a href=&quot;#2-1-System-Sound-Services&quot; class=&quot;headerlink&quot; title=&quot;2.1  System Sound Services&quot;&gt;&lt;/a&gt;2.1  System Sound Services&lt;/h2&gt;&lt;h4 id=&quot;2-1-1-场景特点&quot;&gt;&lt;a href=&quot;#2-1-1-场景特点&quot; class=&quot;headerlink&quot; title=&quot;2.1.1 场景特点&quot;&gt;&lt;/a&gt;2.1.1 场景特点&lt;/h4&gt;&lt;p&gt;最底层也是简单的声音播放服务，此方法是适合播放提示警告类型的短小的声音&lt;/p&gt;
&lt;h4 id=&quot;2-1-2-存在限制&quot;&gt;&lt;a href=&quot;#2-1-2-存在限制&quot; class=&quot;headerlink&quot; title=&quot;2.1.2 存在限制&quot;&gt;&lt;/a&gt;2.1.2 存在限制&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;声音长度要小于 30 秒&lt;/li&gt;
&lt;li&gt;In linear PCM 或者 IMA4 (IMA/ADPCM) 格式的&lt;/li&gt;
&lt;li&gt;打包成 .caf, .aif, 或者 .wav 的文件&lt;/li&gt;
&lt;li&gt;不能控制播放的进度&lt;/li&gt;
&lt;li&gt;调用方法后立即播放声音&lt;/li&gt;
&lt;li&gt;没有循环播放和立体声控制：&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-1-3-使用方式&quot;&gt;&lt;a href=&quot;#2-1-3-使用方式&quot; class=&quot;headerlink&quot; title=&quot;2.1.3 使用方式&quot;&gt;&lt;/a&gt;2.1.3 使用方式&lt;/h4&gt;&lt;p&gt;调用 AudioServicesCreateSystemSoundID(CFURLRef inFileURL,SystemSoundID *outSystemSoundID) 该函数的第一个参数代表音频文件的URL（可通过NSURL转换成CFURLRef），第二个参数代表注册音频文件的SystemSoundID。&lt;/p&gt;
&lt;p&gt;调用AudioServicesAddSystemSoundCompletion()函数为制定SystemSoundID注册Callback函数。有了 CallBack 函数我们可以解决不少问题，比如可以克服 System Sound Services 本身不支持循环播放的问题。&lt;/p&gt;
&lt;p&gt;调用AudioServicePlaySystemSound函数或者AudioServicePlayAlertSound（调用系统振动功能）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad
{
[super viewDidLoad];

// 1. 定义要播放的音频文件的URL
NSURL *voiceURL = [[NSBundle mainBundle]URLForResource:@&amp;quot;CleanDidFinish&amp;quot; withExtension:@&amp;quot;aiff&amp;quot;];

// 2. 注册音频文件（第一个参数是音频文件的URL 第二个参数是音频文件的SystemSoundID）
AudioServicesCreateSystemSoundID((__bridge CFURLRef)(voiceURL),&amp;amp;ditaVoice);

// 3. 为crash播放完成绑定回调函数AudioServicesAddSystemSoundCompletion(ditaVoice,NULL,NULL,(void*)completionCallback,NULL);

// 4. 播放 ditaVoice 注册的音频 并控制手机震动
AudioServicesPlayAlertSound(ditaVoice);

//    AudioServicesPlaySystemSound(ditaVoice);
//    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate); // 控制手机振动

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2-2-AVFoundation-框架&quot;&gt;&lt;a href=&quot;#2-2-AVFoundation-框架&quot; class=&quot;headerlink&quot; title=&quot;2.2  AVFoundation 框架&quot;&gt;&lt;/a&gt;2.2  AVFoundation 框架&lt;/h2&gt;&lt;h4 id=&quot;2-2-1-场景特点&quot;&gt;&lt;a href=&quot;#2-2-1-场景特点&quot; class=&quot;headerlink&quot; title=&quot;2.2.1 场景特点&quot;&gt;&lt;/a&gt;2.2.1 场景特点&lt;/h4&gt;&lt;p&gt;如果播放较大的音频或者要对音频有精确的控制，则System Sound Service可能就很难满足实际需求了，通常这种情况会选择使用AVFoundation，它可以满足我们通常意义上的绝大部分的场景需求，包括音乐的交互、声音的制作等等，根据自己的业务需求实现自定义的定制化。如果你只是想实现音频的播放或者录制，没有其他需求，AVFoundation会很好的满足你，它的接口使用简单、不用关心其中的细节。&lt;/p&gt;
&lt;h4 id=&quot;2-2-2-关键点和API浏览&quot;&gt;&lt;a href=&quot;#2-2-2-关键点和API浏览&quot; class=&quot;headerlink&quot; title=&quot;2.2.2 关键点和API浏览&quot;&gt;&lt;/a&gt;2.2.2 关键点和API浏览&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Background Modes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;打开后台模式的音乐播放，或者在info.plist文件中添加Required Background Modes键，其值是App plays audio or streams audio/video using AirPlay&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AVAudioSession&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用于 iOS 系统中协调应用程序之间的音频播放的 API 的。例如，当有电话打进来时，音频的播放就会被暂停；在用户启动电影时，音乐的播放就会停止。我们需要使用这些 API 来确保一个应用程序能够正确响应并处理这类事件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AVAudioPlayer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个高层级的 API 为你提供一个简单的接口，用来播放本地或者内存中的音频。这是一个无界面的音频播放器 (也就是说没有提供 UI 元素)，使用起来也很直接简单。它不适用于网络音频流或者低延迟的实时音频播放。如果这些问题都不需要担心，那么 AVAudioPlayer 可能就是正确的选择。音频播放器的 API 也为我们带来了一些额外的功能，比如循环播放、获取音频的音量强度等等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AVAudioRecorder&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为与 AVAudioPlayer 相对应的 API，AVAudioRecorder 是将音频录制为文件的最简单的方法。除了用一个音量计接受音量的峰值和平均值以外，这个 API 简单粗暴，但要是你的使用场景很简单的话，这可能恰恰就是你想要的方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AVPlayer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AVPlayer 与上面提到的 API 相比，提供了更多的灵活性和可控性。它基于 AVPlayerItem 和 AVAsset，为你提供了颗粒度更细的权限来获取资源，比如选择指定的音轨。它还通过 AVQueuePlayer 子类支持播放列表，而且你可以控制这些资源是否能够通过 AirPlay 发送。&lt;/p&gt;
&lt;h4 id=&quot;与-AVAudioPlayer-最主要的区别是，AVPlayer-对来自网络的流媒体资源的-“开箱即用”-支持。这增加了处理播放状态的复杂性，但是你可以使用-KVO-来观测所有的状态参数来解决这个问题。&quot;&gt;&lt;a href=&quot;#与-AVAudioPlayer-最主要的区别是，AVPlayer-对来自网络的流媒体资源的-“开箱即用”-支持。这增加了处理播放状态的复杂性，但是你可以使用-KVO-来观测所有的状态参数来解决这个问题。&quot; class=&quot;headerlink&quot; title=&quot;与 AVAudioPlayer 最主要的区别是，AVPlayer 对来自网络的流媒体资源的 “开箱即用” 支持。这增加了处理播放状态的复杂性，但是你可以使用 KVO 来观测所有的状态参数来解决这个问题。&quot;&gt;&lt;/a&gt;与 AVAudioPlayer 最主要的区别是，AVPlayer 对来自网络的流媒体资源的 “开箱即用” 支持。这增加了处理播放状态的复杂性，但是你可以使用 KVO 来观测所有的状态参数来解决这个问题。&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt; AVAudioEngine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AVAudioEngine 是播放和录制的 Objective-C 接口。它提供了以前需要深入到 Audio Toolbox 框架的 C API 才能做的控制 (例如一些实时音频任务)。该音频引擎 API 对底层的 API 建立了优秀的接口。如果你不得不处理底层的问题，你仍然可以使用 Audio Toolbox 框架。&lt;/p&gt;
&lt;p&gt;这个 API 的基本概念是建立一个音频的节点图，从源节点 (播放器和麦克风) 以及过处理 (overprocessing) 节点 (混音器和效果器) 到目标节点 (硬件输出)。每一个节点都具有一定数量的输入和输出总线，同时这些总线也有良好定义的数据格式。这种结构使得它非常的灵活和强大。而且它集成了音频单元 (audio unit)。&lt;/p&gt;
&lt;h2 id=&quot;2-3-Media-Player-框架&quot;&gt;&lt;a href=&quot;#2-3-Media-Player-框架&quot; class=&quot;headerlink&quot; title=&quot;2.3 Media Player 框架&quot;&gt;&lt;/a&gt;2.3 Media Player 框架&lt;/h2&gt;&lt;h4 id=&quot;2-3-1-场景特点&quot;&gt;&lt;a href=&quot;#2-3-1-场景特点&quot; class=&quot;headerlink&quot; title=&quot;2.3.1 场景特点&quot;&gt;&lt;/a&gt;2.3.1 场景特点&lt;/h4&gt;&lt;p&gt;众所周知音乐是iOS的重要组成播放，无论是iPod、iTouch、iPhone还是iPad都可以在iTunes购买音乐或添加本地音乐到音乐库中同步到你的iOS设备。在MediaPlayer.frameowork中有一个MPMusicPlayerController用于播放音乐库中的音乐。Media Player 框架是 iOS 平台上一个用于音频和视频播放的高层级接口，它包含了一个你可以在应用中直接使用的默认的用户界面。你可以使用它来播放用户在 iPod 库中的项目，或者播放本地文件以及网络流。这个框架也包括了查找用户媒体库中内容的 API，同时还可以配置像是在锁屏界面或者控制中心里的音频控件。&lt;/p&gt;
&lt;h4 id=&quot;2-3-2-使用方式&quot;&gt;&lt;a href=&quot;#2-3-2-使用方式&quot; class=&quot;headerlink&quot; title=&quot;2.3.2 使用方式&quot;&gt;&lt;/a&gt;2.3.2 使用方式&lt;/h4&gt;&lt;p&gt;使用MPMusicPlayerController实例化对象来播放内置音乐库的媒体文件，有以下两种类方法来实例化对象：&lt;/p&gt;
&lt;p&gt;MPMusicPlayerController *playController = [MPMusicPlayerController systemMusicPlayer]; &lt;/p&gt;
&lt;p&gt;说明：播放内置媒体库项目取代用户目前播放状态（如果是用网易云音乐或QQQ音乐在播放歌曲）&lt;/p&gt;
&lt;p&gt;MPMusicPlayerController *playController = [MPMusicPlayerController applicationMusicPlayer]; &lt;/p&gt;
&lt;p&gt;说明：播放该应用内的歌曲，不影响本机自带音乐播放器的状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;判断有没有正在播放的媒体&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[MPMusicPlayerController indexOfNowPlayingItem] == NSNotFound
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建媒体队列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[MPMediaQuery songsQuery];
[MPMusicPlayerController setQueueWithQuery:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取媒体曲目的信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;MPMediaItem *currentItem = ....
NSString *artist = [currentItem valueForProperty:MPMediaItemPropertyArtist];
NSString *songName = [currentItem valueForProperty:MPMediaItemPropertyTitle];
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;监听媒体通知&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];[notificationCenter addObserver:self
              selector:@selector()
                       name:MPMusicPlayerControllerNowPlayingItemDidChangeNotification
                     object:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-4-更多音频方案&quot;&gt;&lt;a href=&quot;#2-4-更多音频方案&quot; class=&quot;headerlink&quot; title=&quot;2.4 更多音频方案&quot;&gt;&lt;/a&gt;2.4 更多音频方案&lt;/h2&gt;&lt;p&gt;CoreAudio的接口层次：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/api.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-4-1-OpenAL&quot;&gt;&lt;a href=&quot;#2-4-1-OpenAL&quot; class=&quot;headerlink&quot; title=&quot;2.4.1 OpenAL&quot;&gt;&lt;/a&gt;2.4.1 OpenAL&lt;/h4&gt;&lt;p&gt;OpenAL 是一个跨平台的 API。它提供了位置 (3D) 和低延迟的音频服务。它主要用于跨平台游戏的开发。它有意地模仿了 OpenGL 中 API 的风格。&lt;/p&gt;
&lt;h4 id=&quot;2-4-2-Audio-Unit-框架&quot;&gt;&lt;a href=&quot;#2-4-2-Audio-Unit-框架&quot; class=&quot;headerlink&quot; title=&quot;2.4.2  Audio Unit 框架&quot;&gt;&lt;/a&gt;2.4.2  Audio Unit 框架&lt;/h4&gt;&lt;p&gt;Audio Unit 框架是一个底层的 API；所有 iOS 中的音频技术都构建在 Audio Unit 这个框架之上。音频单元是用来加工音频数据的插件。一个音频单元链叫做音频处理图。&lt;/p&gt;
&lt;p&gt;如果你需要非常低的延迟 (如 VoIP 或合成乐器)、回声消除、混音或者音调均衡的话，你可能需要直接使用音频单元，或者自己写一个音频单元。但是其中的大部分工作可以使用 AVAudioEngine 的 API 来完成。如果你不得不写自己的音频单元的话，你可以将它们与 AVAudioUnit 节点一起集成在 AVAudioEngine 处理图中。&lt;/p&gt;
&lt;h4 id=&quot;2-4-2-AudioToolBox-框架&quot;&gt;&lt;a href=&quot;#2-4-2-AudioToolBox-框架&quot; class=&quot;headerlink&quot; title=&quot;2.4.2 AudioToolBox 框架&quot;&gt;&lt;/a&gt;2.4.2 AudioToolBox 框架&lt;/h4&gt;&lt;p&gt;通过AudioToolbox框架，可以将短声音注册到system sound服务上，被注册到system sound服务上的声音称之为 system sounds。&lt;br&gt;前面常用的System Sound Services 就来自这里的框架。&lt;/p&gt;
&lt;p&gt;它必须满足下面几个条件：&lt;/p&gt;
&lt;p&gt;(1).播放的时间不能超过30秒&lt;/p&gt;
&lt;p&gt;(2).数据必须是 PCM或者IMA4流格式&lt;/p&gt;
&lt;p&gt;(3).必须被打包成下面三个格式之一：Core Audio Format (.caf), Waveform audio (.wav), 或者 Audio Interchange File (.aiff)&lt;/p&gt;
&lt;p&gt;(4）声音文件必须放到设备的本地文件夹下面。通过AudioServicesCreateSystemSoundID方法注册这个声音文件.&lt;/p&gt;
&lt;h4 id=&quot;2-4-3-CoreMIDI-和-CoreAudioKit-框架&quot;&gt;&lt;a href=&quot;#2-4-3-CoreMIDI-和-CoreAudioKit-框架&quot; class=&quot;headerlink&quot; title=&quot;2.4.3 CoreMIDI 和 CoreAudioKit 框架&quot;&gt;&lt;/a&gt;2.4.3 CoreMIDI 和 CoreAudioKit 框架&lt;/h4&gt;&lt;p&gt;在 iOS 上，Core MIDI 和 CoreAudioKit 可以被用来使应用程序表现为 MIDI 设备。在 OS X 上，Music Sequencing 服务提供了基于 MIDI 的控制和对音乐数据访问的权限。Core MIDI 服务为服务器和驱动程序提供了支持。&lt;/p&gt;
&lt;h4 id=&quot;2-4-4-QTKit-和-QuickTime-框架&quot;&gt;&lt;a href=&quot;#2-4-4-QTKit-和-QuickTime-框架&quot; class=&quot;headerlink&quot; title=&quot;2.4.4 QTKit 和 QuickTime 框架&quot;&gt;&lt;/a&gt;2.4.4 QTKit 和 QuickTime 框架&lt;/h4&gt;&lt;p&gt;现在已经过时了，它们不应该被用在以后的开发中。我们应该使用 AVFoundation (和 AVKit) 来代替它们&lt;/p&gt;
&lt;h1 id=&quot;三、今日头条嘉宾聊天室音频实践&quot;&gt;&lt;a href=&quot;#三、今日头条嘉宾聊天室音频实践&quot; class=&quot;headerlink&quot; title=&quot;三、今日头条嘉宾聊天室音频实践&quot;&gt;&lt;/a&gt;三、今日头条嘉宾聊天室音频实践&lt;/h1&gt;&lt;h2 id=&quot;3-1-背景&quot;&gt;&lt;a href=&quot;#3-1-背景&quot; class=&quot;headerlink&quot; title=&quot;3.1 背景&quot;&gt;&lt;/a&gt;3.1 背景&lt;/h2&gt;&lt;p&gt;嘉宾聊天室是头条16年初新起的一个项目服务，目标是为了引进明星嘉宾访谈类型和体育赛事线上直播的节目，丰富头条在直播领域的内容，聊天室一期是属于图文、语音、短视频直播，后期发展可成为视频线上直播。表现形式与网易直播频道类似，但更丰富。&lt;/p&gt;
&lt;h2 id=&quot;3-2-IOS端实现&quot;&gt;&lt;a href=&quot;#3-2-IOS端实现&quot; class=&quot;headerlink&quot; title=&quot;3.2 IOS端实现&quot;&gt;&lt;/a&gt;3.2 IOS端实现&lt;/h2&gt;&lt;p&gt;根据聊天室在语音和视频的需求，使用系统自带实现的MPMoviePlayerController没法符合自定义的需求，包括功能与交互设计，并且MPMoviePlayerController已经不被苹果官方提倡，将要通过AVPlayer方案代替。需求本身的属于基本的语音和视频沟通，只对音频视频的录制与播放，符合音质画质要求和大小要求，因此采用AVFoundation框架即可，能够满足聊天室的需求。主要使用了AVPlayer、AVAudioRecorder、AVAudioSession等主要的类。&lt;/p&gt;
&lt;p&gt;实现类有如下等：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;TTAudioRecorder.h&amp;quot;
#import &amp;quot;TTAudioPlayer.h&amp;quot;
#import &amp;quot;TTLiveCameraViewController.h&amp;quot;
#import &amp;quot;TTUploadVideoAudioManager.h&amp;quot;
#import &amp;quot;TTLiveAudioManager.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;3-3-问题与解决&quot;&gt;&lt;a href=&quot;#3-3-问题与解决&quot; class=&quot;headerlink&quot; title=&quot;3.3 问题与解决&quot;&gt;&lt;/a&gt;3.3 问题与解决&lt;/h2&gt;&lt;p&gt;整个需求的实现过程还算顺利，按照API说明理解即可，提两三点说明下都会遇见哪一类的问题。&lt;/p&gt;
&lt;h4 id=&quot;3-1-音频格式为AMR&quot;&gt;&lt;a href=&quot;#3-1-音频格式为AMR&quot; class=&quot;headerlink&quot; title=&quot;3.1 音频格式为AMR&quot;&gt;&lt;/a&gt;3.1 音频格式为AMR&lt;/h4&gt;&lt;p&gt;AVPlayer来播放视频音频都相当强大，但是它也存在着一些不可回避的问题，那就是目前IOS已经不再支持AMR格式的播放。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AMR format is no longer supported by Apple (since iOS 4.3)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;与安卓同步开发的时候对接确立的通用的格式为AMR，因为AAC文件在网络传输下载播放的时候显得很大，AMR相对来说会好很多，同时我们也看了微博和微信的实现都是使用AMR，鉴于头条的用户量和使用体验，于是就采用了同样的方式。安卓可以很好支持AMR，在iOS平台上需要进行WAV和AMR之间的转换，好在libopencore可以解决这个事。网络上有好些所谓的相互转化的库，仔细看了下，都没有脱离这个core本身。&lt;/p&gt;
&lt;p&gt;libopencore库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interf_dec.h 
interf_enc.h
dec_if.h
if_rom.h
libopencore-amrnb.a
libopencore-amrwb.a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主要方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EncodeWAVEFileToAMRFile 、 DecodeAMRFileToWAVEFile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;封装一个mannager：        &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;

@interface VoiceConverter : NSObject

+ (int)amrToWav:(NSString*)_amrPath wavSavePath:(NSString*)_savePath;

+ (int)wavToAmr:(NSString*)_wavPath amrSavePath:(NSString*)_savePath;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3-2-WAV转化AMR声音变形：&quot;&gt;&lt;a href=&quot;#3-2-WAV转化AMR声音变形：&quot; class=&quot;headerlink&quot; title=&quot;3.2 WAV转化AMR声音变形：&quot;&gt;&lt;/a&gt;3.2 WAV转化AMR声音变形：&lt;/h4&gt;&lt;p&gt;录制WAV格式本地正常播放，转化为AMR后，把AMR格式文件在电脑端播放，声音严重变形，无法识别，再转化会WAV,，手机还是无法识别。&lt;br&gt;原因与解决&lt;br&gt;声音格式转化采用的是”amrFileCodec.h”，它对转化的音频输入源是有格式要求的，要求转化的采样率为标准的8k，如果录制的音频频率采用高频率44.1K的话就会出现变形，我想这里的设定依据来自于amr格式的采样率通常为8K。通过AVAudioRecorder把采样率设置为8K后，可以正常互相转化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AMR维基百科：&lt;/p&gt;
&lt;p&gt;采样率 8 kHz/13-bit (160 采样点每20ms)，滤波后只保留 200-3400 Hz 范围内的信号.&lt;/p&gt;
&lt;p&gt;编码器使用8个位速：12.2、10.2、7.95、7.40、6.70、5.90、5.15和4.75 kbit/s.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;NSMutableDictionary *settings=[NSMutableDictionary dictionary];
[settings setObject:@(kAudioFormatLinearPCM) forKey:AVFormatIDKey];
[settings setObject:@(8000) forKey:AVSampleRateKey]; //必须和amr文件解码参数保持一致
[settings setObject:@(1) forKey:AVNumberOfChannelsKey];
[settings setObject:@(16) forKey:AVLinearPCMBitDepthKey];
[settings setObject:@(NO) forKey:AVLinearPCMIsFloatKey];
[settings setValue:@(NO) forKey:AVLinearPCMIsNonInterleaved];
[settings setValue:@(NO) forKey:AVLinearPCMIsBigEndianKey];
[settings setValue:@(AVAudioQualityHigh) forKey:AVEncoderAudioQualityKey];
AVAudioRecorder *recorderTemp = [[AVAudioRecorder alloc] initWithURL:fileUrl settings:settings error:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3-3-AVPlayer的准备状态&quot;&gt;&lt;a href=&quot;#3-3-AVPlayer的准备状态&quot; class=&quot;headerlink&quot; title=&quot;3.3 AVPlayer的准备状态&quot;&gt;&lt;/a&gt;3.3 AVPlayer的准备状态&lt;/h4&gt;&lt;p&gt;当AVPlayer的status变为AVPlayerStatusReadyToPlay后，依旧可能无法开始播放？&lt;/p&gt;
&lt;p&gt;AVPlayerStatusReadyToPlay属性只是表明了AVPlayer已经成功的载入了AVPlayerItem，并且准备好，但是实际的是否能播放时由AVPlayerItem的status到达AVPlayerItemStatusReadyToPlay的时候，才能开始正常播放的。&lt;br&gt;如果我们的App使用CPU过多，I/O读写过多时，有可能导致直接无法播放，我们再调用play或者seekToTime:方法都无法正常播放，尤其是视频。所以我们需要做一个真正播放状态准备好的判断，也可以通过KVO去监听AVPlayerItem的status。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//播放器是否准备好
if (self.videoPrePlayer.status == AVPlayerStatusReadyToPlay) 
{
    //视频是否加载成功
    if(self.videoPrePlayer.currentItem.status == AVPlayerItemStatusFailed){   
        return;
    }
        [self.videoPrePlayer play];

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;四、小结&quot;&gt;&lt;a href=&quot;#四、小结&quot; class=&quot;headerlink&quot; title=&quot;四、小结&quot;&gt;&lt;/a&gt;四、小结&lt;/h1&gt;&lt;p&gt;文章主要对音频的使用范畴做了概括，并列举了两三实践点，其他的并没有做详细的论述，因为本篇比较偏向音频知识的介绍，知道用什么工具框架后再具体解决就好。比如如何播放流畅的网络音频，如何实现音频的快放与慢放等具体问题，此次需求内容并不复杂没有涉及，他们都可以通过 AudioToolBox框架实现。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;IOS-音频一览&quot;&gt;&lt;a href=&quot;#IOS-音频一览&quot; class=&quot;headerlink&quot; title=&quot;IOS 音频一览&quot;&gt;&lt;/a&gt;IOS 音频一览&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;前言：&lt;br&gt;做嘉宾聊天室这个需求的时候接触了音频和视频上的开发，
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>IOS视频录制</title>
    <link href="http://xuzichao.com/2015/01/28/IOS%E8%A7%86%E9%A2%91%E5%BD%95%E5%88%B6--AVFoudation/"/>
    <id>http://xuzichao.com/2015/01/28/IOS视频录制--AVFoudation/</id>
    <published>2015-01-28T11:09:59.000Z</published>
    <updated>2017-01-24T10:34:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;IOS-视频录制-—-AVFoundation&quot;&gt;&lt;a href=&quot;#IOS-视频录制-—-AVFoundation&quot; class=&quot;headerlink&quot; title=&quot;IOS 视频录制 — AVFoundation&quot;&gt;&lt;/a&gt;IOS 视频录制 — AVFoundation&lt;/h1&gt;&lt;p&gt;AVFoundation是为数不多的几个框架,您可以使用和创建基于时间的视听媒体。它提供了一个objective - c接口用于工作与基于时间的视听数据详细的级别。例如,您可以使用它来检查,创建、编辑或reencode媒体文件。你也可以输入流从设备和操作视频实时捕捉和回放。&lt;/p&gt;
&lt;h2 id=&quot;一、概念引导：&quot;&gt;&lt;a href=&quot;#一、概念引导：&quot; class=&quot;headerlink&quot; title=&quot;一、概念引导：&quot;&gt;&lt;/a&gt;一、概念引导：&lt;/h2&gt;&lt;h3 id=&quot;1、ASSets媒体文件&quot;&gt;&lt;a href=&quot;#1、ASSets媒体文件&quot; class=&quot;headerlink&quot; title=&quot;1、ASSets媒体文件:&quot;&gt;&lt;/a&gt;1、ASSets媒体文件:&lt;/h3&gt;&lt;p&gt;1）AVAsset&lt;/p&gt;
&lt;p&gt;一个抽象类来表示时间等视听媒体视频和声音。每个资产包含一组跟踪旨在呈现或加工在一起,一个统一的媒体类型,包括但不限于音频、视频、文本、关闭字幕,字幕。&lt;/p&gt;
&lt;p&gt;AVURLAsset *anAsset = [[AVURLAsset alloc] initWithURL:url options:nil];属性有&lt;br&gt;tracks、duration、preferredVolume、preferredTransform等等。&lt;/p&gt;
&lt;p&gt;2) 一个AVAssetTrack&lt;/p&gt;
&lt;p&gt;对象提供了所有资产提供track-level检查接口,方便对ASSets进行更具体的属性获取以及对应的操作。&lt;/p&gt;
&lt;p&gt;3）AVAssetImageGenerator&lt;/p&gt;
&lt;p&gt;对象提供缩略图或预览图像的资产独立于回放，可以生成单独的图片，也可以生成图片队列，这是获取视频缩略图的方式之一，还有另外两种ALAsset的thumbnail 和 - (UIImage *)imageFromSampleBuffer:(CMSampleBufferRef)sampleBuffer。&lt;/p&gt;
&lt;p&gt;4）AVAssetExportSession&lt;/p&gt;
&lt;p&gt;针对AVAsset源对象的内容进行转码，创建一个被指定输出形式的资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/AVAssetExportSession.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、Playback播放控制&quot;&gt;&lt;a href=&quot;#2、Playback播放控制&quot; class=&quot;headerlink&quot; title=&quot;2、Playback播放控制:&quot;&gt;&lt;/a&gt;2、Playback播放控制:&lt;/h3&gt;&lt;p&gt;1) AVPlayer&lt;/p&gt;
&lt;p&gt;你使用一个AVPlayer对象来实现控制器和用户接口单一或多种条目回放。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;-  (instancetype)initWithPlayerItem:(AVPlayerItem *)item&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;play 、 parse 、 end&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;- (void)seekToTime:(CMTime)time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2) AVPlayerLayer&lt;/p&gt;
&lt;p&gt;用于显示视频内容，相当于大屏幕。里面有videoGravity，默认值 AVLayerVideoGravityResizeAspect.&lt;/p&gt;
&lt;p&gt;3) AVPlayerItem&lt;/p&gt;
&lt;p&gt;一个AVPlayerItem代表资产的表现状态,由一个AVPlayer对象和可以观察到的状态。对视频播放状态修改一起监听的过程多数发生在正对这个对象的操作操作上，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;seekToTime，从哪里开始播放&lt;/li&gt;
&lt;li&gt;各种资源播放状态的通知AVPlayerItemFailedToPlayToEndTimeNotification&lt;br&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4) AVPlayerItemTrack &lt;/p&gt;
&lt;p&gt;你用一个AVPlayerItemTrack对象修改资产的表现状态跟踪(AVAssetTrack)一个AVPlayer对象。通常视频的加载播放有各种状态，我们需要KVO监听或者添加通知去知道播放器的准备、进行、暂停、停止等状态。&lt;/p&gt;
&lt;p&gt;5) AVQueuePlayer&lt;/p&gt;
&lt;p&gt;按照队列播放视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;queuePlayerWithItems，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;insertItem:(AVPlayerItem *)item&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;afterItem:(AVPlayerItem *)afterItem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3、Editing资源编辑&quot;&gt;&lt;a href=&quot;#3、Editing资源编辑&quot; class=&quot;headerlink&quot; title=&quot;3、Editing资源编辑:&quot;&gt;&lt;/a&gt;3、Editing资源编辑:&lt;/h3&gt;&lt;p&gt;AVFoundation框架提供了一个功能丰富的组类促进视听资产的编辑。AVFoundation的编辑API的核心成分，就是一组追踪从一个或多个不同的媒体资产。AVMutableComposition类提供了一个接口,用于插入和删除操作的痕迹,以及管理自己时间排序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/AVMutableComposition.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1）AVMutableComposition&lt;/p&gt;
&lt;p&gt;是一个可变的AVComposition子类，当您想要从现有资产创建一个新的资源。你可以添加和删除跟踪,可以添加、删除和时间范围。&lt;br&gt;比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;– insertEmptyTimeRange：可以增加一段空白时间&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;– insertTimeRange:ofAsset:atTime:error:&lt;br&gt;插入的所有跟踪给定的时间范围内指定的资产到接收机。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;
&lt;pre&gt;&lt;code&gt;AVAsset *videoAsset = &amp;lt;#AVAsset with at least one video track#&amp;gt;;
AVAsset *anotherVideoAsset = &amp;lt;#another AVAsset with at least one video track#&amp;gt;;
// Get the first video track from each asset.
AVAssetTrack *videoAssetTrack = [[videoAsset tracksWithMediaType:AVMediaTypeVideo] objectAtIndex:0];
AVAssetTrack *anotherVideoAssetTrack = [[anotherVideoAsset tracksWithMediaType:AVMediaTypeVideo] objectAtIndex:0];
// Add them both to the composition.
[mutableCompositionVideoTrack insertTimeRange:CMTimeRangeMake(kCMTimeZero,videoAssetTrack.timeRange.duration) ofTrack:videoAssetTrack atTime:kCMTimeZero error:nil];
[mutableCompositionVideoTrack insertTimeRange:CMTimeRangeMake(kCMTimeZero,anotherVideoAssetTrack.timeRange.duration) ofTrack:anotherVideoAssetTrack atTime:videoAssetTrack.timeRange.duration error:nil];&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2) AVMutableAudioMix &lt;/p&gt;
&lt;p&gt;一个AVMutableAudioMix对象管理混合音轨的输入参数。它允许自定义音频处理在回放期间音轨或执行其他操作。&lt;/p&gt;
&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;AVMutableAudioMix *mutableAudioMix = [AVMutableAudioMix audioMix];
// Create the audio mix input parameters object.
AVMutableAudioMixInputParameters *mixParameters = [AVMutableAudioMixInputParameters audioMixInputParametersWithTrack:mutableCompositionAudioTrack];
// Set the volume ramp to slowly fade the audio out over the duration of the composition.
[mixParameters setVolumeRampFromStartVolume:1.f toEndVolume:0.f timeRange:CMTimeRangeMake(kCMTimeZero, mutableComposition.duration)];
// Attach the input parameters to the audio mix.
mutableAudioMix.inputParameters = @[mixParameters];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4、Media-Capture媒体捕捉&quot;&gt;&lt;a href=&quot;#4、Media-Capture媒体捕捉&quot; class=&quot;headerlink&quot; title=&quot;4、Media Capture媒体捕捉:&quot;&gt;&lt;/a&gt;4、Media Capture媒体捕捉:&lt;/h3&gt;&lt;p&gt;1) AVCaptureDevice &lt;/p&gt;
&lt;p&gt;代表输入设备,如摄像头或麦克风&lt;/p&gt;
&lt;p&gt;2) AVCaptureInput &lt;/p&gt;
&lt;p&gt;输入设备的配置端口，我们可以理解为输入&lt;/p&gt;
&lt;p&gt;3）AVCaptureSession&lt;/p&gt;
&lt;p&gt;协调数据流从输入到输出,用startRunning开始从输入到输出的数据流,并调用stopRunning停止流动。采取关闭代理，保证取景器一直流动。&lt;/p&gt;
&lt;p&gt;4) AVCaptureOutput &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AVCaptureMovieFileOutput，输入到视频文件，代理AVCaptureFileOutputRecordingDelegate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AVCaptureVideoDataOutput，如果想要实时的处理每一帧数据，或想要有自己的图形动画，代理AVCaptureVideoDataOutputSampleBufferDelegate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AVCaptureAudioDataOutput ，音频数据，代理AVCaptureVideoDataOutputSampleBufferDelegate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AVCaptureStillImageOutput ，图片数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5）AVCaptureVideoPreviewLayer &lt;/p&gt;
&lt;p&gt;实时展示被session传出出来的视频流数据，也就是我们的取景器&lt;/p&gt;
&lt;p&gt;6）AVCaptureConnection &lt;/p&gt;
&lt;p&gt;代表捕获之间的连接输入和输出对象关联到一个捕获会话。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/AVCaptureConnection.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5、Export媒体输出&quot;&gt;&lt;a href=&quot;#5、Export媒体输出&quot; class=&quot;headerlink&quot; title=&quot;5、Export媒体输出:&quot;&gt;&lt;/a&gt;5、Export媒体输出:&lt;/h3&gt;&lt;p&gt;1) AVAssetExportSession&lt;/p&gt;
&lt;p&gt;针对AVAsset对象转码，创建一个输出的形式被指定出口预设内容。包括对输出媒体资源的属性设定，可以设置presetName进行视频品质压缩，AVAssetExportPresetLowQuality等。也可以设置属性包括：outputFileType&lt;br&gt;、fileLengthLimit、timeRange&lt;br&gt;等。&lt;/p&gt;
&lt;p&gt;2）AVAssetReader &lt;/p&gt;
&lt;p&gt;直接从媒体读取存储样本,获得样本解码成可渲染的形式。组合资产多个音轨和组合多个视频跟踪(通过使用AVAssetReaderAudioMixOutput和AVAssetReaderVideoCompositionOutput)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;addOutPut&lt;/li&gt;
&lt;li&gt;startReading&lt;/li&gt;
&lt;li&gt;cancelReading&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读取一个音频：&lt;/p&gt;
&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;AVAudioMix *audioMix = &amp;lt;#An AVAudioMix that specifies how the audio tracks from the AVAsset are mixed#&amp;gt;;
// Assumes that assetReader was initialized with an AVComposition object.
AVComposition *composition = (AVComposition *)assetReader.asset;
// Get the audio tracks to read.
NSArray *audioTracks = [composition tracksWithMediaType:AVMediaTypeAudio];
// Get the decompression settings for Linear PCM.
NSDictionary *decompressionAudioSettings = @{ AVFormatIDKey : [NSNumber numberWithUnsignedInt:kAudioFormatLinearPCM] };
// Create the audio mix output with the audio tracks and decompression setttings.
AVAssetReaderOutput *audioMixOutput = [AVAssetReaderAudioMixOutput assetReaderAudioMixOutputWithAudioTracks:audioTracks audioSettings:decompressionAudioSettings];
// Associate the audio mix used to mix the audio tracks being read with the output.
audioMixOutput.audioMix = audioMix;
// Add the output to the reader if possible.
if ([assetReader canAddOutput:audioMixOutput])
[assetReader addOutput:audioMixOutput];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3) AVAssetWriter&lt;/p&gt;
&lt;p&gt;使用一个AVAssetWriter对象媒体数据写入新文件指定视听的容器类型,如QuickTime电影文件或一个mp4文件,支持自动交叉媒体数据的多个并发的痕迹。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initWithURL:fileType:error:&lt;/li&gt;
&lt;li&gt;startWriting&lt;/li&gt;
&lt;li&gt;startSessionAtSourceTime&lt;/li&gt;
&lt;li&gt;addInput&lt;/li&gt;
&lt;li&gt;endSessionAtSourceTime&lt;/li&gt;
&lt;li&gt;finishWritingWithCompletionHandler&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;二、代码实践：&quot;&gt;&lt;a href=&quot;#二、代码实践：&quot; class=&quot;headerlink&quot; title=&quot;二、代码实践：&quot;&gt;&lt;/a&gt;二、代码实践：&lt;/h2&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;import-“TTCameraViewController-h”&quot;&gt;&lt;a href=&quot;#import-“TTCameraViewController-h”&quot; class=&quot;headerlink&quot; title=&quot;#import “TTCameraViewController.h”&quot;&gt;&lt;/a&gt;#import “TTCameraViewController.h”&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;三、问题回顾：&quot;&gt;&lt;a href=&quot;#三、问题回顾：&quot; class=&quot;headerlink&quot; title=&quot;三、问题回顾：&quot;&gt;&lt;/a&gt;三、问题回顾：&lt;/h2&gt;&lt;h3 id=&quot;1、视频文件写入崩溃：&quot;&gt;&lt;a href=&quot;#1、视频文件写入崩溃：&quot; class=&quot;headerlink&quot; title=&quot;1、视频文件写入崩溃：&quot;&gt;&lt;/a&gt;1、视频文件写入崩溃：&lt;/h3&gt;&lt;h4 id=&quot;现象：&quot;&gt;&lt;a href=&quot;#现象：&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;相机开始拍摄就会出现崩溃，时而出现，有时难以复现。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：&quot;&gt;&lt;a href=&quot;#原因与解决：&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;p&gt;1）startSessionAtSourceTime只能在 AVAssetWriterStatusWriting的之后调用，但是startWriting调用之后writer并没有立即变为writing状态，而已有一个极短的开始时间，参照苹果规范使用文档，只需要前面调用之后后面就可以跟着执行startSessionAtSourceTime，然而，我遇见了这问题，说明它并不是。随后我到stackoverflow上查了问题，发现有人早就提过，并没有答案，说是升级IOS8以后就没有了，可我这里是IOS9…随后我只能判断writer状态如果是writing就开始执行，如果不是就调用startWriting。&lt;/p&gt;
&lt;p&gt;2）[videoWriterInput appendSampleBuffer：xxx]这只能在startSessionAtSourceTime开始之后调用，和1是同样的情况，明明第一行调用了startSessionAtSourceTime，第二调用appendSampleBuffer就会崩溃，并且依旧是偶尔发生。但是这里的问题是没有一个状态可以判断是否已经开始startSessionAtSourceTime，这里就有点血崩了，不能像问题1一样判断解决，后来只好try catch了,稳住局面防止崩溃，丢失极少的毫秒级帧数。&lt;/p&gt;
&lt;h3 id=&quot;2、相机拍摄闪烁抖动：&quot;&gt;&lt;a href=&quot;#2、相机拍摄闪烁抖动：&quot; class=&quot;headerlink&quot; title=&quot;2、相机拍摄闪烁抖动：&quot;&gt;&lt;/a&gt;2、相机拍摄闪烁抖动：&lt;/h3&gt;&lt;h4 id=&quot;现象：-1&quot;&gt;&lt;a href=&quot;#现象：-1&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;开始拍摄时候，取景器闪烁抖动，引起一小部分可见范围内的视频内容发送抖动，并被存入文件中，体验差。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：-1&quot;&gt;&lt;a href=&quot;#原因与解决：-1&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;p&gt;在开始拍摄的时候，再去创建connection并传递设备和拍摄方向，有利于视频获取oritation，自然而然的横着拍摄也会竖着播放，但是问题在于connection的建立产生较大的链接，引起视频抖动，此抖动将被录制进入视频文件中。于是我采取在初始化input的时候就把connection就增加进去，当开始拍摄的时候不会发生抖动，但是牺牲的是视频的oritation需要自己根据用户拍摄的方向去手动修改视频方向。&lt;/p&gt;
&lt;h3 id=&quot;3、视频方向混乱：&quot;&gt;&lt;a href=&quot;#3、视频方向混乱：&quot; class=&quot;headerlink&quot; title=&quot;3、视频方向混乱：&quot;&gt;&lt;/a&gt;3、视频方向混乱：&lt;/h3&gt;&lt;h4 id=&quot;现象：-2&quot;&gt;&lt;a href=&quot;#现象：-2&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;背面摄像头拍摄，home键在下，拍摄出来的视频文件，在播放的时候，底部在手机右边，而不是底边，一次类推，home键在底部与视频的底部角度成90垂直关系。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：-2&quot;&gt;&lt;a href=&quot;#原因与解决：-2&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;self.videoOutPut = [[AVCaptureVideoDataOutput alloc] init];
NSDictionary * outputSettings = [[NSDictionary alloc] initWithObjectsAndKeys:[NSNumber numberWithInt:kCVPixelFormatType_32BGRA],(id)kCVPixelBufferPixelFormatTypeKey, nil];
[self.videoOutPut setVideoSettings:outputSettings];

//必须
if ([self.session canAddOutput:self.videoOutPut]) {
    [self.session addOutput:self.videoOutPut];
}

//先于
self.videoConnection = [self.videoOutPut connectionWithMediaType:AVMediaTypeVideo];
self.videoConnection.enabled = NO;
[self.videoConnection setVideoOrientation:AVCaptureVideoOrientationPortrait];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4、横着拍摄的视频横着播放：&quot;&gt;&lt;a href=&quot;#4、横着拍摄的视频横着播放：&quot; class=&quot;headerlink&quot; title=&quot;4、横着拍摄的视频横着播放：&quot;&gt;&lt;/a&gt;4、横着拍摄的视频横着播放：&lt;/h3&gt;&lt;h4 id=&quot;现象：-3&quot;&gt;&lt;a href=&quot;#现象：-3&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;横着拍摄的视频，放的时候是竖着的。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：-3&quot;&gt;&lt;a href=&quot;#原因与解决：-3&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;p&gt;因为上面解决视频抖动，导致不能直接设定拍摄时候的视频方向，从而需要根据手动的拍摄方向去修改视频的视图的方向。&lt;br&gt;考虑到用户可能锁住屏幕旋转，于是就CMMotionManager获取重力方向来判断，在VC出现或者开始拍摄的时候开启，在VC退出或者拍摄完成的的时候关闭。获得方向后，在视频的写入里直接修改方向即可。&lt;/p&gt;
&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;[videoWriterInput setTransform:CGAffineTransformScale(CGAffineTransformMakeRotation(-M_PI_2), 1.0, 1.0)];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5、录制视频有右边和底边绿色线条：&quot;&gt;&lt;a href=&quot;#5、录制视频有右边和底边绿色线条：&quot; class=&quot;headerlink&quot; title=&quot;5、录制视频有右边和底边绿色线条：&quot;&gt;&lt;/a&gt;5、录制视频有右边和底边绿色线条：&lt;/h3&gt;&lt;h4 id=&quot;现象：-4&quot;&gt;&lt;a href=&quot;#现象：-4&quot; class=&quot;headerlink&quot; title=&quot;现象：&quot;&gt;&lt;/a&gt;现象：&lt;/h4&gt;&lt;p&gt;手机全屏录制的时候，设置视频输出宽度为手机的宽高，当宽高为基数的时候视频录制里面会出现绿色线条。&lt;/p&gt;
&lt;h4 id=&quot;原因与解决：-4&quot;&gt;&lt;a href=&quot;#原因与解决：-4&quot; class=&quot;headerlink&quot; title=&quot;原因与解决：&quot;&gt;&lt;/a&gt;原因与解决：&lt;/h4&gt;&lt;p&gt;不知道原因，神奇的bug，参照着段子的视频方法解决的，直接修改视频输出宽高为偶数。&lt;/p&gt;
&lt;!--0--&gt;
&lt;pre&gt;&lt;code&gt;NSInteger videoWidth = [[NSNumber numberWithFloat:self.view.frame.size.width] integerValue];
NSInteger videoHeight = [[NSNumber numberWithFloat:self.view.frame.size.height] integerValue];
if (videoWidth % 2 == 1) {
    videoWidth = videoWidth - 1;
}
if (videoHeight % 2 == 1) {
    videoHeight = videoHeight - 1;
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IOS-视频录制-—-AVFoundation&quot;&gt;&lt;a href=&quot;#IOS-视频录制-—-AVFoundation&quot; class=&quot;headerlink&quot; title=&quot;IOS 视频录制 — AVFoundation&quot;&gt;&lt;/a&gt;IOS 视频录制 — AVFoun
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>对 Run Loop 的理解</title>
    <link href="http://xuzichao.com/2015/01/05/%E5%AF%B9%20Run%20Loop%20%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://xuzichao.com/2015/01/05/对 Run Loop 的理解/</id>
    <published>2015-01-05T06:34:12.000Z</published>
    <updated>2017-06-04T03:53:36.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;对-Run-Loop-的理解&quot;&gt;&lt;a href=&quot;#对-Run-Loop-的理解&quot; class=&quot;headerlink&quot; title=&quot;对 Run Loop 的理解&quot;&gt;&lt;/a&gt;对 Run Loop 的理解&lt;/h1&gt;&lt;h2 id=&quot;一、Run-Loop为何存在&quot;&gt;&lt;a href=&quot;#一、Run-Loop为何存在&quot; class=&quot;headerlink&quot; title=&quot;一、Run Loop为何存在?&quot;&gt;&lt;/a&gt;一、Run Loop为何存在?&lt;/h2&gt;&lt;p&gt;我们从编写命令式的语句开始理解，一般我们写一个运行函数，只要顺序执行，一遍就过了，比如简单的NSLog一个“hello word”，这样我们就算完成了一个问候世界的程序。好简单的程序，但是一个复杂的系统，一个能称之为系统的程序，比如我们的手机App，它是不可能按照执行顺序一下执行完成就结束的，它包含了我们各类需求，会接受我们不同的操作，所以这个程序需要有一个设计的模式能够符合这样的应用场景，能够响应操作。所以，有了Event驱动的模式。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序可以一直运行并且接受用户的输入&lt;/li&gt;
&lt;li&gt;决定程序应该处理哪些Event&lt;/li&gt;
&lt;li&gt;主调方不能被被调方卡主，所以需要调用解耦。主调方就发个消息就完事了，就不管了，就可以去做别的了，被调防根据消息去派发、操作等等。这个概念就是(Message Queue) &lt;/li&gt;
&lt;li&gt;节省了CPU时间，比如时间片执行，这就是操作系统里的概念。&lt;/li&gt;
&lt;li&gt;没事的时候闲着，有事的时候激活它&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;二、Run-Loop-都包含了什么相关内容？&quot;&gt;&lt;a href=&quot;#二、Run-Loop-都包含了什么相关内容？&quot; class=&quot;headerlink&quot; title=&quot;二、Run Loop 都包含了什么相关内容？&quot;&gt;&lt;/a&gt;二、Run Loop 都包含了什么相关内容？&lt;/h2&gt;&lt;h3 id=&quot;1、CF层和F层&quot;&gt;&lt;a href=&quot;#1、CF层和F层&quot; class=&quot;headerlink&quot; title=&quot;1、CF层和F层&quot;&gt;&lt;/a&gt;1、CF层和F层&lt;/h3&gt;&lt;p&gt;CF层是C写的，跨平台，F层其实不干事的。GCD 有部分联系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_CF.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、常用&quot;&gt;&lt;a href=&quot;#2、常用&quot; class=&quot;headerlink&quot; title=&quot;2、常用&quot;&gt;&lt;/a&gt;2、常用&lt;/h3&gt;&lt;p&gt;NSTimer 完全依赖于RunLoop，UIEvent 都是RunLoop 跑的，AutoRelease 面试问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_normal.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;三、RunLoop调用堆栈&quot;&gt;&lt;a href=&quot;#三、RunLoop调用堆栈&quot; class=&quot;headerlink&quot; title=&quot;三、RunLoop调用堆栈&quot;&gt;&lt;/a&gt;三、RunLoop调用堆栈&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/images/RL_zhan.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;四、RunLoop构成元素&quot;&gt;&lt;a href=&quot;#四、RunLoop构成元素&quot; class=&quot;headerlink&quot; title=&quot;四、RunLoop构成元素&quot;&gt;&lt;/a&gt;四、RunLoop构成元素&lt;/h2&gt;&lt;h3 id=&quot;1、构成元素&quot;&gt;&lt;a href=&quot;#1、构成元素&quot; class=&quot;headerlink&quot; title=&quot;1、构成元素&quot;&gt;&lt;/a&gt;1、构成元素&lt;/h3&gt;&lt;p&gt;thread里面不是只能起一个RL，是可以多个的，但是必须嵌套。&lt;br&gt;RunLoop机制存在的一对多的关系，比如Mode和Timer&lt;br&gt;CFRunLoopSurece、CFRunLoopTimer、CFRunLoopObserver，主要的核心就是这三个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_consist.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、对CFRunLoopTimer的封装&quot;&gt;&lt;a href=&quot;#2、对CFRunLoopTimer的封装&quot; class=&quot;headerlink&quot; title=&quot;2、对CFRunLoopTimer的封装&quot;&gt;&lt;/a&gt;2、对CFRunLoopTimer的封装&lt;/h3&gt;&lt;p&gt;NSTimer、 performSelector:after 、 displayLink&lt;/p&gt;
&lt;h3 id=&quot;3、对CFRunLoopSurece的理解&quot;&gt;&lt;a href=&quot;#3、对CFRunLoopSurece的理解&quot; class=&quot;headerlink&quot; title=&quot;3、对CFRunLoopSurece的理解&quot;&gt;&lt;/a&gt;3、对CFRunLoopSurece的理解&lt;/h3&gt;&lt;p&gt;source是RL的数据源的抽象类，类似proctol，定义了两个version的source：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;source0：处理APP内部的世界、APP自己管理触发，比如UIEvent、CFSocket&lt;/li&gt;
&lt;li&gt;source1: 又RL和内核管理，Mach port 驱动 ，进程兼通讯的方式，往某个进程方法可以发到这个port上，对面的进程监听这个port 就是可以获得消息。比如：CFMachPort，CFMessagePort&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_Source0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4、对CFRunLoopServer对外报告状态&quot;&gt;&lt;a href=&quot;#4、对CFRunLoopServer对外报告状态&quot; class=&quot;headerlink&quot; title=&quot;4、对CFRunLoopServer对外报告状态&quot;&gt;&lt;/a&gt;4、对CFRunLoopServer对外报告状态&lt;/h3&gt;&lt;p&gt;比如我们在CAAnimation数组，多个动画，RL会通过判断依次的状态，将全部收集到一起后再开始执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_Observer.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5、CFRunLoopMode&quot;&gt;&lt;a href=&quot;#5、CFRunLoopMode&quot; class=&quot;headerlink&quot; title=&quot;5、CFRunLoopMode&quot;&gt;&lt;/a&gt;5、CFRunLoopMode&lt;/h3&gt;&lt;p&gt;RunLoop在同一时间段内，只能在唯一的特点的mode下Run。&lt;br&gt;更换Mode时，需要停止当前的Loop，然后重启动新的Loop。&lt;br&gt;Mode是个保证IOS滑动顺畅的关键，在这个mode下只执行滑动计算相关&lt;br&gt;可以创建自己的mode&lt;/p&gt;
&lt;p&gt;NSDefaultRunLoopMode: 默认的&lt;br&gt;UITrackingRunLoopMode:scrollView滑动&lt;br&gt;UIInitializationRunLoopMode: 启动的时候，私有的&lt;br&gt;NSRunLoopCommomModes: 1和2都能执行，作为一个数组，并无优先级&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相关Topic：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NSTimer 默认被加入NSDefaultRunLoopMode中，如果不希望被SCrollView影响，让滑动的时候timer也依然进行运行，就需要添加到NSRunLoopCommomModes中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RunLoopMode切换&lt;br&gt;都是重新起，不是切换回原来的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_Mode_Change.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCD和Run Loop的联系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GCD的计时器是它自己的计时器，只有main queue的时候有关系。Run Loop 会问一下 GCD 你这边在搞事情吗？有的话就抛出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_GCD.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auto Release&lt;br&gt;UIKit 通过的RunLoopServer在RunLoop两次Sleep间对Autorelease进行Pop和Push将这次Loop中产生的AutoRelease对象释放。两圈之间自动释放UI上自动释放池的东西，比如UITouch。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;六、RunLoop的挂起和唤醒&quot;&gt;&lt;a href=&quot;#六、RunLoop的挂起和唤醒&quot; class=&quot;headerlink&quot; title=&quot;六、RunLoop的挂起和唤醒&quot;&gt;&lt;/a&gt;六、RunLoop的挂起和唤醒&lt;/h3&gt;&lt;p&gt;CGRunLoopServiceMachPort 的作用就是发送消息，表示暂停还是激活，与内核进行交互。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/RL_Port.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;七、RunLoop的实践&quot;&gt;&lt;a href=&quot;#七、RunLoop的实践&quot; class=&quot;headerlink&quot; title=&quot;七、RunLoop的实践&quot;&gt;&lt;/a&gt;七、RunLoop的实践&lt;/h3&gt;&lt;p&gt;1、AFNetworking&lt;br&gt;常驻线程，NSURLConnetion需要一个RL常驻，不然跑一次就没了。&lt;br&gt;比如有个需求需要一直在线程里面呆着。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ (void)networkRequestThreadEntryPoint:(id)__unused object {
@autoreleasepool {
    [[NSThread currentThread] setName:@&amp;quot;AFNetworking&amp;quot;];

    NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
    [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];
    [runLoop run];
}
}
+ (NSThread *)networkRequestThread {
static NSThread *_networkRequestThread = nil;
static dispatch_once_t oncePredicate;
dispatch_once(&amp;amp;oncePredicate, ^{
    _networkRequestThread = [[NSThread alloc] initWithTarget:self selector:@selector(networkRequestThreadEntryPoint:) object:nil];
    [_networkRequestThread start];
});

return _networkRequestThread;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;2、 延迟加载tableview的图片&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UIImage *downLoadImage = ...;  
[self.avatarImageView performSelector:@selector(setImage:)  
                    withObject:downloadImage  
                    afterDelay:0  
                    inModes:@[NSDefaultRunLoopMode]];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、让Crash的APP回光返照&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 创建RunLoop
CFRunLoopRef runLoop = CFRunLoopGetCurrent();
// 设置Mode
NSArray *allModes = CFBridgingRelease(CFRunLoopCopyAllModes(runLoop));
// 弹窗告知 程序挂了
UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@&amp;quot;程序崩溃了&amp;quot; message:@&amp;quot;崩溃信息&amp;quot; delegate:nil cancelButtonTitle:@&amp;quot;取消&amp;quot; otherButtonTitles:nil];
[alertView show];
while (1) {
for (NSString *mode in allModes) {
// 快速的切换 Mode  就能处理滚动、点击等事件
CFRunLoopRunInMode((CFStringRef)mode, 0.001, false);
}
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对-Run-Loop-的理解&quot;&gt;&lt;a href=&quot;#对-Run-Loop-的理解&quot; class=&quot;headerlink&quot; title=&quot;对 Run Loop 的理解&quot;&gt;&lt;/a&gt;对 Run Loop 的理解&lt;/h1&gt;&lt;h2 id=&quot;一、Run-Loop为何存在&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo一下，博客诞生</title>
    <link href="http://xuzichao.com/2014/11/07/Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://xuzichao.com/2014/11/07/Hexo-个人博客使用介绍/</id>
    <published>2014-11-07T11:09:59.000Z</published>
    <updated>2017-06-20T12:02:43.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;个人博客搭建推荐Hexo&quot;&gt;&lt;a href=&quot;#个人博客搭建推荐Hexo&quot; class=&quot;headerlink&quot; title=&quot;个人博客搭建推荐Hexo&quot;&gt;&lt;/a&gt;个人博客搭建推荐Hexo&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;事实上，好早之前就尝试过自己搭建的个人博客，想积累写写技术知识点和生活上的见闻，希望它作为自己个人的一块土地。通常我们会在一些博客网站注册，比如博客园，然后开始作文，但这样的博客网站的界面UI设计挺糟糕的，作为还有一些审美的我是真的不太乐意去使用，虽然同为苦逼码农。后来出了一些品质比较高的静态博客等，也尝试去使用过，最后还是选择了使用博客组件去搭建，因为总觉得独立的才是自己的，大概程序员的内心都流淌着这样的独白。&lt;/p&gt;
&lt;p&gt;博客搭建框架组件很多，从WordPress到FarBox、Jekyll、Octopress、ghost、marboo、Hexo等等，他们基本都配合github使用,在网上各路大神的推荐之下，试过几款框架,基本都是在读完安装说明并开始有点小激动的时候，痛苦的安装过程让我放弃了这一方式。现在回想，一方面是由于自己前两年的电脑和网络都很烂，另一方面也是自己年轻没经验，搭建过程很多东西都需要一点点的搜索去学习，电脑一卡一慢就各种不爽，是真卡，我那个笔记本啊，最后就GG了。不过最后我还是搭建了自己的博客，并没有使用上述的哪种框架,前面的过程学习并知道了博客的搭建方式，索性自己就用FW设计了个人博客的UI界面，正好也会前端FE，就手写了博客页面Css和JS，这样博客的结界面就出来了，自己动手丰衣足食，然而它只是个静态的…到编译这一环节过不去了，毕竟JS属于前端的江湖，咋整…于是找了个python脚本，动态编译产生静态文件，只需要专心的写文字就好，随后可上传到github通过域名映射直接展示。这样，我就搭建好了自己的博客，界面都是我自己设计后用代码自己一行一行写的啊，简直高端大气上档次，简直满意的不得了！结果是非常符合我自己的审美设计要求，内心那个开心呐，随后开始了我的博客之路。&lt;/p&gt;
&lt;p&gt;到后来接触了Hexo,它就是我上述过程的一个更为优化的方案，功能完善，扩展强大。通过Hexo的使用也发现上手很快，我几乎是在半小时就搭建完成了博客，这速度让我为之欢呼，所以我决定转到Hexo来写作，那么，这里就写个文章来推荐一下吧。&lt;/p&gt;
&lt;h3 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;安装说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;一、准备工作&quot;&gt;&lt;a href=&quot;#一、准备工作&quot; class=&quot;headerlink&quot; title=&quot;一、准备工作&quot;&gt;&lt;/a&gt;一、准备工作&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;你得有自己的域名，买域名的地方比较多，有的坑有的好，我是在godaddy上买的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注册github账号，你将会免费使用到它提供的各种便利而强大的功能，免费的存储空间，下载开源项目等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把你的域名映射到github默认的博客地址上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装Node.js, npm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装git,生成SSH-KEY管理权限，配置域名到github关联&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;二、安装Hexo&quot;&gt;&lt;a href=&quot;#二、安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;二、安装Hexo&quot;&gt;&lt;/a&gt;二、安装Hexo&lt;/h5&gt;&lt;p&gt;1、hexo程序环境&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install -g hexo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、hexo工程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ hexo init 文件夹名称&lt;/p&gt;
&lt;p&gt;$ cd 文件夹名称&lt;/p&gt;
&lt;p&gt;$ npm install&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、会得到文件夹目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;├ ── _config.yml&lt;/p&gt;
&lt;p&gt;├ ── package.json&lt;/p&gt;
&lt;p&gt;├ ── scaffolds&lt;/p&gt;
&lt;p&gt;├ ── source&lt;/p&gt;
&lt;p&gt;├ ── _drafts&lt;/p&gt;
&lt;p&gt;└ ── _posts&lt;/p&gt;
&lt;p&gt;└ ── themes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4、按照命令行操作，此时到这里，别管这些文件是干啥的，来，我们接着往下走。&lt;/p&gt;
&lt;h5 id=&quot;三、生成第一篇文章&quot;&gt;&lt;a href=&quot;#三、生成第一篇文章&quot; class=&quot;headerlink&quot; title=&quot;三、生成第一篇文章&quot;&gt;&lt;/a&gt;三、生成第一篇文章&lt;/h5&gt;&lt;p&gt;1、创建文章&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo new 你的文章名称&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、编辑你的文章&lt;/p&gt;
&lt;p&gt;上面一步在你对应的文件夹下新建了一个Markdown文件，此时需要你使用对应的语法去编写文档，不知道的可以去学习下，用语言命令号来写Word文档，该有的有，不该有的没有，简直就是最爱&lt;/p&gt;
&lt;p&gt;3、编译&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo generate&lt;/p&gt;
&lt;p&gt;hexo server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时打开你的浏览器，默认地址是（ &lt;a href=&quot;http://0.0.0.0:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:4000/&lt;/a&gt; ），你就可以看到你的文章了，就是你刚才编写的文章。  &lt;/p&gt;
&lt;h5 id=&quot;四、发布到github&quot;&gt;&lt;a href=&quot;#四、发布到github&quot; class=&quot;headerlink&quot; title=&quot;四、发布到github&quot;&gt;&lt;/a&gt;四、发布到github&lt;/h5&gt;&lt;p&gt;由于前面你做好了准备工作，所以这里只需要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git commit -a -m “&lt;em&gt;*&lt;/em&gt;文章”&lt;/p&gt;
&lt;p&gt;git push&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时打开你的浏览器，比如你买的域名是( &lt;a href=&quot;http://baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://baidu.com/&lt;/a&gt; )，你打开它，和你在（ &lt;a href=&quot;http://0.0.0.0:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:4000&lt;/a&gt; ）看到的一毛一样，可以发给你的朋友看了。 &lt;/p&gt;
&lt;h3 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;p&gt;对于Hexo的使用，前后只介绍了关键的几个命令，为了可以可以快速搭建，都是基础入门很方便，麻烦的到是前面的准备工作，得一步步挨着来，有不懂的可以搜索和咨询。Hexo可以更换主题，也可以参照他人的主题制作，比如本站的主题yilia就是从github上找的开源主题，作者是我科的学长，已经获得了近2000颗星，这就是开源的力量，感谢学长litten的贡献。Hexo的其他扩展功能，请直接浏览Hexo的官网学习，我这里就不做的翻译了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/aoteman.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;个人博客搭建推荐Hexo&quot;&gt;&lt;a href=&quot;#个人博客搭建推荐Hexo&quot; class=&quot;headerlink&quot; title=&quot;个人博客搭建推荐Hexo&quot;&gt;&lt;/a&gt;个人博客搭建推荐Hexo&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
    
    </summary>
    
    
      <category term="程序开发" scheme="http://xuzichao.com/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>再见，My Hust</title>
    <link href="http://xuzichao.com/2014/09/12/%E5%86%8D%E8%A7%81%EF%BC%8CMy%20Hust/"/>
    <id>http://xuzichao.com/2014/09/12/再见，My Hust/</id>
    <published>2014-09-12T11:09:59.000Z</published>
    <updated>2017-06-20T12:07:50.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;后续&quot;&gt;&lt;a href=&quot;#后续&quot; class=&quot;headerlink&quot; title=&quot;后续&quot;&gt;&lt;/a&gt;后续&lt;/h3&gt;&lt;p&gt;不需要华丽的辞藻去颂赞，你的美与伟大一直浸染着每个Huster的心。&lt;/p&gt;
&lt;p&gt;大学四年，匆匆，不曾写过什么日记，好像是少了些记忆，从来都认为自己大学过的很对，走的路很直，如今毕业工作再回头看，迷迷茫茫，忙忙碌碌，勤勤恳恳，便是那过去的日子。最值得骄傲的就是，大学四年的里都是自己满意的经历过程，没有后悔。&lt;/p&gt;
&lt;p&gt;跨入华科校门，我期盼在大学结识一群好伙伴，然后，我就遇见了你们，并把我们的毕业旅行选在了彩云之南。&lt;/p&gt;
&lt;h3 id=&quot;记忆不散的相册&quot;&gt;&lt;a href=&quot;#记忆不散的相册&quot; class=&quot;headerlink&quot; title=&quot;记忆不散的相册&quot;&gt;&lt;/a&gt;记忆不散的相册&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/myPhoto/9.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;后续&quot;&gt;&lt;a href=&quot;#后续&quot; class=&quot;headerlink&quot; title=&quot;后续&quot;&gt;&lt;/a&gt;后续&lt;/h3&gt;&lt;p&gt;不需要华丽的辞藻去颂赞，你的美与伟大一直浸染着每个Huster的心。&lt;/p&gt;
&lt;p&gt;大学四年，匆匆，不曾写过什么日记，好像是少了些记忆，从来
    
    </summary>
    
    
      <category term="时光相册" scheme="http://xuzichao.com/tags/%E6%97%B6%E5%85%89%E7%9B%B8%E5%86%8C/"/>
    
  </entry>
  
</feed>
